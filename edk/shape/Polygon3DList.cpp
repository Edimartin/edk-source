#include "Polygon3DList.h"

/*
Library Polygon3DList - Manage 3D Polygons in EDK Game Engine
Copyright 2013 Eduardo Moura Sales Martins (edimartin@gmail.com)

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/

#ifdef printMessages
#pragma message "            Inside Polygon3DList.cpp"
#endif


edk::uint8 vboSizeofMesh3D[edk::GU::vbo_Size] = {
    0u,                       //vbo_NULL = 0u,
    /*sizeof(edk::float32)* */2u , //vbo_XY,
    /*sizeof(edk::float32)* */3u , //vbo_XYZ,
    /*sizeof(edk::float32)* */5u , //vbo_XY_NxNyNz,
    /*sizeof(edk::float32)* */6u , //vbo_XYZ_NxNyNz,
    /*sizeof(edk::float32)* */5u , //vbo_XY_RGB,
    /*sizeof(edk::float32)* */6u , //vbo_XYZ_RGB,
    /*sizeof(edk::float32)* */6u , //vbo_XY_RGBA,
    /*sizeof(edk::float32)* */7u , //vbo_XYZ_RGBA,
    /*sizeof(edk::float32)* */8u , //vbo_XY_RGB_NxNyNz,
    /*sizeof(edk::float32)* */9u , //vbo_XYZ_RGB_NxNyNz,
    /*sizeof(edk::float32)* */9u , //vbo_XY_RGBA_NxNyNz,
    /*sizeof(edk::float32)* */10u, //vbo_XYZ_RGBA_NxNyNz,
    /*sizeof(edk::float32)* */10u, //vbo_XY_RGB_NxNyNz_UVxUVy,
    /*sizeof(edk::float32)* */11u, //vbo_XYZ_RGB_NxNyNz_UVxUVy,
    /*sizeof(edk::float32)* */11u, //vbo_XY_RGBA_NxNyNz_UVxUVy,
    /*sizeof(edk::float32)* */12u  //vbo_XYZ_RGBA_NxNyNz_UVxUVy,
};

edk::material::Material edk::shape::Polygon3DList::whiteMaterial;

edk::shape::Polygon3DList::Polygon3DList(){
    this->classThis=NULL;
    this->Constructor();
}

edk::shape::Polygon3DList::~Polygon3DList(){
    this->Destructor();
}

void edk::shape::Polygon3DList::Constructor(){
    if(this->classThis!=this){
        this->classThis=this;

        this->polygons.Constructor();

        //clean the selected
        this->freeSelected();

        this->tempP.Constructor();
        this->tempP.setTranslate(0.f,0.f,0.f);
        this->tempP.setScale(1.f,1.f,1.f);
        this->tempP.setAngle(0.f);
        this->tempP.setVertexPosition(0u,0.f,0.f,0.f);
        this->tempP.setVertexPosition(1u,1.f,1.f,1.f);

        this->vertexs.Constructor();
        this->vertexsWithMatrix.Constructor();
        this->vertexsWire.Constructor();

        //VBO
        this->vbo=0u;
        this->vboWithMatrix=0u;
        this->vboWire=0u;
        this->vboType=edk::GU::vbo_NULL;
        this->vboWithMatrixType=edk::GU::vbo_NULL;
        this->vboWireType=edk::GU::vbo_NULL;

        //array for the vbo
        this->vertexBuffer.Constructor();
        this->vertexBufferWithMatrix.Constructor();
        this->vertexBufferWire.Constructor();

        //vbo vertexes size
        this->vboCount=0u;
        this->vboWireCount=0u;
        this->vboWithMatrixCount=0u;
        //save if can use VBO in the polygon
        this->canUseVBO=false;

        this->setAutomaticallyVBOFunctions();
        this->setAutomaticallyVBOFunctionsWithMatrix();
        this->setAutomaticallyVBOWireFunctions();
    }
}
void edk::shape::Polygon3DList::Destructor(){
    if(this->classThis==this){
        this->classThis=NULL;
        //can destruct the class
        //clean the polygons
        this->cleanPolygons();

        this->polygons.Destructor();
        this->tempP.Destructor();
        this->vertexs.Destructor();
        this->vertexsWithMatrix.Destructor();
        this->vertexsWire.Destructor();
        //array for the vbo
        this->vertexBuffer.Destructor();
        this->vertexBufferWithMatrix.Destructor();
        this->vertexBufferWire.Destructor();
    }
}



//return the vertexCount
edk::uint32 edk::shape::Polygon3DList::getVertexCount(){
    return this->vertexs.size();
}
void edk::shape::Polygon3DList::cleanVertexes(){
    edk::uint32 size = this->vertexs.size();
    edk::shape::Vertex3D* temp;
    for(edk::uint32 i=0u;i<size;i++){
        temp = this->vertexs.getNoIF(i);
        if(temp){
            delete temp;
        }
    }
    this->vertexs.clean();
}
edk::uint32 edk::shape::Polygon3DList::getVertexCountWithMatrix(){
    return this->vertexsWithMatrix.size();
}
void edk::shape::Polygon3DList::cleanVertexesWithMatrix(){
    edk::uint32 size = this->vertexsWithMatrix.size();
    edk::shape::Vertex3D* temp;
    for(edk::uint32 i=0u;i<size;i++){
        temp = this->vertexsWithMatrix.getNoIF(i);
        if(temp){
            delete temp;
        }
    }
    this->vertexsWithMatrix.clean();
}
edk::uint32 edk::shape::Polygon3DList::getVertexCountWire(){
    return this->vertexsWire.size();
}
void edk::shape::Polygon3DList::cleanVertexesWire(){
    edk::uint32 size = this->vertexsWire.size();
    edk::shape::Vertex3D* temp;
    for(edk::uint32 i=0u;i<size;i++){
        temp = this->vertexsWire.getNoIF(i);
        if(temp){
            delete temp;
        }
    }
    this->vertexsWire.clean();
}
//function to create the VBO
bool edk::shape::Polygon3DList::createVBO(edk::uint32 vertexCount,edk::GU::VBOType type){
    //delete the last VBO
    this->deleteVBO();
    //
    if(this->canUseVBO && vertexCount){
        //create the new VBO
        if(type && type<edk::GU::vbo_Size){
            //create the vertexBuffer
            if(this->vertexBuffer.createArray(vertexCount * vboSizeofMesh3D[type])){
                edk::uint32 increment = vboSizeofMesh3D[type];
                edk::uint32 size = vertexCount * increment;
                //clean the vertexBuffer
                switch(type){
                case edk::GU::vbo_XY:
                    for(edk::uint32 i=0u;i<size;i+=increment){
                        this->vertexBuffer.set(i,0.f);
                        this->vertexBuffer.set(i+1u,0.f);
                    }
                    break;
                case edk::GU::vbo_XY_NxNyNz:
                    for(edk::uint32 i=0u;i<size;i+=increment){
                        this->vertexBuffer.set(i,0.f);
                        this->vertexBuffer.set(i+1u,0.f);

                        this->vertexBuffer.set(i+2u,0.f);
                        this->vertexBuffer.set(i+3u,0.f);
                        this->vertexBuffer.set(i+4u,1.f);
                    }
                    break;
                case edk::GU::vbo_XY_RGB:
                    for(edk::uint32 i=0u;i<size;i+=increment){
                        this->vertexBuffer.set(i,0.f);
                        this->vertexBuffer.set(i+1u,0.f);

                        this->vertexBuffer.set(i+2u,1.f);
                        this->vertexBuffer.set(i+3u,1.f);
                        this->vertexBuffer.set(i+4u,1.f);
                    }
                    break;
                case edk::GU::vbo_XY_RGBA:
                    for(edk::uint32 i=0u;i<size;i+=increment){
                        this->vertexBuffer.set(i,0.f);
                        this->vertexBuffer.set(i+1u,0.f);

                        this->vertexBuffer.set(i+2u,1.f);
                        this->vertexBuffer.set(i+3u,1.f);
                        this->vertexBuffer.set(i+4u,1.f);
                        this->vertexBuffer.set(i+5u,1.f);
                    }
                    break;
                case edk::GU::vbo_XY_RGB_NxNyNz:
                    for(edk::uint32 i=0u;i<size;i+=increment){
                        this->vertexBuffer.set(i,0.f);
                        this->vertexBuffer.set(i+1u,0.f);

                        this->vertexBuffer.set(i+2u,1.f);
                        this->vertexBuffer.set(i+3u,1.f);
                        this->vertexBuffer.set(i+4u,1.f);

                        this->vertexBuffer.set(i+5u,0.f);
                        this->vertexBuffer.set(i+6u,0.f);
                        this->vertexBuffer.set(i+7u,1.f);
                    }
                    break;
                case edk::GU::vbo_XY_RGBA_NxNyNz:
                    for(edk::uint32 i=0u;i<size;i+=increment){
                        this->vertexBuffer.set(i,0.f);
                        this->vertexBuffer.set(i+1u,0.f);

                        this->vertexBuffer.set(i+2u,1.f);
                        this->vertexBuffer.set(i+3u,1.f);
                        this->vertexBuffer.set(i+4u,1.f);
                        this->vertexBuffer.set(i+5u,1.f);

                        this->vertexBuffer.set(i+6u,0.f);
                        this->vertexBuffer.set(i+7u,0.f);
                        this->vertexBuffer.set(i+8u,1.f);
                    }
                    break;
                case edk::GU::vbo_XY_RGB_NxNyNz_UVxUVy:
                    for(edk::uint32 i=0u;i<size;i+=increment){
                        this->vertexBuffer.set(i,0.f);
                        this->vertexBuffer.set(i+1u,0.f);

                        this->vertexBuffer.set(i+2u,1.f);
                        this->vertexBuffer.set(i+3u,1.f);
                        this->vertexBuffer.set(i+4u,1.f);

                        this->vertexBuffer.set(i+5u,0.f);
                        this->vertexBuffer.set(i+6u,0.f);
                        this->vertexBuffer.set(i+7u,1.f);

                        this->vertexBuffer.set(i+8u,0.f);
                        this->vertexBuffer.set(i+9u,0.f);
                    }
                    break;
                case edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy:
                    for(edk::uint32 i=0u;i<size;i+=increment){
                        this->vertexBuffer.set(i,0.f);
                        this->vertexBuffer.set(i+1u,0.f);

                        this->vertexBuffer.set(i+2u,1.f);
                        this->vertexBuffer.set(i+3u,1.f);
                        this->vertexBuffer.set(i+4u,1.f);
                        this->vertexBuffer.set(i+5u,1.f);

                        this->vertexBuffer.set(i+6u,0.f);
                        this->vertexBuffer.set(i+7u,0.f);
                        this->vertexBuffer.set(i+8u,1.f);

                        this->vertexBuffer.set(i+9u,0.f);
                        this->vertexBuffer.set(i+10u,0.f);
                    }
                    break;
                case edk::GU::vbo_XYZ:
                    for(edk::uint32 i=0u;i<size;i+=increment){
                        this->vertexBuffer.set(i,0.f);
                        this->vertexBuffer.set(i+1u,0.f);
                        this->vertexBuffer.set(i+2u,0.f);
                    }
                    break;
                case edk::GU::vbo_XYZ_NxNyNz:
                    for(edk::uint32 i=0u;i<size;i+=increment){
                        this->vertexBuffer.set(i,0.f);
                        this->vertexBuffer.set(i+1u,0.f);
                        this->vertexBuffer.set(i+2u,0.f);

                        this->vertexBuffer.set(i+3u,0.f);
                        this->vertexBuffer.set(i+4u,0.f);
                        this->vertexBuffer.set(i+5u,1.f);
                    }
                    break;
                case edk::GU::vbo_XYZ_RGB:
                    for(edk::uint32 i=0u;i<size;i+=increment){
                        this->vertexBuffer.set(i,0.f);
                        this->vertexBuffer.set(i+1u,0.f);
                        this->vertexBuffer.set(i+2u,0.f);

                        this->vertexBuffer.set(i+3u,1.f);
                        this->vertexBuffer.set(i+4u,1.f);
                        this->vertexBuffer.set(i+5u,1.f);
                    }
                    break;
                case edk::GU::vbo_XYZ_RGBA:
                    for(edk::uint32 i=0u;i<size;i+=increment){
                        this->vertexBuffer.set(i,0.f);
                        this->vertexBuffer.set(i+1u,0.f);
                        this->vertexBuffer.set(i+2u,0.f);

                        this->vertexBuffer.set(i+3u,1.f);
                        this->vertexBuffer.set(i+4u,1.f);
                        this->vertexBuffer.set(i+5u,1.f);
                        this->vertexBuffer.set(i+6u,1.f);
                    }
                    break;
                case edk::GU::vbo_XYZ_RGB_NxNyNz:
                    for(edk::uint32 i=0u;i<size;i+=increment){
                        this->vertexBuffer.set(i,0.f);
                        this->vertexBuffer.set(i+1u,0.f);
                        this->vertexBuffer.set(i+2u,0.f);

                        this->vertexBuffer.set(i+3u,1.f);
                        this->vertexBuffer.set(i+4u,1.f);
                        this->vertexBuffer.set(i+5u,1.f);

                        this->vertexBuffer.set(i+6u,0.f);
                        this->vertexBuffer.set(i+7u,0.f);
                        this->vertexBuffer.set(i+8u,1.f);
                    }
                    break;
                case edk::GU::vbo_XYZ_RGBA_NxNyNz:
                    for(edk::uint32 i=0u;i<size;i+=increment){
                        this->vertexBuffer.set(i,0.f);
                        this->vertexBuffer.set(i+1u,0.f);
                        this->vertexBuffer.set(i+2u,0.f);

                        this->vertexBuffer.set(i+3u,1.f);
                        this->vertexBuffer.set(i+4u,1.f);
                        this->vertexBuffer.set(i+5u,1.f);
                        this->vertexBuffer.set(i+6u,1.f);

                        this->vertexBuffer.set(i+7u,0.f);
                        this->vertexBuffer.set(i+8u,0.f);
                        this->vertexBuffer.set(i+9u,1.f);
                    }
                    break;
                case edk::GU::vbo_XYZ_RGB_NxNyNz_UVxUVy:
                    for(edk::uint32 i=0u;i<size;i+=increment){
                        this->vertexBuffer.set(i,0.f);
                        this->vertexBuffer.set(i+1u,0.f);
                        this->vertexBuffer.set(i+2u,0.f);

                        this->vertexBuffer.set(i+3u,1.f);
                        this->vertexBuffer.set(i+4u,1.f);
                        this->vertexBuffer.set(i+5u,1.f);

                        this->vertexBuffer.set(i+6u,0.f);
                        this->vertexBuffer.set(i+7u,0.f);
                        this->vertexBuffer.set(i+8u,1.f);

                        this->vertexBuffer.set(i+9u,0.f);
                        this->vertexBuffer.set(i+10u,0.f);
                    }
                    break;
                case edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy:
                    for(edk::uint32 i=0u;i<size;i+=increment){
                        this->vertexBuffer.set(i,0.f);
                        this->vertexBuffer.set(i+1u,0.f);
                        this->vertexBuffer.set(i+2u,0.f);

                        this->vertexBuffer.set(i+3u,1.f);
                        this->vertexBuffer.set(i+4u,1.f);
                        this->vertexBuffer.set(i+5u,1.f);
                        this->vertexBuffer.set(i+6u,1.f);

                        this->vertexBuffer.set(i+7u,0.f);
                        this->vertexBuffer.set(i+8u,0.f);
                        this->vertexBuffer.set(i+9u,1.f);

                        this->vertexBuffer.set(i+10u,0.f);
                        this->vertexBuffer.set(i+11u,0.f);
                    }
                    break;
                default:
                    break;
                }


                //alloc the vertexBuffer in GU
                this->vbo = edk::GU_GLSL::guAllocBuffer(GU_ARRAY_BUFFER);
                if(this->vbo){
                    if(edk::GU_GLSL::guBufferData(GU_ARRAY_BUFFER, this->vertexBuffer.getSize() * sizeof(edk::float32), this->vertexBuffer.getPointer(), GU_STATIC_DRAW)){
                        edk::GU_GLSL::guDontUseBuffer(GU_ARRAY_BUFFER);
                        //save the type
                        this->vboType = type;
                        this->vboCount=vertexCount;

                        //update the VBO functions
                        this->setAutomaticallyVBOFunctions();

                        return true;
                    }
                    edk::GU_GLSL::guDontUseBuffer(GU_ARRAY_BUFFER);

                    //else delete the bugger
                    edk::GU_GLSL::guDeleteBuffer(this->vbo);
                    this->vbo=0u;
                }
                //else delete the vertexBuffer
                this->vertexBuffer.clean();
            }
        }
    }
    return false;
}
bool edk::shape::Polygon3DList::createVBOWithMatrix(edk::uint32 vertexCount,edk::GU::VBOType type){
    //delete the last VBO
    this->deleteVBOWithMatrix();
    //
    if(this->canUseVBO && vertexCount){
        //create the new VBO
        if(type && type<edk::GU::vbo_Size){
            //create the vertexBufferWithMatrix
            if(this->vertexBufferWithMatrix.createArray(vertexCount * vboSizeofMesh3D[type])){
                edk::uint32 increment = vboSizeofMesh3D[type];
                edk::uint32 size = vertexCount * increment;
                //clean the vertexBufferWithMatrix
                switch(type){
                case edk::GU::vbo_XY:
                    for(edk::uint32 i=0u;i<size;i+=increment){
                        this->vertexBufferWithMatrix.set(i,0.f);
                        this->vertexBufferWithMatrix.set(i+1u,0.f);
                    }
                    break;
                case edk::GU::vbo_XY_NxNyNz:
                    for(edk::uint32 i=0u;i<size;i+=increment){
                        this->vertexBufferWithMatrix.set(i,0.f);
                        this->vertexBufferWithMatrix.set(i+1u,0.f);

                        this->vertexBufferWithMatrix.set(i+2u,0.f);
                        this->vertexBufferWithMatrix.set(i+3u,0.f);
                        this->vertexBufferWithMatrix.set(i+4u,1.f);
                    }
                    break;
                case edk::GU::vbo_XY_RGB:
                    for(edk::uint32 i=0u;i<size;i+=increment){
                        this->vertexBufferWithMatrix.set(i,0.f);
                        this->vertexBufferWithMatrix.set(i+1u,0.f);

                        this->vertexBufferWithMatrix.set(i+2u,1.f);
                        this->vertexBufferWithMatrix.set(i+3u,1.f);
                        this->vertexBufferWithMatrix.set(i+4u,1.f);
                    }
                    break;
                case edk::GU::vbo_XY_RGBA:
                    for(edk::uint32 i=0u;i<size;i+=increment){
                        this->vertexBufferWithMatrix.set(i,0.f);
                        this->vertexBufferWithMatrix.set(i+1u,0.f);

                        this->vertexBufferWithMatrix.set(i+2u,1.f);
                        this->vertexBufferWithMatrix.set(i+3u,1.f);
                        this->vertexBufferWithMatrix.set(i+4u,1.f);
                        this->vertexBufferWithMatrix.set(i+5u,1.f);
                    }
                    break;
                case edk::GU::vbo_XY_RGB_NxNyNz:
                    for(edk::uint32 i=0u;i<size;i+=increment){
                        this->vertexBufferWithMatrix.set(i,0.f);
                        this->vertexBufferWithMatrix.set(i+1u,0.f);

                        this->vertexBufferWithMatrix.set(i+2u,1.f);
                        this->vertexBufferWithMatrix.set(i+3u,1.f);
                        this->vertexBufferWithMatrix.set(i+4u,1.f);

                        this->vertexBufferWithMatrix.set(i+5u,0.f);
                        this->vertexBufferWithMatrix.set(i+6u,0.f);
                        this->vertexBufferWithMatrix.set(i+7u,1.f);
                    }
                    break;
                case edk::GU::vbo_XY_RGBA_NxNyNz:
                    for(edk::uint32 i=0u;i<size;i+=increment){
                        this->vertexBufferWithMatrix.set(i,0.f);
                        this->vertexBufferWithMatrix.set(i+1u,0.f);

                        this->vertexBufferWithMatrix.set(i+2u,1.f);
                        this->vertexBufferWithMatrix.set(i+3u,1.f);
                        this->vertexBufferWithMatrix.set(i+4u,1.f);
                        this->vertexBufferWithMatrix.set(i+5u,1.f);

                        this->vertexBufferWithMatrix.set(i+6u,0.f);
                        this->vertexBufferWithMatrix.set(i+7u,0.f);
                        this->vertexBufferWithMatrix.set(i+8u,1.f);
                    }
                    break;
                case edk::GU::vbo_XY_RGB_NxNyNz_UVxUVy:
                    for(edk::uint32 i=0u;i<size;i+=increment){
                        this->vertexBufferWithMatrix.set(i,0.f);
                        this->vertexBufferWithMatrix.set(i+1u,0.f);

                        this->vertexBufferWithMatrix.set(i+2u,1.f);
                        this->vertexBufferWithMatrix.set(i+3u,1.f);
                        this->vertexBufferWithMatrix.set(i+4u,1.f);

                        this->vertexBufferWithMatrix.set(i+5u,0.f);
                        this->vertexBufferWithMatrix.set(i+6u,0.f);
                        this->vertexBufferWithMatrix.set(i+7u,1.f);

                        this->vertexBufferWithMatrix.set(i+8u,0.f);
                        this->vertexBufferWithMatrix.set(i+9u,0.f);
                    }
                    break;
                case edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy:
                    for(edk::uint32 i=0u;i<size;i+=increment){
                        this->vertexBufferWithMatrix.set(i,0.f);
                        this->vertexBufferWithMatrix.set(i+1u,0.f);

                        this->vertexBufferWithMatrix.set(i+2u,1.f);
                        this->vertexBufferWithMatrix.set(i+3u,1.f);
                        this->vertexBufferWithMatrix.set(i+4u,1.f);
                        this->vertexBufferWithMatrix.set(i+5u,1.f);

                        this->vertexBufferWithMatrix.set(i+6u,0.f);
                        this->vertexBufferWithMatrix.set(i+7u,0.f);
                        this->vertexBufferWithMatrix.set(i+8u,1.f);

                        this->vertexBufferWithMatrix.set(i+9u,0.f);
                        this->vertexBufferWithMatrix.set(i+10u,0.f);
                    }
                    break;
                case edk::GU::vbo_XYZ:
                    for(edk::uint32 i=0u;i<size;i+=increment){
                        this->vertexBufferWithMatrix.set(i,0.f);
                        this->vertexBufferWithMatrix.set(i+1u,0.f);
                        this->vertexBufferWithMatrix.set(i+2u,0.f);
                    }
                    break;
                case edk::GU::vbo_XYZ_NxNyNz:
                    for(edk::uint32 i=0u;i<size;i+=increment){
                        this->vertexBufferWithMatrix.set(i,0.f);
                        this->vertexBufferWithMatrix.set(i+1u,0.f);
                        this->vertexBufferWithMatrix.set(i+2u,0.f);

                        this->vertexBufferWithMatrix.set(i+3u,0.f);
                        this->vertexBufferWithMatrix.set(i+4u,0.f);
                        this->vertexBufferWithMatrix.set(i+5u,1.f);
                    }
                    break;
                case edk::GU::vbo_XYZ_RGB:
                    for(edk::uint32 i=0u;i<size;i+=increment){
                        this->vertexBufferWithMatrix.set(i,0.f);
                        this->vertexBufferWithMatrix.set(i+1u,0.f);
                        this->vertexBufferWithMatrix.set(i+2u,0.f);

                        this->vertexBufferWithMatrix.set(i+3u,1.f);
                        this->vertexBufferWithMatrix.set(i+4u,1.f);
                        this->vertexBufferWithMatrix.set(i+5u,1.f);
                    }
                    break;
                case edk::GU::vbo_XYZ_RGBA:
                    for(edk::uint32 i=0u;i<size;i+=increment){
                        this->vertexBufferWithMatrix.set(i,0.f);
                        this->vertexBufferWithMatrix.set(i+1u,0.f);
                        this->vertexBufferWithMatrix.set(i+2u,0.f);

                        this->vertexBufferWithMatrix.set(i+3u,1.f);
                        this->vertexBufferWithMatrix.set(i+4u,1.f);
                        this->vertexBufferWithMatrix.set(i+5u,1.f);
                        this->vertexBufferWithMatrix.set(i+6u,1.f);
                    }
                    break;
                case edk::GU::vbo_XYZ_RGB_NxNyNz:
                    for(edk::uint32 i=0u;i<size;i+=increment){
                        this->vertexBufferWithMatrix.set(i,0.f);
                        this->vertexBufferWithMatrix.set(i+1u,0.f);
                        this->vertexBufferWithMatrix.set(i+2u,0.f);

                        this->vertexBufferWithMatrix.set(i+3u,1.f);
                        this->vertexBufferWithMatrix.set(i+4u,1.f);
                        this->vertexBufferWithMatrix.set(i+5u,1.f);

                        this->vertexBufferWithMatrix.set(i+6u,0.f);
                        this->vertexBufferWithMatrix.set(i+7u,0.f);
                        this->vertexBufferWithMatrix.set(i+8u,1.f);
                    }
                    break;
                case edk::GU::vbo_XYZ_RGBA_NxNyNz:
                    for(edk::uint32 i=0u;i<size;i+=increment){
                        this->vertexBufferWithMatrix.set(i,0.f);
                        this->vertexBufferWithMatrix.set(i+1u,0.f);
                        this->vertexBufferWithMatrix.set(i+2u,0.f);

                        this->vertexBufferWithMatrix.set(i+3u,1.f);
                        this->vertexBufferWithMatrix.set(i+4u,1.f);
                        this->vertexBufferWithMatrix.set(i+5u,1.f);
                        this->vertexBufferWithMatrix.set(i+6u,1.f);

                        this->vertexBufferWithMatrix.set(i+7u,0.f);
                        this->vertexBufferWithMatrix.set(i+8u,0.f);
                        this->vertexBufferWithMatrix.set(i+9u,1.f);
                    }
                    break;
                case edk::GU::vbo_XYZ_RGB_NxNyNz_UVxUVy:
                    for(edk::uint32 i=0u;i<size;i+=increment){
                        this->vertexBufferWithMatrix.set(i,0.f);
                        this->vertexBufferWithMatrix.set(i+1u,0.f);
                        this->vertexBufferWithMatrix.set(i+2u,0.f);

                        this->vertexBufferWithMatrix.set(i+3u,1.f);
                        this->vertexBufferWithMatrix.set(i+4u,1.f);
                        this->vertexBufferWithMatrix.set(i+5u,1.f);

                        this->vertexBufferWithMatrix.set(i+6u,0.f);
                        this->vertexBufferWithMatrix.set(i+7u,0.f);
                        this->vertexBufferWithMatrix.set(i+8u,1.f);

                        this->vertexBufferWithMatrix.set(i+9u,0.f);
                        this->vertexBufferWithMatrix.set(i+10u,0.f);
                    }
                    break;
                case edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy:
                    for(edk::uint32 i=0u;i<size;i+=increment){
                        this->vertexBufferWithMatrix.set(i,0.f);
                        this->vertexBufferWithMatrix.set(i+1u,0.f);
                        this->vertexBufferWithMatrix.set(i+2u,0.f);

                        this->vertexBufferWithMatrix.set(i+3u,1.f);
                        this->vertexBufferWithMatrix.set(i+4u,1.f);
                        this->vertexBufferWithMatrix.set(i+5u,1.f);
                        this->vertexBufferWithMatrix.set(i+6u,1.f);

                        this->vertexBufferWithMatrix.set(i+7u,0.f);
                        this->vertexBufferWithMatrix.set(i+8u,0.f);
                        this->vertexBufferWithMatrix.set(i+9u,1.f);

                        this->vertexBufferWithMatrix.set(i+10u,0.f);
                        this->vertexBufferWithMatrix.set(i+11u,0.f);
                    }
                    break;
                default:
                    break;
                }


                //alloc the vertexBufferWithMatrix in GU
                this->vboWithMatrix = edk::GU_GLSL::guAllocBuffer(GU_ARRAY_BUFFER);
                if(this->vboWithMatrix){
                    if(edk::GU_GLSL::guBufferData(GU_ARRAY_BUFFER,
                                                  this->vertexBufferWithMatrix.getSize() * sizeof(edk::float32),
                                                  this->vertexBufferWithMatrix.getPointer(),
                                                  GU_STATIC_DRAW
                                                  )
                            ){
                        edk::GU_GLSL::guDontUseBuffer(GU_ARRAY_BUFFER);
                        //save the type
                        this->vboWithMatrixType = type;
                        this->vboWithMatrixCount=vertexCount;

                        //update the VBO functions
                        this->setAutomaticallyVBOFunctionsWithMatrix();

                        return true;
                    }
                    edk::GU_GLSL::guDontUseBuffer(GU_ARRAY_BUFFER);

                    //else delete the bugger
                    edk::GU_GLSL::guDeleteBuffer(this->vboWithMatrix);
                    this->vboWithMatrix=0u;
                }
                //else delete the vertexBufferWithMatrix
                this->vertexBufferWithMatrix.clean();
            }
        }
    }
    return false;
}
bool edk::shape::Polygon3DList::createVBOWire(edk::uint32 vertexCount,edk::GU::VBOType type){
    //delete the last VBO
    this->deleteVBOWire();
    //
    if(this->canUseVBO && vertexCount){
        //create the new VBO
        if(type && type<edk::GU::vbo_Size){
            //create the vertexBufferWire
            if(this->vertexBufferWire.createArray(vertexCount * vboSizeofMesh3D[type])){
                edk::uint32 increment = vboSizeofMesh3D[type];
                edk::uint32 size = vertexCount * increment;
                //clean the vertexBufferWire
                switch(type){
                case edk::GU::vbo_XY:
                    for(edk::uint32 i=0u;i<size;i+=increment){
                        this->vertexBufferWire.set(i,0.f);
                        this->vertexBufferWire.set(i+1u,0.f);
                    }
                    break;
                case edk::GU::vbo_XY_NxNyNz:
                    for(edk::uint32 i=0u;i<size;i+=increment){
                        this->vertexBufferWire.set(i,0.f);
                        this->vertexBufferWire.set(i+1u,0.f);

                        this->vertexBufferWire.set(i+2u,0.f);
                        this->vertexBufferWire.set(i+3u,0.f);
                        this->vertexBufferWire.set(i+4u,1.f);
                    }
                    break;
                case edk::GU::vbo_XY_RGB:
                    for(edk::uint32 i=0u;i<size;i+=increment){
                        this->vertexBufferWire.set(i,0.f);
                        this->vertexBufferWire.set(i+1u,0.f);

                        this->vertexBufferWire.set(i+2u,1.f);
                        this->vertexBufferWire.set(i+3u,1.f);
                        this->vertexBufferWire.set(i+4u,1.f);
                    }
                    break;
                case edk::GU::vbo_XY_RGBA:
                    for(edk::uint32 i=0u;i<size;i+=increment){
                        this->vertexBufferWire.set(i,0.f);
                        this->vertexBufferWire.set(i+1u,0.f);

                        this->vertexBufferWire.set(i+2u,1.f);
                        this->vertexBufferWire.set(i+3u,1.f);
                        this->vertexBufferWire.set(i+4u,1.f);
                        this->vertexBufferWire.set(i+5u,1.f);
                    }
                    break;
                case edk::GU::vbo_XY_RGB_NxNyNz:
                    for(edk::uint32 i=0u;i<size;i+=increment){
                        this->vertexBufferWire.set(i,0.f);
                        this->vertexBufferWire.set(i+1u,0.f);

                        this->vertexBufferWire.set(i+2u,1.f);
                        this->vertexBufferWire.set(i+3u,1.f);
                        this->vertexBufferWire.set(i+4u,1.f);

                        this->vertexBufferWire.set(i+5u,0.f);
                        this->vertexBufferWire.set(i+6u,0.f);
                        this->vertexBufferWire.set(i+7u,1.f);
                    }
                    break;
                case edk::GU::vbo_XY_RGBA_NxNyNz:
                    for(edk::uint32 i=0u;i<size;i+=increment){
                        this->vertexBufferWire.set(i,0.f);
                        this->vertexBufferWire.set(i+1u,0.f);

                        this->vertexBufferWire.set(i+2u,1.f);
                        this->vertexBufferWire.set(i+3u,1.f);
                        this->vertexBufferWire.set(i+4u,1.f);
                        this->vertexBufferWire.set(i+5u,1.f);

                        this->vertexBufferWire.set(i+6u,0.f);
                        this->vertexBufferWire.set(i+7u,0.f);
                        this->vertexBufferWire.set(i+8u,1.f);
                    }
                    break;
                case edk::GU::vbo_XY_RGB_NxNyNz_UVxUVy:
                    for(edk::uint32 i=0u;i<size;i+=increment){
                        this->vertexBufferWire.set(i,0.f);
                        this->vertexBufferWire.set(i+1u,0.f);

                        this->vertexBufferWire.set(i+2u,1.f);
                        this->vertexBufferWire.set(i+3u,1.f);
                        this->vertexBufferWire.set(i+4u,1.f);

                        this->vertexBufferWire.set(i+5u,0.f);
                        this->vertexBufferWire.set(i+6u,0.f);
                        this->vertexBufferWire.set(i+7u,1.f);

                        this->vertexBufferWire.set(i+8u,0.f);
                        this->vertexBufferWire.set(i+9u,0.f);
                    }
                    break;
                case edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy:
                    for(edk::uint32 i=0u;i<size;i+=increment){
                        this->vertexBufferWire.set(i,0.f);
                        this->vertexBufferWire.set(i+1u,0.f);

                        this->vertexBufferWire.set(i+2u,1.f);
                        this->vertexBufferWire.set(i+3u,1.f);
                        this->vertexBufferWire.set(i+4u,1.f);
                        this->vertexBufferWire.set(i+5u,1.f);

                        this->vertexBufferWire.set(i+6u,0.f);
                        this->vertexBufferWire.set(i+7u,0.f);
                        this->vertexBufferWire.set(i+8u,1.f);

                        this->vertexBufferWire.set(i+9u,0.f);
                        this->vertexBufferWire.set(i+10u,0.f);
                    }
                    break;
                case edk::GU::vbo_XYZ:
                    for(edk::uint32 i=0u;i<size;i+=increment){
                        this->vertexBufferWire.set(i,0.f);
                        this->vertexBufferWire.set(i+1u,0.f);
                        this->vertexBufferWire.set(i+2u,0.f);
                    }
                    break;
                case edk::GU::vbo_XYZ_NxNyNz:
                    for(edk::uint32 i=0u;i<size;i+=increment){
                        this->vertexBufferWire.set(i,0.f);
                        this->vertexBufferWire.set(i+1u,0.f);
                        this->vertexBufferWire.set(i+2u,0.f);

                        this->vertexBufferWire.set(i+3u,0.f);
                        this->vertexBufferWire.set(i+4u,0.f);
                        this->vertexBufferWire.set(i+5u,1.f);
                    }
                    break;
                case edk::GU::vbo_XYZ_RGB:
                    for(edk::uint32 i=0u;i<size;i+=increment){
                        this->vertexBufferWire.set(i,0.f);
                        this->vertexBufferWire.set(i+1u,0.f);
                        this->vertexBufferWire.set(i+2u,0.f);

                        this->vertexBufferWire.set(i+3u,1.f);
                        this->vertexBufferWire.set(i+4u,1.f);
                        this->vertexBufferWire.set(i+5u,1.f);
                    }
                    break;
                case edk::GU::vbo_XYZ_RGBA:
                    for(edk::uint32 i=0u;i<size;i+=increment){
                        this->vertexBufferWire.set(i,0.f);
                        this->vertexBufferWire.set(i+1u,0.f);
                        this->vertexBufferWire.set(i+2u,0.f);

                        this->vertexBufferWire.set(i+3u,1.f);
                        this->vertexBufferWire.set(i+4u,1.f);
                        this->vertexBufferWire.set(i+5u,1.f);
                        this->vertexBufferWire.set(i+6u,1.f);
                    }
                    break;
                case edk::GU::vbo_XYZ_RGB_NxNyNz:
                    for(edk::uint32 i=0u;i<size;i+=increment){
                        this->vertexBufferWire.set(i,0.f);
                        this->vertexBufferWire.set(i+1u,0.f);
                        this->vertexBufferWire.set(i+2u,0.f);

                        this->vertexBufferWire.set(i+3u,1.f);
                        this->vertexBufferWire.set(i+4u,1.f);
                        this->vertexBufferWire.set(i+5u,1.f);

                        this->vertexBufferWire.set(i+6u,0.f);
                        this->vertexBufferWire.set(i+7u,0.f);
                        this->vertexBufferWire.set(i+8u,1.f);
                    }
                    break;
                case edk::GU::vbo_XYZ_RGBA_NxNyNz:
                    for(edk::uint32 i=0u;i<size;i+=increment){
                        this->vertexBufferWire.set(i,0.f);
                        this->vertexBufferWire.set(i+1u,0.f);
                        this->vertexBufferWire.set(i+2u,0.f);

                        this->vertexBufferWire.set(i+3u,1.f);
                        this->vertexBufferWire.set(i+4u,1.f);
                        this->vertexBufferWire.set(i+5u,1.f);
                        this->vertexBufferWire.set(i+6u,1.f);

                        this->vertexBufferWire.set(i+7u,0.f);
                        this->vertexBufferWire.set(i+8u,0.f);
                        this->vertexBufferWire.set(i+9u,1.f);
                    }
                    break;
                case edk::GU::vbo_XYZ_RGB_NxNyNz_UVxUVy:
                    for(edk::uint32 i=0u;i<size;i+=increment){
                        this->vertexBufferWire.set(i,0.f);
                        this->vertexBufferWire.set(i+1u,0.f);
                        this->vertexBufferWire.set(i+2u,0.f);

                        this->vertexBufferWire.set(i+3u,1.f);
                        this->vertexBufferWire.set(i+4u,1.f);
                        this->vertexBufferWire.set(i+5u,1.f);

                        this->vertexBufferWire.set(i+6u,0.f);
                        this->vertexBufferWire.set(i+7u,0.f);
                        this->vertexBufferWire.set(i+8u,1.f);

                        this->vertexBufferWire.set(i+9u,0.f);
                        this->vertexBufferWire.set(i+10u,0.f);
                    }
                    break;
                case edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy:
                    for(edk::uint32 i=0u;i<size;i+=increment){
                        this->vertexBufferWire.set(i,0.f);
                        this->vertexBufferWire.set(i+1u,0.f);
                        this->vertexBufferWire.set(i+2u,0.f);

                        this->vertexBufferWire.set(i+3u,1.f);
                        this->vertexBufferWire.set(i+4u,1.f);
                        this->vertexBufferWire.set(i+5u,1.f);
                        this->vertexBufferWire.set(i+6u,1.f);

                        this->vertexBufferWire.set(i+7u,0.f);
                        this->vertexBufferWire.set(i+8u,0.f);
                        this->vertexBufferWire.set(i+9u,1.f);

                        this->vertexBufferWire.set(i+10u,0.f);
                        this->vertexBufferWire.set(i+11u,0.f);
                    }
                    break;
                default:
                    break;
                }


                //alloc the vertexBuffer in GU
                this->vboWire = edk::GU_GLSL::guAllocBuffer(GU_ARRAY_BUFFER);
                if(this->vboWire){
                    if(edk::GU_GLSL::guBufferData(GU_ARRAY_BUFFER,
                                                  this->vertexBufferWire.getSize() * sizeof(edk::float32),
                                                  this->vertexBufferWire.getPointer(),
                                                  GU_STATIC_DRAW
                                                  )
                            ){
                        edk::GU_GLSL::guDontUseBuffer(GU_ARRAY_BUFFER);
                        //save the type
                        this->vboWireType = type;
                        this->vboWireCount=vertexCount;

                        //update the VBO functions
                        this->setAutomaticallyVBOWireFunctions();

                        return true;
                    }
                    edk::GU_GLSL::guDontUseBuffer(GU_ARRAY_BUFFER);

                    //else delete the bugger
                    edk::GU_GLSL::guDeleteBuffer(this->vboWire);
                    this->vboWire=0u;
                }
                //else delete the vertexBuffer
                this->vertexBufferWire.clean();
            }
        }
    }
    return false;
}
//run the GU function to update the VBO
bool edk::shape::Polygon3DList::updateVBO(){
    if(this->haveVBO() && this->vertexBuffer.getSize()){
        edk::GU_GLSL::guUseBuffer(GU_ARRAY_BUFFER,this->vbo);
        if(edk::GU_GLSL::guBufferData(GU_ARRAY_BUFFER, this->vertexBuffer.getSize() * sizeof(edk::float32), this->vertexBuffer.getPointer(), GU_STATIC_DRAW)){
            edk::GU_GLSL::guDontUseBuffer(GU_ARRAY_BUFFER);
            return true;
        }
        edk::GU_GLSL::guDontUseBuffer(GU_ARRAY_BUFFER);
    }
    return false;
}
bool edk::shape::Polygon3DList::updateVBOWithMatrix(){
    if(this->haveVBO() && this->vertexBufferWithMatrix.getSize()){
        edk::GU_GLSL::guUseBuffer(GU_ARRAY_BUFFER,this->vboWithMatrix);
        if(edk::GU_GLSL::guBufferData(GU_ARRAY_BUFFER, this->vertexBufferWithMatrix.getSize() * sizeof(edk::float32), this->vertexBufferWithMatrix.getPointer(), GU_STATIC_DRAW)){
            edk::GU_GLSL::guDontUseBuffer(GU_ARRAY_BUFFER);
            return true;
        }
        edk::GU_GLSL::guDontUseBuffer(GU_ARRAY_BUFFER);
    }
    return false;
}
bool edk::shape::Polygon3DList::updateVBOValuesWithMatrices(edk::vector::Matrixf32<4u,4u>* matrix,
                                                            edk::vector::Matrixf32<4u,4u>* matrixTemp
                                                            ){
    if(matrix && matrixTemp){
        //set the vertex position in vertexBuffer
        if(this->haveVBO() && this->vertexBufferWithMatrix.haveArray()){
            edk::uint32 vertex=0u;
            for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
                matrixTemp->setIdentity(1.f,0.f);
                //read the position
                vertex = i*vboSizeofMesh3D[this->vboWithMatrixType];
                matrixTemp->set(0u,0u,this->vertexBufferWithMatrix.get(vertex));
                vertex++;
                matrixTemp->set(0u,1u,this->vertexBufferWithMatrix.get(vertex));
                vertex++;
                matrixTemp->set(0u,2u,this->vertexBufferWithMatrix.get(vertex));
                //multiply the matrix
                matrixTemp->multiplyMatrixWithThis(matrix);
                //set the position
                vertex = i*vboSizeofMesh3D[this->vboWithMatrixType];
                this->vertexBufferWithMatrix.set(vertex,matrixTemp->get(0u,0u));
                vertex++;
                this->vertexBufferWithMatrix.set(vertex,matrixTemp->get(0u,1u));
                vertex++;
                this->vertexBufferWithMatrix.set(vertex,matrixTemp->get(0u,2u));
            }
            //update the VBO
            this->updateVBOFunctionsWithMatrix();
            return true;
        }
    }
    return false;
}
bool edk::shape::Polygon3DList::updateVBOWire(){
    if(this->haveVBO() && this->vertexBufferWire.getSize()){
        edk::GU_GLSL::guUseBuffer(GU_ARRAY_BUFFER,this->vboWire);
        if(edk::GU_GLSL::guBufferData(GU_ARRAY_BUFFER,
                                      this->vertexBufferWire.getSize() * sizeof(edk::float32),
                                      this->vertexBufferWire.getPointer(),
                                      GU_STATIC_DRAW)
                ){
            edk::GU_GLSL::guDontUseBuffer(GU_ARRAY_BUFFER);
            return true;
        }
        edk::GU_GLSL::guDontUseBuffer(GU_ARRAY_BUFFER);
    }
    return false;
}
bool edk::shape::Polygon3DList::changeVBO(edk::GU::VBOType type){
    if(this->canUseVBO && type != this->vboType && type!=edk::GU::vbo_NULL && type<edk::GU::vbo_Size){
        edk::vector::Array<edk::float32> buffer;
        if(buffer.createArray(this->vboCount * vboSizeofMesh3D[type])){
            edk::uint32 increment = vboSizeofMesh3D[type];
            edk::uint32 size = this->vboCount*increment;
            //clean the vertexBuffer
            switch(type){
            case edk::GU::vbo_XY:
                for(edk::uint32 i=0u;i<size;i+=increment){
                    buffer.set(i,0.f);
                    buffer.set(i+1u,0.f);
                }
                break;
            case edk::GU::vbo_XY_NxNyNz:
                for(edk::uint32 i=0u;i<size;i+=increment){
                    buffer.set(i,0.f);
                    buffer.set(i+1u,0.f);

                    buffer.set(i+2u,0.f);
                    buffer.set(i+3u,0.f);
                    buffer.set(i+4u,1.f);
                }
                break;
            case edk::GU::vbo_XY_RGB:
                for(edk::uint32 i=0u;i<size;i+=increment){
                    buffer.set(i,0.f);
                    buffer.set(i+1u,0.f);

                    buffer.set(i+2u,1.f);
                    buffer.set(i+3u,1.f);
                    buffer.set(i+4u,1.f);
                }
                break;
            case edk::GU::vbo_XY_RGBA:
                for(edk::uint32 i=0u;i<size;i+=increment){
                    buffer.set(i,0.f);
                    buffer.set(i+1u,0.f);

                    buffer.set(i+2u,1.f);
                    buffer.set(i+3u,1.f);
                    buffer.set(i+4u,1.f);
                    buffer.set(i+5u,1.f);
                }
                break;
            case edk::GU::vbo_XY_RGB_NxNyNz:
                for(edk::uint32 i=0u;i<size;i+=increment){
                    buffer.set(i,0.f);
                    buffer.set(i+1u,0.f);

                    buffer.set(i+2u,1.f);
                    buffer.set(i+3u,1.f);
                    buffer.set(i+4u,1.f);

                    buffer.set(i+5u,0.f);
                    buffer.set(i+6u,0.f);
                    buffer.set(i+7u,1.f);
                }
                break;
            case edk::GU::vbo_XY_RGBA_NxNyNz:
                for(edk::uint32 i=0u;i<size;i+=increment){
                    buffer.set(i,0.f);
                    buffer.set(i+1u,0.f);

                    buffer.set(i+2u,1.f);
                    buffer.set(i+3u,1.f);
                    buffer.set(i+4u,1.f);
                    buffer.set(i+5u,1.f);

                    buffer.set(i+6u,0.f);
                    buffer.set(i+7u,0.f);
                    buffer.set(i+8u,1.f);
                }
                break;
            case edk::GU::vbo_XY_RGB_NxNyNz_UVxUVy:
                for(edk::uint32 i=0u;i<size;i+=increment){
                    buffer.set(i,0.f);
                    buffer.set(i+1u,0.f);

                    buffer.set(i+2u,1.f);
                    buffer.set(i+3u,1.f);
                    buffer.set(i+4u,1.f);

                    buffer.set(i+5u,0.f);
                    buffer.set(i+6u,0.f);
                    buffer.set(i+7u,1.f);

                    buffer.set(i+8u,0.f);
                    buffer.set(i+9u,0.f);
                }
                break;
            case edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy:
                for(edk::uint32 i=0u;i<size;i+=increment){
                    buffer.set(i,0.f);
                    buffer.set(i+1u,0.f);

                    buffer.set(i+2u,1.f);
                    buffer.set(i+3u,1.f);
                    buffer.set(i+4u,1.f);
                    buffer.set(i+5u,1.f);

                    buffer.set(i+6u,0.f);
                    buffer.set(i+7u,0.f);
                    buffer.set(i+8u,1.f);

                    buffer.set(i+9u,0.f);
                    buffer.set(i+10u,0.f);
                }
                break;
            case edk::GU::vbo_XYZ:
                for(edk::uint32 i=0u;i<size;i+=increment){
                    buffer.set(i,0.f);
                    buffer.set(i+1u,0.f);
                    buffer.set(i+2u,0.f);
                }
                break;
            case edk::GU::vbo_XYZ_NxNyNz:
                for(edk::uint32 i=0u;i<size;i+=increment){
                    buffer.set(i,0.f);
                    buffer.set(i+1u,0.f);
                    buffer.set(i+2u,0.f);

                    buffer.set(i+3u,0.f);
                    buffer.set(i+4u,0.f);
                    buffer.set(i+5u,1.f);
                }
                break;
            case edk::GU::vbo_XYZ_RGB:
                for(edk::uint32 i=0u;i<size;i+=increment){
                    buffer.set(i,0.f);
                    buffer.set(i+1u,0.f);
                    buffer.set(i+2u,0.f);

                    buffer.set(i+3u,1.f);
                    buffer.set(i+4u,1.f);
                    buffer.set(i+5u,1.f);
                }
                break;
            case edk::GU::vbo_XYZ_RGBA:
                for(edk::uint32 i=0u;i<size;i+=increment){
                    buffer.set(i,0.f);
                    buffer.set(i+1u,0.f);
                    buffer.set(i+2u,0.f);

                    buffer.set(i+3u,1.f);
                    buffer.set(i+4u,1.f);
                    buffer.set(i+5u,1.f);
                    buffer.set(i+6u,1.f);
                }
                break;
            case edk::GU::vbo_XYZ_RGB_NxNyNz:
                for(edk::uint32 i=0u;i<size;i+=increment){
                    buffer.set(i,0.f);
                    buffer.set(i+1u,0.f);
                    buffer.set(i+2u,0.f);

                    buffer.set(i+3u,1.f);
                    buffer.set(i+4u,1.f);
                    buffer.set(i+5u,1.f);

                    buffer.set(i+6u,0.f);
                    buffer.set(i+7u,0.f);
                    buffer.set(i+8u,1.f);
                }
                break;
            case edk::GU::vbo_XYZ_RGBA_NxNyNz:
                for(edk::uint32 i=0u;i<size;i+=increment){
                    buffer.set(i,0.f);
                    buffer.set(i+1u,0.f);
                    buffer.set(i+2u,0.f);

                    buffer.set(i+3u,1.f);
                    buffer.set(i+4u,1.f);
                    buffer.set(i+5u,1.f);
                    buffer.set(i+6u,1.f);

                    buffer.set(i+7u,0.f);
                    buffer.set(i+8u,0.f);
                    buffer.set(i+9u,1.f);
                }
                break;
            case edk::GU::vbo_XYZ_RGB_NxNyNz_UVxUVy:
                for(edk::uint32 i=0u;i<size;i+=increment){
                    buffer.set(i,0.f);
                    buffer.set(i+1u,0.f);
                    buffer.set(i+2u,0.f);

                    buffer.set(i+3u,1.f);
                    buffer.set(i+4u,1.f);
                    buffer.set(i+5u,1.f);

                    buffer.set(i+6u,0.f);
                    buffer.set(i+7u,0.f);
                    buffer.set(i+8u,1.f);

                    buffer.set(i+9u,0.f);
                    buffer.set(i+10u,0.f);
                }
                break;
            case edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy:
                for(edk::uint32 i=0u;i<size;i+=increment){
                    buffer.set(i,0.f);
                    buffer.set(i+1u,0.f);
                    buffer.set(i+2u,0.f);

                    buffer.set(i+3u,1.f);
                    buffer.set(i+4u,1.f);
                    buffer.set(i+5u,1.f);
                    buffer.set(i+6u,1.f);

                    buffer.set(i+7u,0.f);
                    buffer.set(i+8u,0.f);
                    buffer.set(i+9u,1.f);

                    buffer.set(i+10u,0.f);
                    buffer.set(i+11u,0.f);
                }
                break;
            default:
                break;
            }

            edk::uint32 source=0u,dest=0u;
            //
            switch(this->vboType){
            case edk::GU::vbo_XY:
            {
                for(edk::uint32 i=0u;i<this->vboCount;i++){
                    buffer.set(dest,this->vertexBuffer.get(source));
                    buffer.set(dest+1u,this->vertexBuffer.get(source+1u));

                    source+=vboSizeofMesh3D[this->vboType];
                    dest+=vboSizeofMesh3D[type];
                }
            }
                break;
            case edk::GU::vbo_XY_NxNyNz:
            {
                switch(type){
                case edk::GU::vbo_XY:
                {
                    //vbo_XY_NxNyNz -> edk::GU::vbo_XY
                    for(edk::uint32 i=0u;i<this->vboCount;i++){
                        buffer.set(dest,this->vertexBuffer.get(source));
                        buffer.set(dest+1u,this->vertexBuffer.get(source+1u));

                        source+=vboSizeofMesh3D[this->vboType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGB:
                {
                    //vbo_XY_NxNyNz -> edk::GU::vbo_XY_RGB
                    for(edk::uint32 i=0u;i<this->vboCount;i++){
                        buffer.set(dest,this->vertexBuffer.get(source));
                        buffer.set(dest+1u,this->vertexBuffer.get(source+1u));

                        source+=vboSizeofMesh3D[this->vboType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGBA:
                {
                    //vbo_XY_NxNyNz -> edk::GU::vbo_XY_RGBA
                    for(edk::uint32 i=0u;i<this->vboCount;i++){
                        buffer.set(dest,this->vertexBuffer.get(source));
                        buffer.set(dest+1u,this->vertexBuffer.get(source+1u));

                        source+=vboSizeofMesh3D[this->vboType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGB_NxNyNz:
                {
                    //vbo_XY_NxNyNz -> edk::GU::vbo_XY_RGB_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboCount;i++){
                        buffer.set(dest,this->vertexBuffer.get(source));
                        buffer.set(dest+1u,this->vertexBuffer.get(source+1u));

                        buffer.set(dest+5u,this->vertexBuffer.get(source+2u));
                        buffer.set(dest+6u,this->vertexBuffer.get(source+3u));
                        buffer.set(dest+7u,this->vertexBuffer.get(source+4u));

                        source+=vboSizeofMesh3D[this->vboType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGBA_NxNyNz:
                {
                    //vbo_XY_NxNyNz -> edk::GU::vbo_XY_RGBA_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboCount;i++){
                        buffer.set(dest,this->vertexBuffer.get(source));
                        buffer.set(dest+1u,this->vertexBuffer.get(source+1u));

                        buffer.set(dest+6u,this->vertexBuffer.get(source+2u));
                        buffer.set(dest+7u,this->vertexBuffer.get(source+3u));
                        buffer.set(dest+8u,this->vertexBuffer.get(source+4u));

                        source+=vboSizeofMesh3D[this->vboType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGB_NxNyNz_UVxUVy:
                {
                    //vbo_XY_NxNyNz -> edk::GU::vbo_XY_RGB_NxNyNz_UVxUVy
                    for(edk::uint32 i=0u;i<this->vboCount;i++){
                        buffer.set(dest,this->vertexBuffer.get(source));
                        buffer.set(dest+1u,this->vertexBuffer.get(source+1u));

                        buffer.set(dest+5u,this->vertexBuffer.get(source+2u));
                        buffer.set(dest+6u,this->vertexBuffer.get(source+3u));
                        buffer.set(dest+7u,this->vertexBuffer.get(source+4u));

                        source+=vboSizeofMesh3D[this->vboType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy:
                {
                    //vbo_XY_NxNyNz -> edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy
                    for(edk::uint32 i=0u;i<this->vboCount;i++){
                        buffer.set(dest,this->vertexBuffer.get(source));
                        buffer.set(dest+1u,this->vertexBuffer.get(source+1u));

                        buffer.set(dest+6u,this->vertexBuffer.get(source+2u));
                        buffer.set(dest+7u,this->vertexBuffer.get(source+3u));
                        buffer.set(dest+8u,this->vertexBuffer.get(source+4u));

                        source+=vboSizeofMesh3D[this->vboType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ:
                {
                    //vbo_XY_NxNyNz -> edk::GU::vbo_XYZ
                    for(edk::uint32 i=0u;i<this->vboCount;i++){
                        buffer.set(dest,this->vertexBuffer.get(source));
                        buffer.set(dest+1u,this->vertexBuffer.get(source+1u));

                        source+=vboSizeofMesh3D[this->vboType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_NxNyNz:
                {
                    //vbo_XY_NxNyNz -> edk::GU::vbo_XYZ_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboCount;i++){
                        buffer.set(dest,this->vertexBuffer.get(source));
                        buffer.set(dest+1u,this->vertexBuffer.get(source+1u));

                        buffer.set(dest+3u,this->vertexBuffer.get(source+2u));
                        buffer.set(dest+4u,this->vertexBuffer.get(source+3u));
                        buffer.set(dest+5u,this->vertexBuffer.get(source+4u));

                        source+=vboSizeofMesh3D[this->vboType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGB:
                {
                    //vbo_XY_NxNyNz -> edk::GU::vbo_XYZ_RGB
                    for(edk::uint32 i=0u;i<this->vboCount;i++){
                        buffer.set(dest,this->vertexBuffer.get(source));
                        buffer.set(dest+1u,this->vertexBuffer.get(source+1u));

                        source+=vboSizeofMesh3D[this->vboType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGBA:
                {
                    //vbo_XY_NxNyNz -> edk::GU::vbo_XYZ_RGBA
                    for(edk::uint32 i=0u;i<this->vboCount;i++){
                        buffer.set(dest,this->vertexBuffer.get(source));
                        buffer.set(dest+1u,this->vertexBuffer.get(source+1u));

                        source+=vboSizeofMesh3D[this->vboType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGB_NxNyNz:
                {
                    //vbo_XY_NxNyNz -> edk::GU::vbo_XYZ_RGB_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboCount;i++){
                        buffer.set(dest,this->vertexBuffer.get(source));
                        buffer.set(dest+1u,this->vertexBuffer.get(source+1u));

                        buffer.set(dest+6u,this->vertexBuffer.get(source+2u));
                        buffer.set(dest+7u,this->vertexBuffer.get(source+3u));
                        buffer.set(dest+8u,this->vertexBuffer.get(source+4u));

                        source+=vboSizeofMesh3D[this->vboType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGBA_NxNyNz:
                {
                    //vbo_XY_NxNyNz -> edk::GU::vbo_XYZ_RGBA_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboCount;i++){
                        buffer.set(dest,this->vertexBuffer.get(source));
                        buffer.set(dest+1u,this->vertexBuffer.get(source+1u));

                        buffer.set(dest+7u,this->vertexBuffer.get(source+2u));
                        buffer.set(dest+8u,this->vertexBuffer.get(source+3u));
                        buffer.set(dest+9u,this->vertexBuffer.get(source+4u));

                        source+=vboSizeofMesh3D[this->vboType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGB_NxNyNz_UVxUVy:
                {
                    //vbo_XY_NxNyNz -> edk::GU::vbo_XYZ_RGB_NxNyNz_UVxUVy
                    for(edk::uint32 i=0u;i<this->vboCount;i++){
                        buffer.set(dest,this->vertexBuffer.get(source));
                        buffer.set(dest+1u,this->vertexBuffer.get(source+1u));

                        buffer.set(dest+6u,this->vertexBuffer.get(source+2u));
                        buffer.set(dest+7u,this->vertexBuffer.get(source+3u));
                        buffer.set(dest+8u,this->vertexBuffer.get(source+4u));

                        source+=vboSizeofMesh3D[this->vboType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy:
                {
                    //vbo_XY_NxNyNz -> edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy
                    for(edk::uint32 i=0u;i<this->vboCount;i++){
                        buffer.set(dest,this->vertexBuffer.get(source));
                        buffer.set(dest+1u,this->vertexBuffer.get(source+1u));

                        buffer.set(dest+7u,this->vertexBuffer.get(source+2u));
                        buffer.set(dest+8u,this->vertexBuffer.get(source+3u));
                        buffer.set(dest+9u,this->vertexBuffer.get(source+4u));

                        source+=vboSizeofMesh3D[this->vboType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                default:
                    break;
                }
            }
                break;
            case edk::GU::vbo_XY_RGB:
            {
                switch(type){
                case edk::GU::vbo_XY:
                {
                    //edk::GU::vbo_XY_RGB -> edk::GU::vbo_XY
                    for(edk::uint32 i=0u;i<this->vboCount;i++){
                        buffer.set(dest,this->vertexBuffer.get(source));
                        buffer.set(dest+1u,this->vertexBuffer.get(source+1u));

                        source+=vboSizeofMesh3D[this->vboType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_NxNyNz:
                {
                    //edk::GU::vbo_XY_RGB -> edk::GU::vbo_XY_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboCount;i++){
                        buffer.set(dest,this->vertexBuffer.get(source));
                        buffer.set(dest+1u,this->vertexBuffer.get(source+1u));

                        source+=vboSizeofMesh3D[this->vboType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGBA:
                {
                    //edk::GU::vbo_XY_RGB -> edk::GU::vbo_XY_RGBA
                    for(edk::uint32 i=0u;i<this->vboCount;i++){
                        buffer.set(dest,this->vertexBuffer.get(source));
                        buffer.set(dest+1u,this->vertexBuffer.get(source+1u));

                        buffer.set(dest+3u,this->vertexBuffer.get(source+2u));
                        buffer.set(dest+4u,this->vertexBuffer.get(source+3u));
                        buffer.set(dest+5u,this->vertexBuffer.get(source+4u));

                        source+=vboSizeofMesh3D[this->vboType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGB_NxNyNz:
                {
                    //edk::GU::vbo_XY_RGB -> edk::GU::vbo_XY_RGB_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboCount;i++){
                        buffer.set(dest,this->vertexBuffer.get(source));
                        buffer.set(dest+1u,this->vertexBuffer.get(source+1u));

                        buffer.set(dest+2u,this->vertexBuffer.get(source+2u));
                        buffer.set(dest+3u,this->vertexBuffer.get(source+3u));
                        buffer.set(dest+4u,this->vertexBuffer.get(source+4u));

                        source+=vboSizeofMesh3D[this->vboType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGBA_NxNyNz:
                {
                    //edk::GU::vbo_XY_RGB -> edk::GU::vbo_XY_RGBA_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboCount;i++){
                        buffer.set(dest,this->vertexBuffer.get(source));
                        buffer.set(dest+1u,this->vertexBuffer.get(source+1u));

                        buffer.set(dest+2u,this->vertexBuffer.get(source+2u));
                        buffer.set(dest+3u,this->vertexBuffer.get(source+3u));
                        buffer.set(dest+4u,this->vertexBuffer.get(source+4u));

                        source+=vboSizeofMesh3D[this->vboType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGB_NxNyNz_UVxUVy:
                {
                    //edk::GU::vbo_XY_RGB -> edk::GU::vbo_XY_RGB_NxNyNz_UVxUVy
                    for(edk::uint32 i=0u;i<this->vboCount;i++){
                        buffer.set(dest,this->vertexBuffer.get(source));
                        buffer.set(dest+1u,this->vertexBuffer.get(source+1u));

                        buffer.set(dest+2u,this->vertexBuffer.get(source+2u));
                        buffer.set(dest+3u,this->vertexBuffer.get(source+3u));
                        buffer.set(dest+4u,this->vertexBuffer.get(source+4u));

                        source+=vboSizeofMesh3D[this->vboType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy:
                {
                    //edk::GU::vbo_XY_RGB -> edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy
                    for(edk::uint32 i=0u;i<this->vboCount;i++){
                        buffer.set(dest,this->vertexBuffer.get(source));
                        buffer.set(dest+1u,this->vertexBuffer.get(source+1u));

                        buffer.set(dest+2u,this->vertexBuffer.get(source+2u));
                        buffer.set(dest+3u,this->vertexBuffer.get(source+3u));
                        buffer.set(dest+4u,this->vertexBuffer.get(source+4u));

                        source+=vboSizeofMesh3D[this->vboType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ:
                {
                    //edk::GU::vbo_XY_RGB -> edk::GU::vbo_XYZ
                    for(edk::uint32 i=0u;i<this->vboCount;i++){
                        buffer.set(dest,this->vertexBuffer.get(source));
                        buffer.set(dest+1u,this->vertexBuffer.get(source+1u));

                        source+=vboSizeofMesh3D[this->vboType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_NxNyNz:
                {
                    //edk::GU::vbo_XY_RGB -> edk::GU::vbo_XYZ_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboCount;i++){
                        buffer.set(dest,this->vertexBuffer.get(source));
                        buffer.set(dest+1u,this->vertexBuffer.get(source+1u));

                        source+=vboSizeofMesh3D[this->vboType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGB:
                {
                    //edk::GU::vbo_XY_RGB -> edk::GU::vbo_XYZ_RGB
                    for(edk::uint32 i=0u;i<this->vboCount;i++){
                        buffer.set(dest,this->vertexBuffer.get(source));
                        buffer.set(dest+1u,this->vertexBuffer.get(source+1u));

                        buffer.set(dest+3u,this->vertexBuffer.get(source+2u));
                        buffer.set(dest+4u,this->vertexBuffer.get(source+3u));
                        buffer.set(dest+5u,this->vertexBuffer.get(source+4u));

                        source+=vboSizeofMesh3D[this->vboType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGBA:
                {
                    //edk::GU::vbo_XY_RGB -> edk::GU::vbo_XYZ_RGBA
                    for(edk::uint32 i=0u;i<this->vboCount;i++){
                        buffer.set(dest,this->vertexBuffer.get(source));
                        buffer.set(dest+1u,this->vertexBuffer.get(source+1u));

                        buffer.set(dest+3u,this->vertexBuffer.get(source+2u));
                        buffer.set(dest+4u,this->vertexBuffer.get(source+3u));
                        buffer.set(dest+5u,this->vertexBuffer.get(source+4u));

                        source+=vboSizeofMesh3D[this->vboType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGB_NxNyNz:
                {
                    //edk::GU::vbo_XY_RGB -> edk::GU::vbo_XYZ_RGB_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboCount;i++){
                        buffer.set(dest,this->vertexBuffer.get(source));
                        buffer.set(dest+1u,this->vertexBuffer.get(source+1u));

                        buffer.set(dest+3u,this->vertexBuffer.get(source+2u));
                        buffer.set(dest+4u,this->vertexBuffer.get(source+3u));
                        buffer.set(dest+5u,this->vertexBuffer.get(source+4u));

                        source+=vboSizeofMesh3D[this->vboType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGBA_NxNyNz:
                {
                    //edk::GU::vbo_XY_RGB -> edk::GU::vbo_XYZ_RGBA_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboCount;i++){
                        buffer.set(dest,this->vertexBuffer.get(source));
                        buffer.set(dest+1u,this->vertexBuffer.get(source+1u));

                        buffer.set(dest+3u,this->vertexBuffer.get(source+2u));
                        buffer.set(dest+4u,this->vertexBuffer.get(source+3u));
                        buffer.set(dest+5u,this->vertexBuffer.get(source+4u));

                        source+=vboSizeofMesh3D[this->vboType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGB_NxNyNz_UVxUVy:
                {
                    //edk::GU::vbo_XY_RGB -> edk::GU::vbo_XYZ_RGB_NxNyNz_UVxUVy
                    for(edk::uint32 i=0u;i<this->vboCount;i++){
                        buffer.set(dest,this->vertexBuffer.get(source));
                        buffer.set(dest+1u,this->vertexBuffer.get(source+1u));

                        buffer.set(dest+3u,this->vertexBuffer.get(source+2u));
                        buffer.set(dest+4u,this->vertexBuffer.get(source+3u));
                        buffer.set(dest+5u,this->vertexBuffer.get(source+4u));

                        source+=vboSizeofMesh3D[this->vboType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy:
                {
                    //edk::GU::vbo_XY_RGB -> edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy
                    for(edk::uint32 i=0u;i<this->vboCount;i++){
                        buffer.set(dest,this->vertexBuffer.get(source));
                        buffer.set(dest+1u,this->vertexBuffer.get(source+1u));

                        buffer.set(dest+3u,this->vertexBuffer.get(source+2u));
                        buffer.set(dest+4u,this->vertexBuffer.get(source+3u));
                        buffer.set(dest+5u,this->vertexBuffer.get(source+4u));

                        source+=vboSizeofMesh3D[this->vboType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                default:
                    break;
                }
            }
                break;
            case edk::GU::vbo_XY_RGBA:
            {
                switch(type){
                case edk::GU::vbo_XY:
                {
                    //edk::GU::vbo_XY_RGBA -> edk::GU::vbo_XY
                    for(edk::uint32 i=0u;i<this->vboCount;i++){
                        buffer.set(dest,this->vertexBuffer.get(source));
                        buffer.set(dest+1u,this->vertexBuffer.get(source+1u));

                        source+=vboSizeofMesh3D[this->vboType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_NxNyNz:
                {
                    //edk::GU::vbo_XY_RGBA -> edk::GU::vbo_XY_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboCount;i++){
                        buffer.set(dest,this->vertexBuffer.get(source));
                        buffer.set(dest+1u,this->vertexBuffer.get(source+1u));

                        source+=vboSizeofMesh3D[this->vboType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGB:
                {
                    //edk::GU::vbo_XY_RGBA -> edk::GU::vbo_XY_RGB
                    for(edk::uint32 i=0u;i<this->vboCount;i++){
                        buffer.set(dest,this->vertexBuffer.get(source));
                        buffer.set(dest+1u,this->vertexBuffer.get(source+1u));

                        source+=vboSizeofMesh3D[this->vboType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGB_NxNyNz:
                {
                    //edk::GU::vbo_XY_RGBA -> edk::GU::vbo_XY_RGB_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboCount;i++){
                        buffer.set(dest,this->vertexBuffer.get(source));
                        buffer.set(dest+1u,this->vertexBuffer.get(source+1u));

                        source+=vboSizeofMesh3D[this->vboType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGBA_NxNyNz:
                {
                    //edk::GU::vbo_XY_RGBA -> edk::GU::vbo_XY_RGBA_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboCount;i++){
                        buffer.set(dest,this->vertexBuffer.get(source));
                        buffer.set(dest+1u,this->vertexBuffer.get(source+1u));

                        buffer.set(dest+2u,this->vertexBuffer.get(source+2u));
                        buffer.set(dest+3u,this->vertexBuffer.get(source+3u));
                        buffer.set(dest+4u,this->vertexBuffer.get(source+4u));
                        buffer.set(dest+5u,this->vertexBuffer.get(source+5u));

                        source+=vboSizeofMesh3D[this->vboType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGB_NxNyNz_UVxUVy:
                {
                    //edk::GU::vbo_XY_RGBA -> edk::GU::vbo_XY_RGB_NxNyNz_UVxUVy
                    for(edk::uint32 i=0u;i<this->vboCount;i++){
                        buffer.set(dest,this->vertexBuffer.get(source));
                        buffer.set(dest+1u,this->vertexBuffer.get(source+1u));

                        buffer.set(dest+2u,this->vertexBuffer.get(source+2u));
                        buffer.set(dest+3u,this->vertexBuffer.get(source+3u));
                        buffer.set(dest+4u,this->vertexBuffer.get(source+4u));

                        source+=vboSizeofMesh3D[this->vboType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy:
                {
                    //edk::GU::vbo_XY_RGBA -> edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy
                    for(edk::uint32 i=0u;i<this->vboCount;i++){
                        buffer.set(dest,this->vertexBuffer.get(source));
                        buffer.set(dest+1u,this->vertexBuffer.get(source+1u));

                        buffer.set(dest+2u,this->vertexBuffer.get(source+2u));
                        buffer.set(dest+3u,this->vertexBuffer.get(source+3u));
                        buffer.set(dest+4u,this->vertexBuffer.get(source+4u));
                        buffer.set(dest+5u,this->vertexBuffer.get(source+5u));

                        source+=vboSizeofMesh3D[this->vboType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ:
                {
                    //edk::GU::vbo_XY_RGBA -> edk::GU::vbo_XYZ
                    for(edk::uint32 i=0u;i<this->vboCount;i++){
                        buffer.set(dest,this->vertexBuffer.get(source));
                        buffer.set(dest+1u,this->vertexBuffer.get(source+1u));

                        source+=vboSizeofMesh3D[this->vboType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_NxNyNz:
                {
                    //edk::GU::vbo_XY_RGBA -> edk::GU::vbo_XYZ_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboCount;i++){
                        buffer.set(dest,this->vertexBuffer.get(source));
                        buffer.set(dest+1u,this->vertexBuffer.get(source+1u));

                        source+=vboSizeofMesh3D[this->vboType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGB:
                {
                    //edk::GU::vbo_XY_RGBA -> edk::GU::vbo_XYZ_RGB
                    for(edk::uint32 i=0u;i<this->vboCount;i++){
                        buffer.set(dest,this->vertexBuffer.get(source));
                        buffer.set(dest+1u,this->vertexBuffer.get(source+1u));

                        source+=vboSizeofMesh3D[this->vboType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGBA:
                {
                    //edk::GU::vbo_XY_RGBA -> edk::GU::vbo_XYZ_RGBA
                    for(edk::uint32 i=0u;i<this->vboCount;i++){
                        buffer.set(dest,this->vertexBuffer.get(source));
                        buffer.set(dest+1u,this->vertexBuffer.get(source+1u));

                        buffer.set(dest+3u,this->vertexBuffer.get(source+2u));
                        buffer.set(dest+4u,this->vertexBuffer.get(source+3u));
                        buffer.set(dest+5u,this->vertexBuffer.get(source+4u));
                        buffer.set(dest+6u,this->vertexBuffer.get(source+5u));

                        source+=vboSizeofMesh3D[this->vboType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGB_NxNyNz:
                {
                    //edk::GU::vbo_XY_RGBA -> edk::GU::vbo_XYZ_RGB_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboCount;i++){
                        buffer.set(dest,this->vertexBuffer.get(source));
                        buffer.set(dest+1u,this->vertexBuffer.get(source+1u));

                        buffer.set(dest+3u,this->vertexBuffer.get(source+2u));
                        buffer.set(dest+4u,this->vertexBuffer.get(source+3u));
                        buffer.set(dest+5u,this->vertexBuffer.get(source+4u));

                        source+=vboSizeofMesh3D[this->vboType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGBA_NxNyNz:
                {
                    //edk::GU::vbo_XY_RGBA -> edk::GU::vbo_XYZ_RGBA_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboCount;i++){
                        buffer.set(dest,this->vertexBuffer.get(source));
                        buffer.set(dest+1u,this->vertexBuffer.get(source+1u));

                        buffer.set(dest+3u,this->vertexBuffer.get(source+2u));
                        buffer.set(dest+4u,this->vertexBuffer.get(source+3u));
                        buffer.set(dest+5u,this->vertexBuffer.get(source+4u));
                        buffer.set(dest+6u,this->vertexBuffer.get(source+5u));

                        source+=vboSizeofMesh3D[this->vboType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGB_NxNyNz_UVxUVy:
                {
                    //edk::GU::vbo_XY_RGBA -> edk::GU::vbo_XYZ_RGB_NxNyNz_UVxUVy
                    for(edk::uint32 i=0u;i<this->vboCount;i++){
                        buffer.set(dest,this->vertexBuffer.get(source));
                        buffer.set(dest+1u,this->vertexBuffer.get(source+1u));

                        buffer.set(dest+3u,this->vertexBuffer.get(source+2u));
                        buffer.set(dest+4u,this->vertexBuffer.get(source+3u));
                        buffer.set(dest+5u,this->vertexBuffer.get(source+4u));

                        source+=vboSizeofMesh3D[this->vboType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy:
                {
                    //edk::GU::vbo_XY_RGBA -> edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy
                    for(edk::uint32 i=0u;i<this->vboCount;i++){
                        buffer.set(dest,this->vertexBuffer.get(source));
                        buffer.set(dest+1u,this->vertexBuffer.get(source+1u));

                        buffer.set(dest+3u,this->vertexBuffer.get(source+2u));
                        buffer.set(dest+4u,this->vertexBuffer.get(source+3u));
                        buffer.set(dest+5u,this->vertexBuffer.get(source+4u));
                        buffer.set(dest+6u,this->vertexBuffer.get(source+5u));

                        source+=vboSizeofMesh3D[this->vboType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                default:
                    break;
                }
            }
                break;
            case edk::GU::vbo_XY_RGB_NxNyNz:
            {
                switch(type){
                case edk::GU::vbo_XY:
                {
                    //edk::GU::vbo_XY_RGB_NxNyNz -> edk::GU::vbo_XY
                    for(edk::uint32 i=0u;i<this->vboCount;i++){
                        buffer.set(dest,this->vertexBuffer.get(source));
                        buffer.set(dest+1u,this->vertexBuffer.get(source+1u));

                        source+=vboSizeofMesh3D[this->vboType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_NxNyNz:
                {
                    //edk::GU::vbo_XY_RGB_NxNyNz -> edk::GU::vbo_XY_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboCount;i++){
                        buffer.set(dest,this->vertexBuffer.get(source));
                        buffer.set(dest+1u,this->vertexBuffer.get(source+1u));

                        buffer.set(dest+2u,this->vertexBuffer.get(source+5u));
                        buffer.set(dest+3u,this->vertexBuffer.get(source+6u));
                        buffer.set(dest+4u,this->vertexBuffer.get(source+7u));

                        source+=vboSizeofMesh3D[this->vboType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGB:
                {
                    //edk::GU::vbo_XY_RGB_NxNyNz -> edk::GU::vbo_XY_RGB
                    for(edk::uint32 i=0u;i<this->vboCount;i++){
                        buffer.set(dest,this->vertexBuffer.get(source));
                        buffer.set(dest+1u,this->vertexBuffer.get(source+1u));

                        buffer.set(dest+2u,this->vertexBuffer.get(source+2u));
                        buffer.set(dest+3u,this->vertexBuffer.get(source+3u));
                        buffer.set(dest+4u,this->vertexBuffer.get(source+4u));

                        source+=vboSizeofMesh3D[this->vboType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGBA:
                {
                    //edk::GU::vbo_XY_RGB_NxNyNz -> edk::GU::vbo_XY_RGBA
                    for(edk::uint32 i=0u;i<this->vboCount;i++){
                        buffer.set(dest,this->vertexBuffer.get(source));
                        buffer.set(dest+1u,this->vertexBuffer.get(source+1u));

                        buffer.set(dest+2u,this->vertexBuffer.get(source+2u));
                        buffer.set(dest+3u,this->vertexBuffer.get(source+3u));
                        buffer.set(dest+4u,this->vertexBuffer.get(source+4u));

                        source+=vboSizeofMesh3D[this->vboType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGBA_NxNyNz:
                {
                    //edk::GU::vbo_XY_RGB_NxNyNz -> edk::GU::vbo_XY_RGBA_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboCount;i++){
                        buffer.set(dest,this->vertexBuffer.get(source));
                        buffer.set(dest+1u,this->vertexBuffer.get(source+1u));

                        buffer.set(dest+2u,this->vertexBuffer.get(source+2u));
                        buffer.set(dest+3u,this->vertexBuffer.get(source+3u));
                        buffer.set(dest+4u,this->vertexBuffer.get(source+4u));

                        buffer.set(dest+6u,this->vertexBuffer.get(source+5u));
                        buffer.set(dest+7u,this->vertexBuffer.get(source+6u));
                        buffer.set(dest+8u,this->vertexBuffer.get(source+7u));

                        source+=vboSizeofMesh3D[this->vboType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGB_NxNyNz_UVxUVy:
                {
                    //edk::GU::vbo_XY_RGB_NxNyNz -> edk::GU::vbo_XY_RGB_NxNyNz_UVxUVy
                    for(edk::uint32 i=0u;i<this->vboCount;i++){
                        buffer.set(dest,this->vertexBuffer.get(source));
                        buffer.set(dest+1u,this->vertexBuffer.get(source+1u));

                        buffer.set(dest+2u,this->vertexBuffer.get(source+2u));
                        buffer.set(dest+3u,this->vertexBuffer.get(source+3u));
                        buffer.set(dest+4u,this->vertexBuffer.get(source+4u));

                        buffer.set(dest+5u,this->vertexBuffer.get(source+5u));
                        buffer.set(dest+6u,this->vertexBuffer.get(source+6u));
                        buffer.set(dest+7u,this->vertexBuffer.get(source+7u));

                        source+=vboSizeofMesh3D[this->vboType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy:
                {
                    //edk::GU::vbo_XY_RGB_NxNyNz -> edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy
                    for(edk::uint32 i=0u;i<this->vboCount;i++){
                        buffer.set(dest,this->vertexBuffer.get(source));
                        buffer.set(dest+1u,this->vertexBuffer.get(source+1u));

                        buffer.set(dest+2u,this->vertexBuffer.get(source+2u));
                        buffer.set(dest+3u,this->vertexBuffer.get(source+3u));
                        buffer.set(dest+4u,this->vertexBuffer.get(source+4u));

                        buffer.set(dest+6u,this->vertexBuffer.get(source+5u));
                        buffer.set(dest+7u,this->vertexBuffer.get(source+6u));
                        buffer.set(dest+8u,this->vertexBuffer.get(source+7u));

                        source+=vboSizeofMesh3D[this->vboType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ:
                {
                    //edk::GU::vbo_XY_RGB_NxNyNz -> edk::GU::vbo_XYZ
                    for(edk::uint32 i=0u;i<this->vboCount;i++){
                        buffer.set(dest,this->vertexBuffer.get(source));
                        buffer.set(dest+1u,this->vertexBuffer.get(source+1u));

                        source+=vboSizeofMesh3D[this->vboType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_NxNyNz:
                {
                    //edk::GU::vbo_XY_RGB_NxNyNz -> edk::GU::vbo_XYZ_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboCount;i++){
                        buffer.set(dest,this->vertexBuffer.get(source));
                        buffer.set(dest+1u,this->vertexBuffer.get(source+1u));

                        buffer.set(dest+3u,this->vertexBuffer.get(source+5u));
                        buffer.set(dest+4u,this->vertexBuffer.get(source+6u));
                        buffer.set(dest+5u,this->vertexBuffer.get(source+7u));

                        source+=vboSizeofMesh3D[this->vboType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGB:
                {
                    //edk::GU::vbo_XY_RGB_NxNyNz -> edk::GU::vbo_XYZ_RGB
                    for(edk::uint32 i=0u;i<this->vboCount;i++){
                        buffer.set(dest,this->vertexBuffer.get(source));
                        buffer.set(dest+1u,this->vertexBuffer.get(source+1u));

                        buffer.set(dest+3u,this->vertexBuffer.get(source+2u));
                        buffer.set(dest+4u,this->vertexBuffer.get(source+3u));
                        buffer.set(dest+5u,this->vertexBuffer.get(source+4u));

                        source+=vboSizeofMesh3D[this->vboType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGBA:
                {
                    //edk::GU::vbo_XY_RGB_NxNyNz -> edk::GU::vbo_XYZ_RGBA
                    for(edk::uint32 i=0u;i<this->vboCount;i++){
                        buffer.set(dest,this->vertexBuffer.get(source));
                        buffer.set(dest+1u,this->vertexBuffer.get(source+1u));

                        buffer.set(dest+3u,this->vertexBuffer.get(source+2u));
                        buffer.set(dest+4u,this->vertexBuffer.get(source+3u));
                        buffer.set(dest+5u,this->vertexBuffer.get(source+4u));

                        source+=vboSizeofMesh3D[this->vboType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGB_NxNyNz:
                {
                    //edk::GU::vbo_XY_RGB_NxNyNz -> edk::GU::vbo_XYZ_RGB_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboCount;i++){
                        buffer.set(dest,this->vertexBuffer.get(source));
                        buffer.set(dest+1u,this->vertexBuffer.get(source+1u));

                        buffer.set(dest+3u,this->vertexBuffer.get(source+2u));
                        buffer.set(dest+4u,this->vertexBuffer.get(source+3u));
                        buffer.set(dest+5u,this->vertexBuffer.get(source+4u));

                        buffer.set(dest+6u,this->vertexBuffer.get(source+5u));
                        buffer.set(dest+7u,this->vertexBuffer.get(source+6u));
                        buffer.set(dest+8u,this->vertexBuffer.get(source+7u));

                        source+=vboSizeofMesh3D[this->vboType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGBA_NxNyNz:
                {
                    //edk::GU::vbo_XY_RGB_NxNyNz -> edk::GU::vbo_XYZ_RGBA_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboCount;i++){
                        buffer.set(dest,this->vertexBuffer.get(source));
                        buffer.set(dest+1u,this->vertexBuffer.get(source+1u));

                        buffer.set(dest+3u,this->vertexBuffer.get(source+2u));
                        buffer.set(dest+4u,this->vertexBuffer.get(source+3u));
                        buffer.set(dest+5u,this->vertexBuffer.get(source+4u));

                        buffer.set(dest+7u,this->vertexBuffer.get(source+5u));
                        buffer.set(dest+8u,this->vertexBuffer.get(source+6u));
                        buffer.set(dest+9u,this->vertexBuffer.get(source+7u));

                        source+=vboSizeofMesh3D[this->vboType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGB_NxNyNz_UVxUVy:
                {
                    //edk::GU::vbo_XY_RGB_NxNyNz -> edk::GU::vbo_XYZ_RGB_NxNyNz_UVxUVy
                    for(edk::uint32 i=0u;i<this->vboCount;i++){
                        buffer.set(dest,this->vertexBuffer.get(source));
                        buffer.set(dest+1u,this->vertexBuffer.get(source+1u));

                        buffer.set(dest+3u,this->vertexBuffer.get(source+2u));
                        buffer.set(dest+4u,this->vertexBuffer.get(source+3u));
                        buffer.set(dest+5u,this->vertexBuffer.get(source+4u));

                        buffer.set(dest+6u,this->vertexBuffer.get(source+5u));
                        buffer.set(dest+7u,this->vertexBuffer.get(source+6u));
                        buffer.set(dest+8u,this->vertexBuffer.get(source+7u));

                        source+=vboSizeofMesh3D[this->vboType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy:
                {
                    //edk::GU::vbo_XY_RGB_NxNyNz -> edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy
                    for(edk::uint32 i=0u;i<this->vboCount;i++){
                        buffer.set(dest,this->vertexBuffer.get(source));
                        buffer.set(dest+1u,this->vertexBuffer.get(source+1u));

                        buffer.set(dest+3u,this->vertexBuffer.get(source+2u));
                        buffer.set(dest+4u,this->vertexBuffer.get(source+3u));
                        buffer.set(dest+5u,this->vertexBuffer.get(source+4u));

                        buffer.set(dest+7u,this->vertexBuffer.get(source+5u));
                        buffer.set(dest+8u,this->vertexBuffer.get(source+6u));
                        buffer.set(dest+9u,this->vertexBuffer.get(source+7u));

                        source+=vboSizeofMesh3D[this->vboType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                default:
                    break;
                }
            }
                break;
            case edk::GU::vbo_XY_RGBA_NxNyNz:
            {
                switch(type){
                case edk::GU::vbo_XY:
                {
                    //edk::GU::vbo_XY_RGBA_NxNyNz -> edk::GU::vbo_XY
                    for(edk::uint32 i=0u;i<this->vboCount;i++){
                        buffer.set(dest,this->vertexBuffer.get(source));
                        buffer.set(dest+1u,this->vertexBuffer.get(source+1u));

                        source+=vboSizeofMesh3D[this->vboType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_NxNyNz:
                {
                    //edk::GU::vbo_XY_RGBA_NxNyNz -> edk::GU::vbo_XY_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboCount;i++){
                        buffer.set(dest,this->vertexBuffer.get(source));
                        buffer.set(dest+1u,this->vertexBuffer.get(source+1u));

                        buffer.set(dest+2u,this->vertexBuffer.get(source+6u));
                        buffer.set(dest+3u,this->vertexBuffer.get(source+7u));
                        buffer.set(dest+4u,this->vertexBuffer.get(source+8u));

                        source+=vboSizeofMesh3D[this->vboType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGB:
                {
                    //edk::GU::vbo_XY_RGBA_NxNyNz -> edk::GU::vbo_XY_RGB
                    for(edk::uint32 i=0u;i<this->vboCount;i++){
                        buffer.set(dest,this->vertexBuffer.get(source));
                        buffer.set(dest+1u,this->vertexBuffer.get(source+1u));

                        buffer.set(dest+2u,this->vertexBuffer.get(source+2u));
                        buffer.set(dest+3u,this->vertexBuffer.get(source+3u));
                        buffer.set(dest+4u,this->vertexBuffer.get(source+4u));

                        source+=vboSizeofMesh3D[this->vboType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGBA:
                {
                    //edk::GU::vbo_XY_RGBA_NxNyNz -> edk::GU::vbo_XY_RGBA
                    for(edk::uint32 i=0u;i<this->vboCount;i++){
                        buffer.set(dest,this->vertexBuffer.get(source));
                        buffer.set(dest+1u,this->vertexBuffer.get(source+1u));

                        buffer.set(dest+2u,this->vertexBuffer.get(source+2u));
                        buffer.set(dest+3u,this->vertexBuffer.get(source+3u));
                        buffer.set(dest+4u,this->vertexBuffer.get(source+4u));
                        buffer.set(dest+5u,this->vertexBuffer.get(source+5u));

                        source+=vboSizeofMesh3D[this->vboType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGB_NxNyNz:
                {
                    //edk::GU::vbo_XY_RGBA_NxNyNz -> edk::GU::vbo_XY_RGB_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboCount;i++){
                        buffer.set(dest,this->vertexBuffer.get(source));
                        buffer.set(dest+1u,this->vertexBuffer.get(source+1u));

                        buffer.set(dest+2u,this->vertexBuffer.get(source+2u));
                        buffer.set(dest+3u,this->vertexBuffer.get(source+3u));
                        buffer.set(dest+4u,this->vertexBuffer.get(source+4u));

                        buffer.set(dest+5u,this->vertexBuffer.get(source+6u));
                        buffer.set(dest+6u,this->vertexBuffer.get(source+7u));
                        buffer.set(dest+7u,this->vertexBuffer.get(source+8u));

                        source+=vboSizeofMesh3D[this->vboType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGB_NxNyNz_UVxUVy:
                {
                    //edk::GU::vbo_XY_RGBA_NxNyNz -> edk::GU::vbo_XY_RGB_NxNyNz_UVxUVy
                    for(edk::uint32 i=0u;i<this->vboCount;i++){
                        buffer.set(dest,this->vertexBuffer.get(source));
                        buffer.set(dest+1u,this->vertexBuffer.get(source+1u));

                        buffer.set(dest+2u,this->vertexBuffer.get(source+2u));
                        buffer.set(dest+3u,this->vertexBuffer.get(source+3u));
                        buffer.set(dest+4u,this->vertexBuffer.get(source+4u));

                        buffer.set(dest+5u,this->vertexBuffer.get(source+6u));
                        buffer.set(dest+6u,this->vertexBuffer.get(source+7u));
                        buffer.set(dest+7u,this->vertexBuffer.get(source+8u));

                        source+=vboSizeofMesh3D[this->vboType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy:
                {
                    //edk::GU::vbo_XY_RGBA_NxNyNz -> edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy
                    for(edk::uint32 i=0u;i<this->vboCount;i++){
                        buffer.set(dest,this->vertexBuffer.get(source));
                        buffer.set(dest+1u,this->vertexBuffer.get(source+1u));

                        buffer.set(dest+2u,this->vertexBuffer.get(source+2u));
                        buffer.set(dest+3u,this->vertexBuffer.get(source+3u));
                        buffer.set(dest+4u,this->vertexBuffer.get(source+4u));
                        buffer.set(dest+5u,this->vertexBuffer.get(source+5u));

                        buffer.set(dest+6u,this->vertexBuffer.get(source+6u));
                        buffer.set(dest+7u,this->vertexBuffer.get(source+7u));
                        buffer.set(dest+8u,this->vertexBuffer.get(source+8u));

                        source+=vboSizeofMesh3D[this->vboType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ:
                {
                    //edk::GU::vbo_XY_RGBA_NxNyNz -> edk::GU::vbo_XYZ
                    for(edk::uint32 i=0u;i<this->vboCount;i++){
                        buffer.set(dest,this->vertexBuffer.get(source));
                        buffer.set(dest+1u,this->vertexBuffer.get(source+1u));

                        source+=vboSizeofMesh3D[this->vboType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_NxNyNz:
                {
                    //edk::GU::vbo_XY_RGBA_NxNyNz -> edk::GU::vbo_XYZ_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboCount;i++){
                        buffer.set(dest,this->vertexBuffer.get(source));
                        buffer.set(dest+1u,this->vertexBuffer.get(source+1u));

                        buffer.set(dest+3u,this->vertexBuffer.get(source+6u));
                        buffer.set(dest+4u,this->vertexBuffer.get(source+7u));
                        buffer.set(dest+5u,this->vertexBuffer.get(source+8u));

                        source+=vboSizeofMesh3D[this->vboType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGB:
                {
                    //edk::GU::vbo_XY_RGBA_NxNyNz -> edk::GU::vbo_XYZ_RGB
                    for(edk::uint32 i=0u;i<this->vboCount;i++){
                        buffer.set(dest,this->vertexBuffer.get(source));
                        buffer.set(dest+1u,this->vertexBuffer.get(source+1u));

                        buffer.set(dest+3u,this->vertexBuffer.get(source+2u));
                        buffer.set(dest+4u,this->vertexBuffer.get(source+3u));
                        buffer.set(dest+5u,this->vertexBuffer.get(source+4u));

                        source+=vboSizeofMesh3D[this->vboType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGBA:
                {
                    //edk::GU::vbo_XY_RGBA_NxNyNz -> edk::GU::vbo_XYZ_RGBA
                    for(edk::uint32 i=0u;i<this->vboCount;i++){
                        buffer.set(dest,this->vertexBuffer.get(source));
                        buffer.set(dest+1u,this->vertexBuffer.get(source+1u));

                        buffer.set(dest+3u,this->vertexBuffer.get(source+2u));
                        buffer.set(dest+4u,this->vertexBuffer.get(source+3u));
                        buffer.set(dest+5u,this->vertexBuffer.get(source+4u));
                        buffer.set(dest+6u,this->vertexBuffer.get(source+5u));

                        source+=vboSizeofMesh3D[this->vboType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGB_NxNyNz:
                {
                    //edk::GU::vbo_XY_RGBA_NxNyNz -> edk::GU::vbo_XYZ_RGB_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboCount;i++){
                        buffer.set(dest,this->vertexBuffer.get(source));
                        buffer.set(dest+1u,this->vertexBuffer.get(source+1u));

                        buffer.set(dest+3u,this->vertexBuffer.get(source+2u));
                        buffer.set(dest+4u,this->vertexBuffer.get(source+3u));
                        buffer.set(dest+5u,this->vertexBuffer.get(source+4u));

                        buffer.set(dest+6u,this->vertexBuffer.get(source+6u));
                        buffer.set(dest+7u,this->vertexBuffer.get(source+7u));
                        buffer.set(dest+8u,this->vertexBuffer.get(source+8u));

                        source+=vboSizeofMesh3D[this->vboType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGBA_NxNyNz:
                {
                    //edk::GU::vbo_XY_RGBA_NxNyNz -> edk::GU::vbo_XYZ_RGBA_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboCount;i++){
                        buffer.set(dest,this->vertexBuffer.get(source));
                        buffer.set(dest+1u,this->vertexBuffer.get(source+1u));

                        buffer.set(dest+3u,this->vertexBuffer.get(source+2u));
                        buffer.set(dest+4u,this->vertexBuffer.get(source+3u));
                        buffer.set(dest+5u,this->vertexBuffer.get(source+4u));
                        buffer.set(dest+6u,this->vertexBuffer.get(source+5u));

                        buffer.set(dest+7u,this->vertexBuffer.get(source+6u));
                        buffer.set(dest+8u,this->vertexBuffer.get(source+7u));
                        buffer.set(dest+9u,this->vertexBuffer.get(source+8u));

                        source+=vboSizeofMesh3D[this->vboType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGB_NxNyNz_UVxUVy:
                {
                    //edk::GU::vbo_XY_RGBA_NxNyNz -> edk::GU::vbo_XYZ_RGB_NxNyNz_UVxUVy
                    for(edk::uint32 i=0u;i<this->vboCount;i++){
                        buffer.set(dest,this->vertexBuffer.get(source));
                        buffer.set(dest+1u,this->vertexBuffer.get(source+1u));

                        buffer.set(dest+3u,this->vertexBuffer.get(source+2u));
                        buffer.set(dest+4u,this->vertexBuffer.get(source+3u));
                        buffer.set(dest+5u,this->vertexBuffer.get(source+4u));

                        buffer.set(dest+6u,this->vertexBuffer.get(source+6u));
                        buffer.set(dest+7u,this->vertexBuffer.get(source+7u));
                        buffer.set(dest+8u,this->vertexBuffer.get(source+8u));

                        source+=vboSizeofMesh3D[this->vboType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy:
                {
                    //edk::GU::vbo_XY_RGBA_NxNyNz -> edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy
                    for(edk::uint32 i=0u;i<this->vboCount;i++){
                        buffer.set(dest,this->vertexBuffer.get(source));
                        buffer.set(dest+1u,this->vertexBuffer.get(source+1u));

                        buffer.set(dest+3u,this->vertexBuffer.get(source+2u));
                        buffer.set(dest+4u,this->vertexBuffer.get(source+3u));
                        buffer.set(dest+5u,this->vertexBuffer.get(source+4u));
                        buffer.set(dest+6u,this->vertexBuffer.get(source+5u));

                        buffer.set(dest+7u,this->vertexBuffer.get(source+6u));
                        buffer.set(dest+8u,this->vertexBuffer.get(source+7u));
                        buffer.set(dest+9u,this->vertexBuffer.get(source+8u));

                        source+=vboSizeofMesh3D[this->vboType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                default:
                    break;
                }
            }
                break;
            case edk::GU::vbo_XY_RGB_NxNyNz_UVxUVy:
            {
                switch(type){
                case edk::GU::vbo_XY:
                {
                    //edk::GU::vbo_XY_RGB_NxNyNz_UVxUVy -> edk::GU::vbo_XY
                    for(edk::uint32 i=0u;i<this->vboCount;i++){
                        buffer.set(dest,this->vertexBuffer.get(source));
                        buffer.set(dest+1u,this->vertexBuffer.get(source+1u));

                        source+=vboSizeofMesh3D[this->vboType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_NxNyNz:
                {
                    //edk::GU::vbo_XY_RGB_NxNyNz_UVxUVy -> edk::GU::vbo_XY_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboCount;i++){
                        buffer.set(dest,this->vertexBuffer.get(source));
                        buffer.set(dest+1u,this->vertexBuffer.get(source+1u));

                        buffer.set(dest+2u,this->vertexBuffer.get(source+5u));
                        buffer.set(dest+3u,this->vertexBuffer.get(source+6u));
                        buffer.set(dest+4u,this->vertexBuffer.get(source+7u));

                        source+=vboSizeofMesh3D[this->vboType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGB:
                {
                    //edk::GU::vbo_XY_RGB_NxNyNz_UVxUVy -> edk::GU::vbo_XY_RGB
                    for(edk::uint32 i=0u;i<this->vboCount;i++){
                        buffer.set(dest,this->vertexBuffer.get(source));
                        buffer.set(dest+1u,this->vertexBuffer.get(source+1u));

                        buffer.set(dest+2u,this->vertexBuffer.get(source+2u));
                        buffer.set(dest+3u,this->vertexBuffer.get(source+3u));
                        buffer.set(dest+4u,this->vertexBuffer.get(source+4u));

                        source+=vboSizeofMesh3D[this->vboType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGBA:
                {
                    //edk::GU::vbo_XY_RGB_NxNyNz_UVxUVy -> edk::GU::vbo_XY_RGBA
                    for(edk::uint32 i=0u;i<this->vboCount;i++){
                        buffer.set(dest,this->vertexBuffer.get(source));
                        buffer.set(dest+1u,this->vertexBuffer.get(source+1u));

                        buffer.set(dest+2u,this->vertexBuffer.get(source+2u));
                        buffer.set(dest+3u,this->vertexBuffer.get(source+3u));
                        buffer.set(dest+4u,this->vertexBuffer.get(source+4u));

                        source+=vboSizeofMesh3D[this->vboType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGB_NxNyNz:
                {
                    //edk::GU::vbo_XY_RGB_NxNyNz_UVxUVy -> edk::GU::vbo_XY_RGB_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboCount;i++){
                        buffer.set(dest,this->vertexBuffer.get(source));
                        buffer.set(dest+1u,this->vertexBuffer.get(source+1u));

                        buffer.set(dest+2u,this->vertexBuffer.get(source+2u));
                        buffer.set(dest+3u,this->vertexBuffer.get(source+3u));
                        buffer.set(dest+4u,this->vertexBuffer.get(source+4u));

                        buffer.set(dest+5u,this->vertexBuffer.get(source+5u));
                        buffer.set(dest+6u,this->vertexBuffer.get(source+6u));
                        buffer.set(dest+7u,this->vertexBuffer.get(source+7u));

                        source+=vboSizeofMesh3D[this->vboType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGBA_NxNyNz:
                {
                    //edk::GU::vbo_XY_RGB_NxNyNz_UVxUVy -> edk::GU::vbo_XY_RGBA_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboCount;i++){
                        buffer.set(dest,this->vertexBuffer.get(source));
                        buffer.set(dest+1u,this->vertexBuffer.get(source+1u));

                        buffer.set(dest+2u,this->vertexBuffer.get(source+2u));
                        buffer.set(dest+3u,this->vertexBuffer.get(source+3u));
                        buffer.set(dest+4u,this->vertexBuffer.get(source+4u));

                        buffer.set(dest+6u,this->vertexBuffer.get(source+5u));
                        buffer.set(dest+7u,this->vertexBuffer.get(source+6u));
                        buffer.set(dest+8u,this->vertexBuffer.get(source+7u));

                        source+=vboSizeofMesh3D[this->vboType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy:
                {
                    //edk::GU::vbo_XY_RGB_NxNyNz_UVxUVy -> edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy
                    for(edk::uint32 i=0u;i<this->vboCount;i++){
                        buffer.set(dest,this->vertexBuffer.get(source));
                        buffer.set(dest+1u,this->vertexBuffer.get(source+1u));

                        buffer.set(dest+2u,this->vertexBuffer.get(source+2u));
                        buffer.set(dest+3u,this->vertexBuffer.get(source+3u));
                        buffer.set(dest+4u,this->vertexBuffer.get(source+4u));

                        buffer.set(dest+6u,this->vertexBuffer.get(source+5u));
                        buffer.set(dest+7u,this->vertexBuffer.get(source+6u));
                        buffer.set(dest+8u,this->vertexBuffer.get(source+7u));

                        buffer.set(dest+9u,this->vertexBuffer.get(source+8u));
                        buffer.set(dest+10u,this->vertexBuffer.get(source+9u));

                        source+=vboSizeofMesh3D[this->vboType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ:
                {
                    //edk::GU::vbo_XY_RGB_NxNyNz_UVxUVy -> edk::GU::vbo_XYZ
                    for(edk::uint32 i=0u;i<this->vboCount;i++){
                        buffer.set(dest,this->vertexBuffer.get(source));
                        buffer.set(dest+1u,this->vertexBuffer.get(source+1u));

                        source+=vboSizeofMesh3D[this->vboType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_NxNyNz:
                {
                    //edk::GU::vbo_XY_RGB_NxNyNz_UVxUVy -> edk::GU::vbo_XYZ_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboCount;i++){
                        buffer.set(dest,this->vertexBuffer.get(source));
                        buffer.set(dest+1u,this->vertexBuffer.get(source+1u));

                        buffer.set(dest+3u,this->vertexBuffer.get(source+5u));
                        buffer.set(dest+4u,this->vertexBuffer.get(source+6u));
                        buffer.set(dest+5u,this->vertexBuffer.get(source+7u));

                        source+=vboSizeofMesh3D[this->vboType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGB:
                {
                    //edk::GU::vbo_XY_RGB_NxNyNz_UVxUVy -> edk::GU::vbo_XYZ_RGB
                    for(edk::uint32 i=0u;i<this->vboCount;i++){
                        buffer.set(dest,this->vertexBuffer.get(source));
                        buffer.set(dest+1u,this->vertexBuffer.get(source+1u));

                        buffer.set(dest+3u,this->vertexBuffer.get(source+2u));
                        buffer.set(dest+4u,this->vertexBuffer.get(source+3u));
                        buffer.set(dest+5u,this->vertexBuffer.get(source+4u));

                        source+=vboSizeofMesh3D[this->vboType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGBA:
                {
                    //edk::GU::vbo_XY_RGB_NxNyNz_UVxUVy -> edk::GU::vbo_XYZ_RGBA
                    for(edk::uint32 i=0u;i<this->vboCount;i++){
                        buffer.set(dest,this->vertexBuffer.get(source));
                        buffer.set(dest+1u,this->vertexBuffer.get(source+1u));

                        buffer.set(dest+3u,this->vertexBuffer.get(source+2u));
                        buffer.set(dest+4u,this->vertexBuffer.get(source+3u));
                        buffer.set(dest+5u,this->vertexBuffer.get(source+4u));

                        source+=vboSizeofMesh3D[this->vboType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGB_NxNyNz:
                {
                    //edk::GU::vbo_XY_RGB_NxNyNz_UVxUVy -> edk::GU::vbo_XYZ_RGB_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboCount;i++){
                        buffer.set(dest,this->vertexBuffer.get(source));
                        buffer.set(dest+1u,this->vertexBuffer.get(source+1u));

                        buffer.set(dest+3u,this->vertexBuffer.get(source+2u));
                        buffer.set(dest+4u,this->vertexBuffer.get(source+3u));
                        buffer.set(dest+5u,this->vertexBuffer.get(source+4u));

                        buffer.set(dest+6u,this->vertexBuffer.get(source+5u));
                        buffer.set(dest+7u,this->vertexBuffer.get(source+6u));
                        buffer.set(dest+8u,this->vertexBuffer.get(source+7u));

                        source+=vboSizeofMesh3D[this->vboType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGBA_NxNyNz:
                {
                    //edk::GU::vbo_XY_RGB_NxNyNz_UVxUVy -> edk::GU::vbo_XYZ_RGBA_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboCount;i++){
                        buffer.set(dest,this->vertexBuffer.get(source));
                        buffer.set(dest+1u,this->vertexBuffer.get(source+1u));

                        buffer.set(dest+3u,this->vertexBuffer.get(source+2u));
                        buffer.set(dest+4u,this->vertexBuffer.get(source+3u));
                        buffer.set(dest+5u,this->vertexBuffer.get(source+4u));

                        buffer.set(dest+7u,this->vertexBuffer.get(source+5u));
                        buffer.set(dest+8u,this->vertexBuffer.get(source+6u));
                        buffer.set(dest+9u,this->vertexBuffer.get(source+7u));

                        source+=vboSizeofMesh3D[this->vboType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGB_NxNyNz_UVxUVy:
                {
                    //edk::GU::vbo_XY_RGB_NxNyNz_UVxUVy -> edk::GU::vbo_XYZ_RGB_NxNyNz_UVxUVy
                    for(edk::uint32 i=0u;i<this->vboCount;i++){
                        buffer.set(dest,this->vertexBuffer.get(source));
                        buffer.set(dest+1u,this->vertexBuffer.get(source+1u));

                        buffer.set(dest+3u,this->vertexBuffer.get(source+2u));
                        buffer.set(dest+4u,this->vertexBuffer.get(source+3u));
                        buffer.set(dest+5u,this->vertexBuffer.get(source+4u));

                        buffer.set(dest+6u,this->vertexBuffer.get(source+5u));
                        buffer.set(dest+7u,this->vertexBuffer.get(source+6u));
                        buffer.set(dest+8u,this->vertexBuffer.get(source+7u));

                        buffer.set(dest+9u,this->vertexBuffer.get(source+8u));
                        buffer.set(dest+10u,this->vertexBuffer.get(source+9u));

                        source+=vboSizeofMesh3D[this->vboType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy:
                {
                    //edk::GU::vbo_XY_RGB_NxNyNz_UVxUVy -> edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy
                    for(edk::uint32 i=0u;i<this->vboCount;i++){
                        buffer.set(dest,this->vertexBuffer.get(source));
                        buffer.set(dest+1u,this->vertexBuffer.get(source+1u));

                        buffer.set(dest+3u,this->vertexBuffer.get(source+2u));
                        buffer.set(dest+4u,this->vertexBuffer.get(source+3u));
                        buffer.set(dest+5u,this->vertexBuffer.get(source+4u));

                        buffer.set(dest+7u,this->vertexBuffer.get(source+5u));
                        buffer.set(dest+8u,this->vertexBuffer.get(source+6u));
                        buffer.set(dest+9u,this->vertexBuffer.get(source+7u));

                        buffer.set(dest+10u,this->vertexBuffer.get(source+8u));
                        buffer.set(dest+11u,this->vertexBuffer.get(source+9u));

                        source+=vboSizeofMesh3D[this->vboType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                default:
                    break;
                }
            }
                break;
            case edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy:
            {
                switch(type){
                case edk::GU::vbo_XY:
                {
                    //edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy -> edk::GU::vbo_XY
                    for(edk::uint32 i=0u;i<this->vboCount;i++){
                        buffer.set(dest,this->vertexBuffer.get(source));
                        buffer.set(dest+1u,this->vertexBuffer.get(source+1u));

                        source+=vboSizeofMesh3D[this->vboType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_NxNyNz:
                {
                    //edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy -> edk::GU::vbo_XY_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboCount;i++){
                        buffer.set(dest,this->vertexBuffer.get(source));
                        buffer.set(dest+1u,this->vertexBuffer.get(source+1u));

                        buffer.set(dest+2u,this->vertexBuffer.get(source+6u));
                        buffer.set(dest+3u,this->vertexBuffer.get(source+7u));
                        buffer.set(dest+4u,this->vertexBuffer.get(source+8u));

                        source+=vboSizeofMesh3D[this->vboType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGB:
                {
                    //edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy -> edk::GU::vbo_XY_RGB
                    for(edk::uint32 i=0u;i<this->vboCount;i++){
                        buffer.set(dest,this->vertexBuffer.get(source));
                        buffer.set(dest+1u,this->vertexBuffer.get(source+1u));

                        buffer.set(dest+2u,this->vertexBuffer.get(source+2u));
                        buffer.set(dest+3u,this->vertexBuffer.get(source+3u));
                        buffer.set(dest+4u,this->vertexBuffer.get(source+4u));

                        source+=vboSizeofMesh3D[this->vboType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGBA:
                {
                    //edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy -> edk::GU::vbo_XY_RGBA
                    for(edk::uint32 i=0u;i<this->vboCount;i++){
                        buffer.set(dest,this->vertexBuffer.get(source));
                        buffer.set(dest+1u,this->vertexBuffer.get(source+1u));

                        buffer.set(dest+2u,this->vertexBuffer.get(source+2u));
                        buffer.set(dest+3u,this->vertexBuffer.get(source+3u));
                        buffer.set(dest+4u,this->vertexBuffer.get(source+4u));
                        buffer.set(dest+5u,this->vertexBuffer.get(source+5u));

                        source+=vboSizeofMesh3D[this->vboType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGB_NxNyNz:
                {
                    //edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy -> edk::GU::vbo_XY_RGB_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboCount;i++){
                        buffer.set(dest,this->vertexBuffer.get(source));
                        buffer.set(dest+1u,this->vertexBuffer.get(source+1u));

                        buffer.set(dest+2u,this->vertexBuffer.get(source+2u));
                        buffer.set(dest+3u,this->vertexBuffer.get(source+3u));
                        buffer.set(dest+4u,this->vertexBuffer.get(source+4u));

                        buffer.set(dest+5u,this->vertexBuffer.get(source+6u));
                        buffer.set(dest+6u,this->vertexBuffer.get(source+7u));
                        buffer.set(dest+7u,this->vertexBuffer.get(source+8u));

                        source+=vboSizeofMesh3D[this->vboType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGBA_NxNyNz:
                {
                    //edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy -> edk::GU::vbo_XY_RGBA_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboCount;i++){
                        buffer.set(dest,this->vertexBuffer.get(source));
                        buffer.set(dest+1u,this->vertexBuffer.get(source+1u));

                        buffer.set(dest+2u,this->vertexBuffer.get(source+2u));
                        buffer.set(dest+3u,this->vertexBuffer.get(source+3u));
                        buffer.set(dest+4u,this->vertexBuffer.get(source+4u));
                        buffer.set(dest+5u,this->vertexBuffer.get(source+5u));

                        buffer.set(dest+6u,this->vertexBuffer.get(source+6u));
                        buffer.set(dest+7u,this->vertexBuffer.get(source+7u));
                        buffer.set(dest+8u,this->vertexBuffer.get(source+8u));

                        source+=vboSizeofMesh3D[this->vboType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGB_NxNyNz_UVxUVy:
                {
                    //edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy -> edk::GU::vbo_XY_RGB_NxNyNz_UVxUVy
                    for(edk::uint32 i=0u;i<this->vboCount;i++){
                        buffer.set(dest,this->vertexBuffer.get(source));
                        buffer.set(dest+1u,this->vertexBuffer.get(source+1u));

                        buffer.set(dest+2u,this->vertexBuffer.get(source+2u));
                        buffer.set(dest+3u,this->vertexBuffer.get(source+3u));
                        buffer.set(dest+4u,this->vertexBuffer.get(source+4u));

                        buffer.set(dest+5u,this->vertexBuffer.get(source+6u));
                        buffer.set(dest+6u,this->vertexBuffer.get(source+7u));
                        buffer.set(dest+7u,this->vertexBuffer.get(source+8u));

                        buffer.set(dest+8u,this->vertexBuffer.get(source+9u));
                        buffer.set(dest+9u,this->vertexBuffer.get(source+10u));

                        source+=vboSizeofMesh3D[this->vboType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ:
                {
                    //edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy -> edk::GU::vbo_XYZ
                    for(edk::uint32 i=0u;i<this->vboCount;i++){
                        buffer.set(dest,this->vertexBuffer.get(source));
                        buffer.set(dest+1u,this->vertexBuffer.get(source+1u));

                        source+=vboSizeofMesh3D[this->vboType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_NxNyNz:
                {
                    //edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy -> edk::GU::vbo_XYZ_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboCount;i++){
                        buffer.set(dest,this->vertexBuffer.get(source));
                        buffer.set(dest+1u,this->vertexBuffer.get(source+1u));

                        buffer.set(dest+3u,this->vertexBuffer.get(source+6u));
                        buffer.set(dest+4u,this->vertexBuffer.get(source+7u));
                        buffer.set(dest+5u,this->vertexBuffer.get(source+8u));

                        source+=vboSizeofMesh3D[this->vboType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGB:
                {
                    //edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy -> edk::GU::vbo_XYZ_RGB
                    for(edk::uint32 i=0u;i<this->vboCount;i++){
                        buffer.set(dest,this->vertexBuffer.get(source));
                        buffer.set(dest+1u,this->vertexBuffer.get(source+1u));

                        buffer.set(dest+3u,this->vertexBuffer.get(source+2u));
                        buffer.set(dest+4u,this->vertexBuffer.get(source+3u));
                        buffer.set(dest+5u,this->vertexBuffer.get(source+4u));

                        source+=vboSizeofMesh3D[this->vboType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGBA:
                {
                    //edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy -> edk::GU::vbo_XYZ_RGBA
                    for(edk::uint32 i=0u;i<this->vboCount;i++){
                        buffer.set(dest,this->vertexBuffer.get(source));
                        buffer.set(dest+1u,this->vertexBuffer.get(source+1u));

                        buffer.set(dest+3u,this->vertexBuffer.get(source+2u));
                        buffer.set(dest+4u,this->vertexBuffer.get(source+3u));
                        buffer.set(dest+5u,this->vertexBuffer.get(source+4u));
                        buffer.set(dest+6u,this->vertexBuffer.get(source+5u));

                        source+=vboSizeofMesh3D[this->vboType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGB_NxNyNz:
                {
                    //edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy -> edk::GU::vbo_XYZ_RGB_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboCount;i++){
                        buffer.set(dest,this->vertexBuffer.get(source));
                        buffer.set(dest+1u,this->vertexBuffer.get(source+1u));

                        buffer.set(dest+3u,this->vertexBuffer.get(source+2u));
                        buffer.set(dest+4u,this->vertexBuffer.get(source+3u));
                        buffer.set(dest+5u,this->vertexBuffer.get(source+4u));

                        buffer.set(dest+6u,this->vertexBuffer.get(source+6u));
                        buffer.set(dest+7u,this->vertexBuffer.get(source+7u));
                        buffer.set(dest+8u,this->vertexBuffer.get(source+8u));

                        source+=vboSizeofMesh3D[this->vboType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGBA_NxNyNz:
                {
                    //edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy -> edk::GU::vbo_XYZ_RGBA_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboCount;i++){
                        buffer.set(dest,this->vertexBuffer.get(source));
                        buffer.set(dest+1u,this->vertexBuffer.get(source+1u));

                        buffer.set(dest+3u,this->vertexBuffer.get(source+2u));
                        buffer.set(dest+4u,this->vertexBuffer.get(source+3u));
                        buffer.set(dest+5u,this->vertexBuffer.get(source+4u));
                        buffer.set(dest+6u,this->vertexBuffer.get(source+5u));

                        buffer.set(dest+7u,this->vertexBuffer.get(source+6u));
                        buffer.set(dest+8u,this->vertexBuffer.get(source+7u));
                        buffer.set(dest+9u,this->vertexBuffer.get(source+8u));

                        source+=vboSizeofMesh3D[this->vboType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGB_NxNyNz_UVxUVy:
                {
                    //edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy -> edk::GU::vbo_XYZ_RGB_NxNyNz_UVxUVy
                    for(edk::uint32 i=0u;i<this->vboCount;i++){
                        buffer.set(dest,this->vertexBuffer.get(source));
                        buffer.set(dest+1u,this->vertexBuffer.get(source+1u));

                        buffer.set(dest+3u,this->vertexBuffer.get(source+2u));
                        buffer.set(dest+4u,this->vertexBuffer.get(source+3u));
                        buffer.set(dest+5u,this->vertexBuffer.get(source+4u));

                        buffer.set(dest+6u,this->vertexBuffer.get(source+6u));
                        buffer.set(dest+7u,this->vertexBuffer.get(source+7u));
                        buffer.set(dest+8u,this->vertexBuffer.get(source+8u));

                        buffer.set(dest+9u,this->vertexBuffer.get(source+9u));
                        buffer.set(dest+10u,this->vertexBuffer.get(source+10u));

                        source+=vboSizeofMesh3D[this->vboType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy:
                {
                    //edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy -> edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy
                    for(edk::uint32 i=0u;i<this->vboCount;i++){
                        buffer.set(dest,this->vertexBuffer.get(source));
                        buffer.set(dest+1u,this->vertexBuffer.get(source+1u));

                        buffer.set(dest+3u,this->vertexBuffer.get(source+2u));
                        buffer.set(dest+4u,this->vertexBuffer.get(source+3u));
                        buffer.set(dest+5u,this->vertexBuffer.get(source+4u));
                        buffer.set(dest+6u,this->vertexBuffer.get(source+5u));

                        buffer.set(dest+7u,this->vertexBuffer.get(source+6u));
                        buffer.set(dest+8u,this->vertexBuffer.get(source+7u));
                        buffer.set(dest+9u,this->vertexBuffer.get(source+8u));

                        buffer.set(dest+10u,this->vertexBuffer.get(source+9u));
                        buffer.set(dest+11u,this->vertexBuffer.get(source+10u));

                        source+=vboSizeofMesh3D[this->vboType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                default:
                    break;
                }
            }
                break;
            case edk::GU::vbo_XYZ:
            {
                switch(type){
                case edk::GU::vbo_XY:
                {
                    //edk::GU::vbo_XYZ -> edk::GU::vbo_XY
                    for(edk::uint32 i=0u;i<this->vboCount;i++){
                        buffer.set(dest,this->vertexBuffer.get(source));
                        buffer.set(dest+1u,this->vertexBuffer.get(source+1u));

                        source+=vboSizeofMesh3D[this->vboType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_NxNyNz:
                {
                    //edk::GU::vbo_XYZ -> edk::GU::vbo_XY_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboCount;i++){
                        buffer.set(dest,this->vertexBuffer.get(source));
                        buffer.set(dest+1u,this->vertexBuffer.get(source+1u));

                        source+=vboSizeofMesh3D[this->vboType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGB:
                {
                    //edk::GU::vbo_XYZ -> edk::GU::vbo_XY_RGB
                    for(edk::uint32 i=0u;i<this->vboCount;i++){
                        buffer.set(dest,this->vertexBuffer.get(source));
                        buffer.set(dest+1u,this->vertexBuffer.get(source+1u));

                        source+=vboSizeofMesh3D[this->vboType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGBA:
                {
                    //edk::GU::vbo_XYZ -> edk::GU::vbo_XY_RGBA
                    for(edk::uint32 i=0u;i<this->vboCount;i++){
                        buffer.set(dest,this->vertexBuffer.get(source));
                        buffer.set(dest+1u,this->vertexBuffer.get(source+1u));

                        source+=vboSizeofMesh3D[this->vboType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGB_NxNyNz:
                {
                    //edk::GU::vbo_XYZ -> edk::GU::vbo_XY_RGB_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboCount;i++){
                        buffer.set(dest,this->vertexBuffer.get(source));
                        buffer.set(dest+1u,this->vertexBuffer.get(source+1u));

                        source+=vboSizeofMesh3D[this->vboType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGBA_NxNyNz:
                {
                    //edk::GU::vbo_XYZ -> edk::GU::vbo_XY_RGBA_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboCount;i++){
                        buffer.set(dest,this->vertexBuffer.get(source));
                        buffer.set(dest+1u,this->vertexBuffer.get(source+1u));


                        source+=vboSizeofMesh3D[this->vboType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGB_NxNyNz_UVxUVy:
                {
                    //edk::GU::vbo_XYZ -> edk::GU::vbo_XY_RGB_NxNyNz_UVxUVy
                    for(edk::uint32 i=0u;i<this->vboCount;i++){
                        buffer.set(dest,this->vertexBuffer.get(source));
                        buffer.set(dest+1u,this->vertexBuffer.get(source+1u));

                        source+=vboSizeofMesh3D[this->vboType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy:
                {
                    //edk::GU::vbo_XYZ -> edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy
                    for(edk::uint32 i=0u;i<this->vboCount;i++){
                        buffer.set(dest,this->vertexBuffer.get(source));
                        buffer.set(dest+1u,this->vertexBuffer.get(source+1u));

                        source+=vboSizeofMesh3D[this->vboType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_NxNyNz:
                {
                    //edk::GU::vbo_XYZ -> edk::GU::vbo_XYZ_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboCount;i++){
                        buffer.set(dest,this->vertexBuffer.get(source));
                        buffer.set(dest+1u,this->vertexBuffer.get(source+1u));
                        buffer.set(dest+2u,this->vertexBuffer.get(source+2u));

                        source+=vboSizeofMesh3D[this->vboType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGB:
                {
                    //edk::GU::vbo_XYZ -> edk::GU::vbo_XYZ_RGB
                    for(edk::uint32 i=0u;i<this->vboCount;i++){
                        buffer.set(dest,this->vertexBuffer.get(source));
                        buffer.set(dest+1u,this->vertexBuffer.get(source+1u));
                        buffer.set(dest+2u,this->vertexBuffer.get(source+2u));

                        source+=vboSizeofMesh3D[this->vboType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGBA:
                {
                    //edk::GU::vbo_XYZ -> edk::GU::vbo_XYZ_RGBA
                    for(edk::uint32 i=0u;i<this->vboCount;i++){
                        buffer.set(dest,this->vertexBuffer.get(source));
                        buffer.set(dest+1u,this->vertexBuffer.get(source+1u));
                        buffer.set(dest+2u,this->vertexBuffer.get(source+2u));

                        source+=vboSizeofMesh3D[this->vboType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGB_NxNyNz:
                {
                    //edk::GU::vbo_XYZ -> edk::GU::vbo_XYZ_RGB_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboCount;i++){
                        buffer.set(dest,this->vertexBuffer.get(source));
                        buffer.set(dest+1u,this->vertexBuffer.get(source+1u));
                        buffer.set(dest+2u,this->vertexBuffer.get(source+2u));

                        source+=vboSizeofMesh3D[this->vboType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGBA_NxNyNz:
                {
                    //edk::GU::vbo_XYZ -> edk::GU::vbo_XYZ_RGBA_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboCount;i++){
                        buffer.set(dest,this->vertexBuffer.get(source));
                        buffer.set(dest+1u,this->vertexBuffer.get(source+1u));
                        buffer.set(dest+2u,this->vertexBuffer.get(source+2u));

                        source+=vboSizeofMesh3D[this->vboType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGB_NxNyNz_UVxUVy:
                {
                    //edk::GU::vbo_XYZ -> edk::GU::vbo_XYZ_RGB_NxNyNz_UVxUVy
                    for(edk::uint32 i=0u;i<this->vboCount;i++){
                        buffer.set(dest,this->vertexBuffer.get(source));
                        buffer.set(dest+1u,this->vertexBuffer.get(source+1u));
                        buffer.set(dest+2u,this->vertexBuffer.get(source+2u));

                        source+=vboSizeofMesh3D[this->vboType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy:
                {
                    //edk::GU::vbo_XYZ -> edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy
                    for(edk::uint32 i=0u;i<this->vboCount;i++){
                        buffer.set(dest,this->vertexBuffer.get(source));
                        buffer.set(dest+1u,this->vertexBuffer.get(source+1u));
                        buffer.set(dest+2u,this->vertexBuffer.get(source+2u));

                        source+=vboSizeofMesh3D[this->vboType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                default:
                    break;
                }
            }
                break;
            case edk::GU::vbo_XYZ_NxNyNz:
            {
                switch(type){
                case edk::GU::vbo_XY:
                {
                    //edk::GU::vbo_XYZ_NxNyNz -> edk::GU::vbo_XY
                    for(edk::uint32 i=0u;i<this->vboCount;i++){
                        buffer.set(dest,this->vertexBuffer.get(source));
                        buffer.set(dest+1u,this->vertexBuffer.get(source+1u));

                        source+=vboSizeofMesh3D[this->vboType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_NxNyNz:
                {
                    //edk::GU::vbo_XYZ_NxNyNz -> edk::GU::vbo_XY_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboCount;i++){
                        buffer.set(dest,this->vertexBuffer.get(source));
                        buffer.set(dest+1u,this->vertexBuffer.get(source+1u));

                        buffer.set(dest+2u,this->vertexBuffer.get(source+3u));
                        buffer.set(dest+3u,this->vertexBuffer.get(source+4u));
                        buffer.set(dest+4u,this->vertexBuffer.get(source+5u));

                        source+=vboSizeofMesh3D[this->vboType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGB:
                {
                    //edk::GU::vbo_XYZ_NxNyNz -> edk::GU::vbo_XY_RGB
                    for(edk::uint32 i=0u;i<this->vboCount;i++){
                        buffer.set(dest,this->vertexBuffer.get(source));
                        buffer.set(dest+1u,this->vertexBuffer.get(source+1u));

                        source+=vboSizeofMesh3D[this->vboType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGBA:
                {
                    //edk::GU::vbo_XYZ_NxNyNz -> edk::GU::vbo_XY_RGBA
                    for(edk::uint32 i=0u;i<this->vboCount;i++){
                        buffer.set(dest,this->vertexBuffer.get(source));
                        buffer.set(dest+1u,this->vertexBuffer.get(source+1u));

                        source+=vboSizeofMesh3D[this->vboType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGB_NxNyNz:
                {
                    //edk::GU::vbo_XYZ_NxNyNz -> edk::GU::vbo_XY_RGB_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboCount;i++){
                        buffer.set(dest,this->vertexBuffer.get(source));
                        buffer.set(dest+1u,this->vertexBuffer.get(source+1u));

                        buffer.set(dest+5u,this->vertexBuffer.get(source+3u));
                        buffer.set(dest+6u,this->vertexBuffer.get(source+4u));
                        buffer.set(dest+7u,this->vertexBuffer.get(source+5u));

                        source+=vboSizeofMesh3D[this->vboType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGBA_NxNyNz:
                {
                    //edk::GU::vbo_XYZ_NxNyNz -> edk::GU::vbo_XY_RGBA_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboCount;i++){
                        buffer.set(dest,this->vertexBuffer.get(source));
                        buffer.set(dest+1u,this->vertexBuffer.get(source+1u));

                        buffer.set(dest+6u,this->vertexBuffer.get(source+3u));
                        buffer.set(dest+7u,this->vertexBuffer.get(source+4u));
                        buffer.set(dest+8u,this->vertexBuffer.get(source+5u));

                        source+=vboSizeofMesh3D[this->vboType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGB_NxNyNz_UVxUVy:
                {
                    //edk::GU::vbo_XYZ_NxNyNz -> edk::GU::vbo_XY_RGB_NxNyNz_UVxUVy
                    for(edk::uint32 i=0u;i<this->vboCount;i++){
                        buffer.set(dest,this->vertexBuffer.get(source));
                        buffer.set(dest+1u,this->vertexBuffer.get(source+1u));

                        buffer.set(dest+5u,this->vertexBuffer.get(source+3u));
                        buffer.set(dest+6u,this->vertexBuffer.get(source+4u));
                        buffer.set(dest+7u,this->vertexBuffer.get(source+5u));

                        source+=vboSizeofMesh3D[this->vboType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy:
                {
                    //edk::GU::vbo_XYZ_NxNyNz -> edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy
                    for(edk::uint32 i=0u;i<this->vboCount;i++){
                        buffer.set(dest,this->vertexBuffer.get(source));
                        buffer.set(dest+1u,this->vertexBuffer.get(source+1u));

                        buffer.set(dest+6u,this->vertexBuffer.get(source+3u));
                        buffer.set(dest+7u,this->vertexBuffer.get(source+4u));
                        buffer.set(dest+8u,this->vertexBuffer.get(source+5u));

                        source+=vboSizeofMesh3D[this->vboType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ:
                {
                    //edk::GU::vbo_XYZ_NxNyNz -> edk::GU::vbo_XYZ
                    for(edk::uint32 i=0u;i<this->vboCount;i++){
                        buffer.set(dest,this->vertexBuffer.get(source));
                        buffer.set(dest+1u,this->vertexBuffer.get(source+1u));
                        buffer.set(dest+2u,this->vertexBuffer.get(source+2u));

                        source+=vboSizeofMesh3D[this->vboType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGB:
                {
                    //edk::GU::vbo_XYZ_NxNyNz -> edk::GU::vbo_XYZ_RGB
                    for(edk::uint32 i=0u;i<this->vboCount;i++){
                        buffer.set(dest,this->vertexBuffer.get(source));
                        buffer.set(dest+1u,this->vertexBuffer.get(source+1u));
                        buffer.set(dest+2u,this->vertexBuffer.get(source+2u));

                        source+=vboSizeofMesh3D[this->vboType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGBA:
                {
                    //edk::GU::vbo_XYZ_NxNyNz -> edk::GU::vbo_XYZ_RGBA
                    for(edk::uint32 i=0u;i<this->vboCount;i++){
                        buffer.set(dest,this->vertexBuffer.get(source));
                        buffer.set(dest+1u,this->vertexBuffer.get(source+1u));
                        buffer.set(dest+2u,this->vertexBuffer.get(source+2u));

                        source+=vboSizeofMesh3D[this->vboType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGB_NxNyNz:
                {
                    //edk::GU::vbo_XYZ_NxNyNz -> edk::GU::vbo_XYZ_RGB_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboCount;i++){
                        buffer.set(dest,this->vertexBuffer.get(source));
                        buffer.set(dest+1u,this->vertexBuffer.get(source+1u));
                        buffer.set(dest+2u,this->vertexBuffer.get(source+2u));

                        buffer.set(dest+6u,this->vertexBuffer.get(source+3u));
                        buffer.set(dest+7u,this->vertexBuffer.get(source+4u));
                        buffer.set(dest+8u,this->vertexBuffer.get(source+5u));

                        source+=vboSizeofMesh3D[this->vboType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGBA_NxNyNz:
                {
                    //edk::GU::vbo_XYZ_NxNyNz -> edk::GU::vbo_XYZ_RGBA_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboCount;i++){
                        buffer.set(dest,this->vertexBuffer.get(source));
                        buffer.set(dest+1u,this->vertexBuffer.get(source+1u));
                        buffer.set(dest+2u,this->vertexBuffer.get(source+2u));

                        buffer.set(dest+7u,this->vertexBuffer.get(source+3u));
                        buffer.set(dest+8u,this->vertexBuffer.get(source+4u));
                        buffer.set(dest+9u,this->vertexBuffer.get(source+5u));

                        source+=vboSizeofMesh3D[this->vboType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGB_NxNyNz_UVxUVy:
                {
                    //edk::GU::vbo_XYZ_NxNyNz -> edk::GU::vbo_XYZ_RGB_NxNyNz_UVxUVy
                    for(edk::uint32 i=0u;i<this->vboCount;i++){
                        buffer.set(dest,this->vertexBuffer.get(source));
                        buffer.set(dest+1u,this->vertexBuffer.get(source+1u));
                        buffer.set(dest+2u,this->vertexBuffer.get(source+2u));

                        buffer.set(dest+6u,this->vertexBuffer.get(source+3u));
                        buffer.set(dest+7u,this->vertexBuffer.get(source+4u));
                        buffer.set(dest+8u,this->vertexBuffer.get(source+5u));

                        source+=vboSizeofMesh3D[this->vboType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy:
                {
                    //edk::GU::vbo_XYZ_NxNyNz -> edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy
                    for(edk::uint32 i=0u;i<this->vboCount;i++){
                        buffer.set(dest,this->vertexBuffer.get(source));
                        buffer.set(dest+1u,this->vertexBuffer.get(source+1u));
                        buffer.set(dest+2u,this->vertexBuffer.get(source+2u));

                        buffer.set(dest+7u,this->vertexBuffer.get(source+3u));
                        buffer.set(dest+8u,this->vertexBuffer.get(source+4u));
                        buffer.set(dest+9u,this->vertexBuffer.get(source+5u));

                        source+=vboSizeofMesh3D[this->vboType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                default:
                    break;
                }
            }
                break;
            case edk::GU::vbo_XYZ_RGB:
            {
                switch(type){
                case edk::GU::vbo_XY:
                {
                    //edk::GU::vbo_XYZ_RGB -> edk::GU::vbo_XY
                    for(edk::uint32 i=0u;i<this->vboCount;i++){
                        buffer.set(dest,this->vertexBuffer.get(source));
                        buffer.set(dest+1u,this->vertexBuffer.get(source+1u));

                        source+=vboSizeofMesh3D[this->vboType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_NxNyNz:
                {
                    //edk::GU::vbo_XYZ_RGB -> edk::GU::vbo_XY_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboCount;i++){
                        buffer.set(dest,this->vertexBuffer.get(source));
                        buffer.set(dest+1u,this->vertexBuffer.get(source+1u));

                        source+=vboSizeofMesh3D[this->vboType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGB:
                {
                    //edk::GU::vbo_XYZ_RGB -> edk::GU::vbo_XY_RGB
                    for(edk::uint32 i=0u;i<this->vboCount;i++){
                        buffer.set(dest,this->vertexBuffer.get(source));
                        buffer.set(dest+1u,this->vertexBuffer.get(source+1u));

                        buffer.set(dest+2u,this->vertexBuffer.get(source+3u));
                        buffer.set(dest+3u,this->vertexBuffer.get(source+4u));
                        buffer.set(dest+4u,this->vertexBuffer.get(source+5u));

                        source+=vboSizeofMesh3D[this->vboType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGBA:
                {
                    //edk::GU::vbo_XYZ_RGB -> edk::GU::vbo_XY_RGBA
                    for(edk::uint32 i=0u;i<this->vboCount;i++){
                        buffer.set(dest,this->vertexBuffer.get(source));
                        buffer.set(dest+1u,this->vertexBuffer.get(source+1u));

                        buffer.set(dest+2u,this->vertexBuffer.get(source+3u));
                        buffer.set(dest+3u,this->vertexBuffer.get(source+4u));
                        buffer.set(dest+4u,this->vertexBuffer.get(source+5u));

                        source+=vboSizeofMesh3D[this->vboType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGB_NxNyNz:
                {
                    //edk::GU::vbo_XYZ_RGB -> edk::GU::vbo_XY_RGB_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboCount;i++){
                        buffer.set(dest,this->vertexBuffer.get(source));
                        buffer.set(dest+1u,this->vertexBuffer.get(source+1u));

                        buffer.set(dest+2u,this->vertexBuffer.get(source+3u));
                        buffer.set(dest+3u,this->vertexBuffer.get(source+4u));
                        buffer.set(dest+4u,this->vertexBuffer.get(source+5u));

                        source+=vboSizeofMesh3D[this->vboType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGBA_NxNyNz:
                {
                    //edk::GU::vbo_XYZ_RGB -> edk::GU::vbo_XY_RGBA_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboCount;i++){
                        buffer.set(dest,this->vertexBuffer.get(source));
                        buffer.set(dest+1u,this->vertexBuffer.get(source+1u));

                        buffer.set(dest+2u,this->vertexBuffer.get(source+3u));
                        buffer.set(dest+3u,this->vertexBuffer.get(source+4u));
                        buffer.set(dest+4u,this->vertexBuffer.get(source+5u));

                        source+=vboSizeofMesh3D[this->vboType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGB_NxNyNz_UVxUVy:
                {
                    //edk::GU::vbo_XYZ_RGB -> edk::GU::vbo_XY_RGB_NxNyNz_UVxUVy
                    for(edk::uint32 i=0u;i<this->vboCount;i++){
                        buffer.set(dest,this->vertexBuffer.get(source));
                        buffer.set(dest+1u,this->vertexBuffer.get(source+1u));

                        buffer.set(dest+2u,this->vertexBuffer.get(source+3u));
                        buffer.set(dest+3u,this->vertexBuffer.get(source+4u));
                        buffer.set(dest+4u,this->vertexBuffer.get(source+5u));

                        source+=vboSizeofMesh3D[this->vboType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy:
                {
                    //edk::GU::vbo_XYZ_RGB -> edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy
                    for(edk::uint32 i=0u;i<this->vboCount;i++){
                        buffer.set(dest,this->vertexBuffer.get(source));
                        buffer.set(dest+1u,this->vertexBuffer.get(source+1u));

                        buffer.set(dest+2u,this->vertexBuffer.get(source+3u));
                        buffer.set(dest+3u,this->vertexBuffer.get(source+4u));
                        buffer.set(dest+4u,this->vertexBuffer.get(source+5u));

                        source+=vboSizeofMesh3D[this->vboType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ:
                {
                    //edk::GU::vbo_XYZ_RGB -> edk::GU::vbo_XYZ
                    for(edk::uint32 i=0u;i<this->vboCount;i++){
                        buffer.set(dest,this->vertexBuffer.get(source));
                        buffer.set(dest+1u,this->vertexBuffer.get(source+1u));
                        buffer.set(dest+2u,this->vertexBuffer.get(source+2u));

                        source+=vboSizeofMesh3D[this->vboType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_NxNyNz:
                {
                    //edk::GU::vbo_XYZ_RGB -> edk::GU::vbo_XYZ_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboCount;i++){
                        buffer.set(dest,this->vertexBuffer.get(source));
                        buffer.set(dest+1u,this->vertexBuffer.get(source+1u));
                        buffer.set(dest+2u,this->vertexBuffer.get(source+2u));

                        source+=vboSizeofMesh3D[this->vboType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGBA:
                {
                    //edk::GU::vbo_XYZ_RGB -> edk::GU::vbo_XYZ_RGBA
                    for(edk::uint32 i=0u;i<this->vboCount;i++){
                        buffer.set(dest,this->vertexBuffer.get(source));
                        buffer.set(dest+1u,this->vertexBuffer.get(source+1u));
                        buffer.set(dest+2u,this->vertexBuffer.get(source+2u));

                        buffer.set(dest+3u,this->vertexBuffer.get(source+3u));
                        buffer.set(dest+4u,this->vertexBuffer.get(source+4u));
                        buffer.set(dest+5u,this->vertexBuffer.get(source+5u));

                        source+=vboSizeofMesh3D[this->vboType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGB_NxNyNz:
                {
                    //edk::GU::vbo_XYZ_RGB -> edk::GU::vbo_XYZ_RGB_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboCount;i++){
                        buffer.set(dest,this->vertexBuffer.get(source));
                        buffer.set(dest+1u,this->vertexBuffer.get(source+1u));
                        buffer.set(dest+2u,this->vertexBuffer.get(source+2u));

                        buffer.set(dest+3u,this->vertexBuffer.get(source+3u));
                        buffer.set(dest+4u,this->vertexBuffer.get(source+4u));
                        buffer.set(dest+5u,this->vertexBuffer.get(source+5u));

                        source+=vboSizeofMesh3D[this->vboType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGBA_NxNyNz:
                {
                    //edk::GU::vbo_XYZ_RGB -> edk::GU::vbo_XYZ_RGBA_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboCount;i++){
                        buffer.set(dest,this->vertexBuffer.get(source));
                        buffer.set(dest+1u,this->vertexBuffer.get(source+1u));
                        buffer.set(dest+2u,this->vertexBuffer.get(source+2u));

                        buffer.set(dest+3u,this->vertexBuffer.get(source+3u));
                        buffer.set(dest+4u,this->vertexBuffer.get(source+4u));
                        buffer.set(dest+5u,this->vertexBuffer.get(source+5u));


                        source+=vboSizeofMesh3D[this->vboType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGB_NxNyNz_UVxUVy:
                {
                    //edk::GU::vbo_XYZ_RGB -> edk::GU::vbo_XYZ_RGB_NxNyNz_UVxUVy
                    for(edk::uint32 i=0u;i<this->vboCount;i++){
                        buffer.set(dest,this->vertexBuffer.get(source));
                        buffer.set(dest+1u,this->vertexBuffer.get(source+1u));
                        buffer.set(dest+2u,this->vertexBuffer.get(source+2u));

                        buffer.set(dest+3u,this->vertexBuffer.get(source+3u));
                        buffer.set(dest+4u,this->vertexBuffer.get(source+4u));
                        buffer.set(dest+5u,this->vertexBuffer.get(source+5u));

                        source+=vboSizeofMesh3D[this->vboType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy:
                {
                    //edk::GU::vbo_XYZ_RGB -> edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy
                    for(edk::uint32 i=0u;i<this->vboCount;i++){
                        buffer.set(dest,this->vertexBuffer.get(source));
                        buffer.set(dest+1u,this->vertexBuffer.get(source+1u));
                        buffer.set(dest+2u,this->vertexBuffer.get(source+2u));

                        buffer.set(dest+3u,this->vertexBuffer.get(source+3u));
                        buffer.set(dest+4u,this->vertexBuffer.get(source+4u));
                        buffer.set(dest+5u,this->vertexBuffer.get(source+5u));

                        source+=vboSizeofMesh3D[this->vboType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                default:
                    break;
                }
            }
                break;
            case edk::GU::vbo_XYZ_RGBA:
            {
                switch(type){
                case edk::GU::vbo_XY:
                {
                    //edk::GU::vbo_XYZ_RGBA -> edk::GU::vbo_XY
                    for(edk::uint32 i=0u;i<this->vboCount;i++){
                        buffer.set(dest,this->vertexBuffer.get(source));
                        buffer.set(dest+1u,this->vertexBuffer.get(source+1u));

                        source+=vboSizeofMesh3D[this->vboType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_NxNyNz:
                {
                    //edk::GU::vbo_XYZ_RGBA -> edk::GU::vbo_XY_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboCount;i++){
                        buffer.set(dest,this->vertexBuffer.get(source));
                        buffer.set(dest+1u,this->vertexBuffer.get(source+1u));

                        source+=vboSizeofMesh3D[this->vboType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGB:
                {
                    //edk::GU::vbo_XYZ_RGBA -> edk::GU::vbo_XY_RGB
                    for(edk::uint32 i=0u;i<this->vboCount;i++){
                        buffer.set(dest,this->vertexBuffer.get(source));
                        buffer.set(dest+1u,this->vertexBuffer.get(source+1u));

                        buffer.set(dest+2u,this->vertexBuffer.get(source+3u));
                        buffer.set(dest+3u,this->vertexBuffer.get(source+4u));
                        buffer.set(dest+4u,this->vertexBuffer.get(source+5u));

                        source+=vboSizeofMesh3D[this->vboType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGBA:
                {
                    //edk::GU::vbo_XYZ_RGBA -> edk::GU::vbo_XY_RGBA
                    for(edk::uint32 i=0u;i<this->vboCount;i++){
                        buffer.set(dest,this->vertexBuffer.get(source));
                        buffer.set(dest+1u,this->vertexBuffer.get(source+1u));

                        buffer.set(dest+2u,this->vertexBuffer.get(source+3u));
                        buffer.set(dest+3u,this->vertexBuffer.get(source+4u));
                        buffer.set(dest+4u,this->vertexBuffer.get(source+5u));
                        buffer.set(dest+5u,this->vertexBuffer.get(source+6u));

                        source+=vboSizeofMesh3D[this->vboType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGB_NxNyNz:
                {
                    //edk::GU::vbo_XYZ_RGBA -> edk::GU::vbo_XY_RGB_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboCount;i++){
                        buffer.set(dest,this->vertexBuffer.get(source));
                        buffer.set(dest+1u,this->vertexBuffer.get(source+1u));

                        buffer.set(dest+2u,this->vertexBuffer.get(source+3u));
                        buffer.set(dest+3u,this->vertexBuffer.get(source+4u));
                        buffer.set(dest+4u,this->vertexBuffer.get(source+5u));

                        source+=vboSizeofMesh3D[this->vboType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGBA_NxNyNz:
                {
                    //edk::GU::vbo_XYZ_RGBA -> edk::GU::vbo_XY_RGBA_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboCount;i++){
                        buffer.set(dest,this->vertexBuffer.get(source));
                        buffer.set(dest+1u,this->vertexBuffer.get(source+1u));

                        buffer.set(dest+2u,this->vertexBuffer.get(source+3u));
                        buffer.set(dest+3u,this->vertexBuffer.get(source+4u));
                        buffer.set(dest+4u,this->vertexBuffer.get(source+5u));
                        buffer.set(dest+5u,this->vertexBuffer.get(source+6u));

                        source+=vboSizeofMesh3D[this->vboType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGB_NxNyNz_UVxUVy:
                {
                    //edk::GU::vbo_XYZ_RGBA -> edk::GU::vbo_XY_RGB_NxNyNz_UVxUVy
                    for(edk::uint32 i=0u;i<this->vboCount;i++){
                        buffer.set(dest,this->vertexBuffer.get(source));
                        buffer.set(dest+1u,this->vertexBuffer.get(source+1u));

                        buffer.set(dest+2u,this->vertexBuffer.get(source+3u));
                        buffer.set(dest+3u,this->vertexBuffer.get(source+4u));
                        buffer.set(dest+4u,this->vertexBuffer.get(source+5u));

                        source+=vboSizeofMesh3D[this->vboType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy:
                {
                    //edk::GU::vbo_XYZ_RGBA -> edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy
                    for(edk::uint32 i=0u;i<this->vboCount;i++){
                        buffer.set(dest,this->vertexBuffer.get(source));
                        buffer.set(dest+1u,this->vertexBuffer.get(source+1u));

                        buffer.set(dest+2u,this->vertexBuffer.get(source+3u));
                        buffer.set(dest+3u,this->vertexBuffer.get(source+4u));
                        buffer.set(dest+4u,this->vertexBuffer.get(source+5u));
                        buffer.set(dest+5u,this->vertexBuffer.get(source+6u));

                        source+=vboSizeofMesh3D[this->vboType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ:
                {
                    //edk::GU::vbo_XYZ_RGBA -> edk::GU::vbo_XYZ
                    for(edk::uint32 i=0u;i<this->vboCount;i++){
                        buffer.set(dest,this->vertexBuffer.get(source));
                        buffer.set(dest+1u,this->vertexBuffer.get(source+1u));
                        buffer.set(dest+2u,this->vertexBuffer.get(source+2u));

                        source+=vboSizeofMesh3D[this->vboType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_NxNyNz:
                {
                    //edk::GU::vbo_XYZ_RGBA -> edk::GU::vbo_XYZ_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboCount;i++){
                        buffer.set(dest,this->vertexBuffer.get(source));
                        buffer.set(dest+1u,this->vertexBuffer.get(source+1u));
                        buffer.set(dest+2u,this->vertexBuffer.get(source+2u));

                        source+=vboSizeofMesh3D[this->vboType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGB:
                {
                    //edk::GU::vbo_XYZ_RGBA -> edk::GU::vbo_XYZ_RGB
                    for(edk::uint32 i=0u;i<this->vboCount;i++){
                        buffer.set(dest,this->vertexBuffer.get(source));
                        buffer.set(dest+1u,this->vertexBuffer.get(source+1u));
                        buffer.set(dest+2u,this->vertexBuffer.get(source+2u));

                        buffer.set(dest+3u,this->vertexBuffer.get(source+3u));
                        buffer.set(dest+4u,this->vertexBuffer.get(source+4u));
                        buffer.set(dest+5u,this->vertexBuffer.get(source+5u));

                        source+=vboSizeofMesh3D[this->vboType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGB_NxNyNz:
                {
                    //edk::GU::vbo_XYZ_RGBA -> edk::GU::vbo_XYZ_RGB_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboCount;i++){
                        buffer.set(dest,this->vertexBuffer.get(source));
                        buffer.set(dest+1u,this->vertexBuffer.get(source+1u));
                        buffer.set(dest+2u,this->vertexBuffer.get(source+2u));

                        buffer.set(dest+3u,this->vertexBuffer.get(source+3u));
                        buffer.set(dest+4u,this->vertexBuffer.get(source+4u));
                        buffer.set(dest+5u,this->vertexBuffer.get(source+5u));

                        source+=vboSizeofMesh3D[this->vboType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGBA_NxNyNz:
                {
                    //edk::GU::vbo_XYZ_RGBA -> edk::GU::vbo_XYZ_RGBA_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboCount;i++){
                        buffer.set(dest,this->vertexBuffer.get(source));
                        buffer.set(dest+1u,this->vertexBuffer.get(source+1u));
                        buffer.set(dest+2u,this->vertexBuffer.get(source+2u));

                        buffer.set(dest+3u,this->vertexBuffer.get(source+3u));
                        buffer.set(dest+4u,this->vertexBuffer.get(source+4u));
                        buffer.set(dest+5u,this->vertexBuffer.get(source+5u));
                        buffer.set(dest+6u,this->vertexBuffer.get(source+6u));

                        source+=vboSizeofMesh3D[this->vboType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGB_NxNyNz_UVxUVy:
                {
                    //edk::GU::vbo_XYZ_RGBA -> edk::GU::vbo_XYZ_RGB_NxNyNz_UVxUVy
                    for(edk::uint32 i=0u;i<this->vboCount;i++){
                        buffer.set(dest,this->vertexBuffer.get(source));
                        buffer.set(dest+1u,this->vertexBuffer.get(source+1u));
                        buffer.set(dest+2u,this->vertexBuffer.get(source+2u));

                        buffer.set(dest+3u,this->vertexBuffer.get(source+3u));
                        buffer.set(dest+4u,this->vertexBuffer.get(source+4u));
                        buffer.set(dest+5u,this->vertexBuffer.get(source+5u));

                        source+=vboSizeofMesh3D[this->vboType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy:
                {
                    //edk::GU::vbo_XYZ_RGBA -> edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy
                    for(edk::uint32 i=0u;i<this->vboCount;i++){
                        buffer.set(dest,this->vertexBuffer.get(source));
                        buffer.set(dest+1u,this->vertexBuffer.get(source+1u));
                        buffer.set(dest+2u,this->vertexBuffer.get(source+2u));

                        buffer.set(dest+3u,this->vertexBuffer.get(source+3u));
                        buffer.set(dest+4u,this->vertexBuffer.get(source+4u));
                        buffer.set(dest+5u,this->vertexBuffer.get(source+5u));
                        buffer.set(dest+6u,this->vertexBuffer.get(source+6u));

                        source+=vboSizeofMesh3D[this->vboType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                default:
                    break;
                }
            }
                break;
            case edk::GU::vbo_XYZ_RGB_NxNyNz:
            {
                switch(type){
                case edk::GU::vbo_XY:
                {
                    //edk::GU::vbo_XYZ_RGB_NxNyNz -> edk::GU::vbo_XY
                    for(edk::uint32 i=0u;i<this->vboCount;i++){
                        buffer.set(dest,this->vertexBuffer.get(source));
                        buffer.set(dest+1u,this->vertexBuffer.get(source+1u));

                        source+=vboSizeofMesh3D[this->vboType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_NxNyNz:
                {
                    //edk::GU::vbo_XYZ_RGB_NxNyNz -> edk::GU::vbo_XY_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboCount;i++){
                        buffer.set(dest,this->vertexBuffer.get(source));
                        buffer.set(dest+1u,this->vertexBuffer.get(source+1u));

                        buffer.set(dest+2u,this->vertexBuffer.get(source+6u));
                        buffer.set(dest+3u,this->vertexBuffer.get(source+7u));
                        buffer.set(dest+4u,this->vertexBuffer.get(source+8u));

                        source+=vboSizeofMesh3D[this->vboType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGB:
                {
                    //edk::GU::vbo_XYZ_RGB_NxNyNz -> edk::GU::vbo_XY_RGB
                    for(edk::uint32 i=0u;i<this->vboCount;i++){
                        buffer.set(dest,this->vertexBuffer.get(source));
                        buffer.set(dest+1u,this->vertexBuffer.get(source+1u));

                        buffer.set(dest+2u,this->vertexBuffer.get(source+3u));
                        buffer.set(dest+3u,this->vertexBuffer.get(source+4u));
                        buffer.set(dest+4u,this->vertexBuffer.get(source+5u));

                        source+=vboSizeofMesh3D[this->vboType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGBA:
                {
                    //edk::GU::vbo_XYZ_RGB_NxNyNz -> edk::GU::vbo_XY_RGBA
                    for(edk::uint32 i=0u;i<this->vboCount;i++){
                        buffer.set(dest,this->vertexBuffer.get(source));
                        buffer.set(dest+1u,this->vertexBuffer.get(source+1u));

                        buffer.set(dest+2u,this->vertexBuffer.get(source+3u));
                        buffer.set(dest+3u,this->vertexBuffer.get(source+4u));
                        buffer.set(dest+4u,this->vertexBuffer.get(source+5u));

                        source+=vboSizeofMesh3D[this->vboType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGB_NxNyNz:
                {
                    //edk::GU::vbo_XYZ_RGB_NxNyNz -> edk::GU::vbo_XY_RGB_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboCount;i++){
                        buffer.set(dest,this->vertexBuffer.get(source));
                        buffer.set(dest+1u,this->vertexBuffer.get(source+1u));

                        buffer.set(dest+2u,this->vertexBuffer.get(source+3u));
                        buffer.set(dest+3u,this->vertexBuffer.get(source+4u));
                        buffer.set(dest+4u,this->vertexBuffer.get(source+5u));

                        buffer.set(dest+5u,this->vertexBuffer.get(source+6u));
                        buffer.set(dest+6u,this->vertexBuffer.get(source+7u));
                        buffer.set(dest+7u,this->vertexBuffer.get(source+8u));

                        source+=vboSizeofMesh3D[this->vboType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGBA_NxNyNz:
                {
                    //edk::GU::vbo_XYZ_RGB_NxNyNz -> edk::GU::vbo_XY_RGBA_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboCount;i++){
                        buffer.set(dest,this->vertexBuffer.get(source));
                        buffer.set(dest+1u,this->vertexBuffer.get(source+1u));

                        buffer.set(dest+2u,this->vertexBuffer.get(source+3u));
                        buffer.set(dest+3u,this->vertexBuffer.get(source+4u));
                        buffer.set(dest+4u,this->vertexBuffer.get(source+5u));

                        buffer.set(dest+6u,this->vertexBuffer.get(source+6u));
                        buffer.set(dest+7u,this->vertexBuffer.get(source+7u));
                        buffer.set(dest+8u,this->vertexBuffer.get(source+8u));

                        source+=vboSizeofMesh3D[this->vboType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGB_NxNyNz_UVxUVy:
                {
                    //edk::GU::vbo_XYZ_RGB_NxNyNz -> edk::GU::vbo_XY_RGB_NxNyNz_UVxUVy
                    for(edk::uint32 i=0u;i<this->vboCount;i++){
                        buffer.set(dest,this->vertexBuffer.get(source));
                        buffer.set(dest+1u,this->vertexBuffer.get(source+1u));

                        buffer.set(dest+2u,this->vertexBuffer.get(source+3u));
                        buffer.set(dest+3u,this->vertexBuffer.get(source+4u));
                        buffer.set(dest+4u,this->vertexBuffer.get(source+5u));

                        buffer.set(dest+5u,this->vertexBuffer.get(source+6u));
                        buffer.set(dest+6u,this->vertexBuffer.get(source+7u));
                        buffer.set(dest+7u,this->vertexBuffer.get(source+8u));

                        source+=vboSizeofMesh3D[this->vboType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy:
                {
                    //edk::GU::vbo_XYZ_RGB_NxNyNz -> edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy
                    for(edk::uint32 i=0u;i<this->vboCount;i++){
                        buffer.set(dest,this->vertexBuffer.get(source));
                        buffer.set(dest+1u,this->vertexBuffer.get(source+1u));

                        buffer.set(dest+2u,this->vertexBuffer.get(source+3u));
                        buffer.set(dest+3u,this->vertexBuffer.get(source+4u));
                        buffer.set(dest+4u,this->vertexBuffer.get(source+5u));

                        buffer.set(dest+6u,this->vertexBuffer.get(source+6u));
                        buffer.set(dest+7u,this->vertexBuffer.get(source+7u));
                        buffer.set(dest+8u,this->vertexBuffer.get(source+8u));

                        source+=vboSizeofMesh3D[this->vboType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ:
                {
                    //edk::GU::vbo_XYZ_RGB_NxNyNz -> edk::GU::vbo_XYZ
                    for(edk::uint32 i=0u;i<this->vboCount;i++){
                        buffer.set(dest,this->vertexBuffer.get(source));
                        buffer.set(dest+1u,this->vertexBuffer.get(source+1u));
                        buffer.set(dest+2u,this->vertexBuffer.get(source+2u));

                        source+=vboSizeofMesh3D[this->vboType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_NxNyNz:
                {
                    //edk::GU::vbo_XYZ_RGB_NxNyNz -> edk::GU::vbo_XYZ_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboCount;i++){
                        buffer.set(dest,this->vertexBuffer.get(source));
                        buffer.set(dest+1u,this->vertexBuffer.get(source+1u));
                        buffer.set(dest+2u,this->vertexBuffer.get(source+2u));

                        buffer.set(dest+3u,this->vertexBuffer.get(source+6u));
                        buffer.set(dest+4u,this->vertexBuffer.get(source+7u));
                        buffer.set(dest+5u,this->vertexBuffer.get(source+8u));

                        source+=vboSizeofMesh3D[this->vboType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGB:
                {
                    //edk::GU::vbo_XYZ_RGB_NxNyNz -> edk::GU::vbo_XYZ_RGB
                    for(edk::uint32 i=0u;i<this->vboCount;i++){
                        buffer.set(dest,this->vertexBuffer.get(source));
                        buffer.set(dest+1u,this->vertexBuffer.get(source+1u));
                        buffer.set(dest+2u,this->vertexBuffer.get(source+2u));

                        buffer.set(dest+3u,this->vertexBuffer.get(source+3u));
                        buffer.set(dest+4u,this->vertexBuffer.get(source+4u));
                        buffer.set(dest+5u,this->vertexBuffer.get(source+5u));

                        source+=vboSizeofMesh3D[this->vboType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGBA:
                {
                    //edk::GU::vbo_XYZ_RGB_NxNyNz -> edk::GU::vbo_XYZ_RGBA
                    for(edk::uint32 i=0u;i<this->vboCount;i++){
                        buffer.set(dest,this->vertexBuffer.get(source));
                        buffer.set(dest+1u,this->vertexBuffer.get(source+1u));
                        buffer.set(dest+2u,this->vertexBuffer.get(source+2u));

                        buffer.set(dest+3u,this->vertexBuffer.get(source+3u));
                        buffer.set(dest+4u,this->vertexBuffer.get(source+4u));
                        buffer.set(dest+5u,this->vertexBuffer.get(source+5u));

                        source+=vboSizeofMesh3D[this->vboType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGBA_NxNyNz:
                {
                    //edk::GU::vbo_XYZ_RGB_NxNyNz -> edk::GU::vbo_XYZ_RGBA_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboCount;i++){
                        buffer.set(dest,this->vertexBuffer.get(source));
                        buffer.set(dest+1u,this->vertexBuffer.get(source+1u));
                        buffer.set(dest+2u,this->vertexBuffer.get(source+2u));

                        buffer.set(dest+3u,this->vertexBuffer.get(source+3u));
                        buffer.set(dest+4u,this->vertexBuffer.get(source+4u));
                        buffer.set(dest+5u,this->vertexBuffer.get(source+5u));

                        buffer.set(dest+7u,this->vertexBuffer.get(source+6u));
                        buffer.set(dest+8u,this->vertexBuffer.get(source+7u));
                        buffer.set(dest+9u,this->vertexBuffer.get(source+8u));

                        source+=vboSizeofMesh3D[this->vboType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGB_NxNyNz_UVxUVy:
                {
                    //edk::GU::vbo_XYZ_RGB_NxNyNz -> edk::GU::vbo_XYZ_RGB_NxNyNz_UVxUVy
                    for(edk::uint32 i=0u;i<this->vboCount;i++){
                        buffer.set(dest,this->vertexBuffer.get(source));
                        buffer.set(dest+1u,this->vertexBuffer.get(source+1u));
                        buffer.set(dest+2u,this->vertexBuffer.get(source+2u));

                        buffer.set(dest+3u,this->vertexBuffer.get(source+3u));
                        buffer.set(dest+4u,this->vertexBuffer.get(source+4u));
                        buffer.set(dest+5u,this->vertexBuffer.get(source+5u));

                        buffer.set(dest+6u,this->vertexBuffer.get(source+6u));
                        buffer.set(dest+7u,this->vertexBuffer.get(source+7u));
                        buffer.set(dest+8u,this->vertexBuffer.get(source+8u));

                        source+=vboSizeofMesh3D[this->vboType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy:
                {
                    //edk::GU::vbo_XYZ_RGB_NxNyNz -> edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy
                    for(edk::uint32 i=0u;i<this->vboCount;i++){
                        buffer.set(dest,this->vertexBuffer.get(source));
                        buffer.set(dest+1u,this->vertexBuffer.get(source+1u));
                        buffer.set(dest+2u,this->vertexBuffer.get(source+2u));

                        buffer.set(dest+3u,this->vertexBuffer.get(source+3u));
                        buffer.set(dest+4u,this->vertexBuffer.get(source+4u));
                        buffer.set(dest+5u,this->vertexBuffer.get(source+5u));

                        buffer.set(dest+8u,this->vertexBuffer.get(source+6u));
                        buffer.set(dest+9u,this->vertexBuffer.get(source+7u));
                        buffer.set(dest+10u,this->vertexBuffer.get(source+8u));

                        source+=vboSizeofMesh3D[this->vboType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                default:
                    break;
                }
            }
                break;
            case edk::GU::vbo_XYZ_RGBA_NxNyNz:
            {
                switch(type){
                case edk::GU::vbo_XY:
                {
                    //edk::GU::vbo_XYZ_RGBA_NxNyNz -> edk::GU::vbo_XY
                    for(edk::uint32 i=0u;i<this->vboCount;i++){
                        buffer.set(dest,this->vertexBuffer.get(source));
                        buffer.set(dest+1u,this->vertexBuffer.get(source+1u));

                        source+=vboSizeofMesh3D[this->vboType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_NxNyNz:
                {
                    //edk::GU::vbo_XYZ_RGBA_NxNyNz -> edk::GU::vbo_XY_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboCount;i++){
                        buffer.set(dest,this->vertexBuffer.get(source));
                        buffer.set(dest+1u,this->vertexBuffer.get(source+1u));

                        buffer.set(dest+2u,this->vertexBuffer.get(source+7u));
                        buffer.set(dest+3u,this->vertexBuffer.get(source+8u));
                        buffer.set(dest+4u,this->vertexBuffer.get(source+9u));

                        source+=vboSizeofMesh3D[this->vboType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGB:
                {
                    //edk::GU::vbo_XYZ_RGBA_NxNyNz -> edk::GU::vbo_XY_RGB
                    for(edk::uint32 i=0u;i<this->vboCount;i++){
                        buffer.set(dest,this->vertexBuffer.get(source));
                        buffer.set(dest+1u,this->vertexBuffer.get(source+1u));

                        buffer.set(dest+2u,this->vertexBuffer.get(source+3u));
                        buffer.set(dest+3u,this->vertexBuffer.get(source+4u));
                        buffer.set(dest+4u,this->vertexBuffer.get(source+5u));

                        source+=vboSizeofMesh3D[this->vboType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGBA:
                {
                    //edk::GU::vbo_XYZ_RGBA_NxNyNz -> edk::GU::vbo_XY_RGBA
                    for(edk::uint32 i=0u;i<this->vboCount;i++){
                        buffer.set(dest,this->vertexBuffer.get(source));
                        buffer.set(dest+1u,this->vertexBuffer.get(source+1u));

                        buffer.set(dest+2u,this->vertexBuffer.get(source+3u));
                        buffer.set(dest+3u,this->vertexBuffer.get(source+4u));
                        buffer.set(dest+4u,this->vertexBuffer.get(source+5u));
                        buffer.set(dest+5u,this->vertexBuffer.get(source+6u));

                        source+=vboSizeofMesh3D[this->vboType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGB_NxNyNz:
                {
                    //edk::GU::vbo_XYZ_RGBA_NxNyNz -> edk::GU::vbo_XY_RGB_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboCount;i++){
                        buffer.set(dest,this->vertexBuffer.get(source));
                        buffer.set(dest+1u,this->vertexBuffer.get(source+1u));

                        buffer.set(dest+2u,this->vertexBuffer.get(source+3u));
                        buffer.set(dest+3u,this->vertexBuffer.get(source+4u));
                        buffer.set(dest+4u,this->vertexBuffer.get(source+5u));

                        buffer.set(dest+5u,this->vertexBuffer.get(source+7u));
                        buffer.set(dest+6u,this->vertexBuffer.get(source+8u));
                        buffer.set(dest+7u,this->vertexBuffer.get(source+9u));

                        source+=vboSizeofMesh3D[this->vboType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGBA_NxNyNz:
                {
                    //edk::GU::vbo_XYZ_RGBA_NxNyNz -> edk::GU::vbo_XY_RGBA_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboCount;i++){
                        buffer.set(dest,this->vertexBuffer.get(source));
                        buffer.set(dest+1u,this->vertexBuffer.get(source+1u));

                        buffer.set(dest+2u,this->vertexBuffer.get(source+3u));
                        buffer.set(dest+3u,this->vertexBuffer.get(source+4u));
                        buffer.set(dest+4u,this->vertexBuffer.get(source+5u));
                        buffer.set(dest+5u,this->vertexBuffer.get(source+6u));

                        buffer.set(dest+6u,this->vertexBuffer.get(source+7u));
                        buffer.set(dest+7u,this->vertexBuffer.get(source+8u));
                        buffer.set(dest+8u,this->vertexBuffer.get(source+9u));

                        source+=vboSizeofMesh3D[this->vboType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGB_NxNyNz_UVxUVy:
                {
                    //edk::GU::vbo_XYZ_RGBA_NxNyNz -> edk::GU::vbo_XY_RGB_NxNyNz_UVxUVy
                    for(edk::uint32 i=0u;i<this->vboCount;i++){
                        buffer.set(dest,this->vertexBuffer.get(source));
                        buffer.set(dest+1u,this->vertexBuffer.get(source+1u));

                        buffer.set(dest+2u,this->vertexBuffer.get(source+3u));
                        buffer.set(dest+3u,this->vertexBuffer.get(source+4u));
                        buffer.set(dest+4u,this->vertexBuffer.get(source+5u));

                        buffer.set(dest+5u,this->vertexBuffer.get(source+7u));
                        buffer.set(dest+6u,this->vertexBuffer.get(source+8u));
                        buffer.set(dest+7u,this->vertexBuffer.get(source+9u));

                        source+=vboSizeofMesh3D[this->vboType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy:
                {
                    //edk::GU::vbo_XYZ_RGBA_NxNyNz -> edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy
                    for(edk::uint32 i=0u;i<this->vboCount;i++){
                        buffer.set(dest,this->vertexBuffer.get(source));
                        buffer.set(dest+1u,this->vertexBuffer.get(source+1u));

                        buffer.set(dest+2u,this->vertexBuffer.get(source+3u));
                        buffer.set(dest+3u,this->vertexBuffer.get(source+4u));
                        buffer.set(dest+4u,this->vertexBuffer.get(source+5u));
                        buffer.set(dest+5u,this->vertexBuffer.get(source+6u));

                        buffer.set(dest+6u,this->vertexBuffer.get(source+7u));
                        buffer.set(dest+7u,this->vertexBuffer.get(source+8u));
                        buffer.set(dest+8u,this->vertexBuffer.get(source+9u));

                        source+=vboSizeofMesh3D[this->vboType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ:
                {
                    //edk::GU::vbo_XYZ_RGBA_NxNyNz -> edk::GU::vbo_XYZ
                    for(edk::uint32 i=0u;i<this->vboCount;i++){
                        buffer.set(dest,this->vertexBuffer.get(source));
                        buffer.set(dest+1u,this->vertexBuffer.get(source+1u));
                        buffer.set(dest+2u,this->vertexBuffer.get(source+2u));

                        source+=vboSizeofMesh3D[this->vboType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_NxNyNz:
                {
                    //edk::GU::vbo_XYZ_RGBA_NxNyNz -> edk::GU::vbo_XYZ_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboCount;i++){
                        buffer.set(dest,this->vertexBuffer.get(source));
                        buffer.set(dest+1u,this->vertexBuffer.get(source+1u));
                        buffer.set(dest+2u,this->vertexBuffer.get(source+2u));

                        buffer.set(dest+3u,this->vertexBuffer.get(source+7u));
                        buffer.set(dest+4u,this->vertexBuffer.get(source+8u));
                        buffer.set(dest+5u,this->vertexBuffer.get(source+9u));

                        source+=vboSizeofMesh3D[this->vboType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGB:
                {
                    //edk::GU::vbo_XYZ_RGBA_NxNyNz -> edk::GU::vbo_XYZ_RGB
                    for(edk::uint32 i=0u;i<this->vboCount;i++){
                        buffer.set(dest,this->vertexBuffer.get(source));
                        buffer.set(dest+1u,this->vertexBuffer.get(source+1u));
                        buffer.set(dest+2u,this->vertexBuffer.get(source+2u));

                        buffer.set(dest+3u,this->vertexBuffer.get(source+3u));
                        buffer.set(dest+4u,this->vertexBuffer.get(source+4u));
                        buffer.set(dest+5u,this->vertexBuffer.get(source+5u));

                        source+=vboSizeofMesh3D[this->vboType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGBA:
                {
                    //edk::GU::vbo_XYZ_RGBA_NxNyNz -> edk::GU::vbo_XYZ_RGBA
                    for(edk::uint32 i=0u;i<this->vboCount;i++){
                        buffer.set(dest,this->vertexBuffer.get(source));
                        buffer.set(dest+1u,this->vertexBuffer.get(source+1u));
                        buffer.set(dest+2u,this->vertexBuffer.get(source+2u));

                        buffer.set(dest+3u,this->vertexBuffer.get(source+3u));
                        buffer.set(dest+4u,this->vertexBuffer.get(source+4u));
                        buffer.set(dest+5u,this->vertexBuffer.get(source+5u));
                        buffer.set(dest+6u,this->vertexBuffer.get(source+6u));

                        source+=vboSizeofMesh3D[this->vboType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGB_NxNyNz:
                {
                    //edk::GU::vbo_XYZ_RGBA_NxNyNz -> edk::GU::vbo_XYZ_RGB_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboCount;i++){
                        buffer.set(dest,this->vertexBuffer.get(source));
                        buffer.set(dest+1u,this->vertexBuffer.get(source+1u));
                        buffer.set(dest+2u,this->vertexBuffer.get(source+2u));

                        buffer.set(dest+3u,this->vertexBuffer.get(source+3u));
                        buffer.set(dest+4u,this->vertexBuffer.get(source+4u));
                        buffer.set(dest+5u,this->vertexBuffer.get(source+5u));

                        buffer.set(dest+6u,this->vertexBuffer.get(source+7u));
                        buffer.set(dest+7u,this->vertexBuffer.get(source+8u));
                        buffer.set(dest+8u,this->vertexBuffer.get(source+9u));

                        source+=vboSizeofMesh3D[this->vboType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGB_NxNyNz_UVxUVy:
                {
                    //edk::GU::vbo_XYZ_RGBA_NxNyNz -> edk::GU::vbo_XYZ_RGB_NxNyNz_UVxUVy
                    for(edk::uint32 i=0u;i<this->vboCount;i++){
                        buffer.set(dest,this->vertexBuffer.get(source));
                        buffer.set(dest+1u,this->vertexBuffer.get(source+1u));
                        buffer.set(dest+2u,this->vertexBuffer.get(source+2u));

                        buffer.set(dest+3u,this->vertexBuffer.get(source+3u));
                        buffer.set(dest+4u,this->vertexBuffer.get(source+4u));
                        buffer.set(dest+5u,this->vertexBuffer.get(source+5u));

                        buffer.set(dest+6u,this->vertexBuffer.get(source+7u));
                        buffer.set(dest+7u,this->vertexBuffer.get(source+8u));
                        buffer.set(dest+8u,this->vertexBuffer.get(source+8u));

                        source+=vboSizeofMesh3D[this->vboType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy:
                {
                    //edk::GU::vbo_XYZ_RGBA_NxNyNz -> edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy
                    for(edk::uint32 i=0u;i<this->vboCount;i++){
                        buffer.set(dest,this->vertexBuffer.get(source));
                        buffer.set(dest+1u,this->vertexBuffer.get(source+1u));
                        buffer.set(dest+2u,this->vertexBuffer.get(source+2u));

                        buffer.set(dest+3u,this->vertexBuffer.get(source+3u));
                        buffer.set(dest+4u,this->vertexBuffer.get(source+4u));
                        buffer.set(dest+5u,this->vertexBuffer.get(source+5u));
                        buffer.set(dest+6u,this->vertexBuffer.get(source+6u));

                        buffer.set(dest+7u,this->vertexBuffer.get(source+7u));
                        buffer.set(dest+8u,this->vertexBuffer.get(source+8u));
                        buffer.set(dest+9u,this->vertexBuffer.get(source+9u));

                        source+=vboSizeofMesh3D[this->vboType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                default:
                    break;
                }
            }
                break;
            case edk::GU::vbo_XYZ_RGB_NxNyNz_UVxUVy:
            {
                switch(type){
                case edk::GU::vbo_XY:
                {
                    //edk::GU::vbo_XYZ_RGB_NxNyNz_UVxUVy -> edk::GU::vbo_XY
                    for(edk::uint32 i=0u;i<this->vboCount;i++){
                        buffer.set(dest,this->vertexBuffer.get(source));
                        buffer.set(dest+1u,this->vertexBuffer.get(source+1u));

                        source+=vboSizeofMesh3D[this->vboType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_NxNyNz:
                {
                    //edk::GU::vbo_XYZ_RGB_NxNyNz_UVxUVy -> edk::GU::vbo_XY_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboCount;i++){
                        buffer.set(dest,this->vertexBuffer.get(source));
                        buffer.set(dest+1u,this->vertexBuffer.get(source+1u));

                        buffer.set(dest+2u,this->vertexBuffer.get(source+6u));
                        buffer.set(dest+3u,this->vertexBuffer.get(source+7u));
                        buffer.set(dest+4u,this->vertexBuffer.get(source+8u));

                        source+=vboSizeofMesh3D[this->vboType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGB:
                {
                    //edk::GU::vbo_XYZ_RGB_NxNyNz_UVxUVy -> edk::GU::vbo_XY_RGB
                    for(edk::uint32 i=0u;i<this->vboCount;i++){
                        buffer.set(dest,this->vertexBuffer.get(source));
                        buffer.set(dest+1u,this->vertexBuffer.get(source+1u));

                        buffer.set(dest+2u,this->vertexBuffer.get(source+3u));
                        buffer.set(dest+3u,this->vertexBuffer.get(source+4u));
                        buffer.set(dest+4u,this->vertexBuffer.get(source+5u));

                        source+=vboSizeofMesh3D[this->vboType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGBA:
                {
                    //edk::GU::vbo_XYZ_RGB_NxNyNz_UVxUVy -> edk::GU::vbo_XY_RGBA
                    for(edk::uint32 i=0u;i<this->vboCount;i++){
                        buffer.set(dest,this->vertexBuffer.get(source));
                        buffer.set(dest+1u,this->vertexBuffer.get(source+1u));

                        buffer.set(dest+2u,this->vertexBuffer.get(source+3u));
                        buffer.set(dest+3u,this->vertexBuffer.get(source+4u));
                        buffer.set(dest+4u,this->vertexBuffer.get(source+5u));

                        source+=vboSizeofMesh3D[this->vboType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGB_NxNyNz:
                {
                    //edk::GU::vbo_XYZ_RGB_NxNyNz_UVxUVy -> edk::GU::vbo_XY_RGB_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboCount;i++){
                        buffer.set(dest,this->vertexBuffer.get(source));
                        buffer.set(dest+1u,this->vertexBuffer.get(source+1u));

                        buffer.set(dest+2u,this->vertexBuffer.get(source+3u));
                        buffer.set(dest+3u,this->vertexBuffer.get(source+4u));
                        buffer.set(dest+4u,this->vertexBuffer.get(source+5u));

                        buffer.set(dest+5u,this->vertexBuffer.get(source+6u));
                        buffer.set(dest+6u,this->vertexBuffer.get(source+7u));
                        buffer.set(dest+7u,this->vertexBuffer.get(source+8u));

                        source+=vboSizeofMesh3D[this->vboType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGBA_NxNyNz:
                {
                    //edk::GU::vbo_XYZ_RGB_NxNyNz_UVxUVy -> edk::GU::vbo_XY_RGBA_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboCount;i++){
                        buffer.set(dest,this->vertexBuffer.get(source));
                        buffer.set(dest+1u,this->vertexBuffer.get(source+1u));

                        buffer.set(dest+2u,this->vertexBuffer.get(source+3u));
                        buffer.set(dest+3u,this->vertexBuffer.get(source+4u));
                        buffer.set(dest+4u,this->vertexBuffer.get(source+5u));

                        buffer.set(dest+6u,this->vertexBuffer.get(source+6u));
                        buffer.set(dest+7u,this->vertexBuffer.get(source+7u));
                        buffer.set(dest+8u,this->vertexBuffer.get(source+8u));

                        source+=vboSizeofMesh3D[this->vboType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGB_NxNyNz_UVxUVy:
                {
                    //edk::GU::vbo_XYZ_RGB_NxNyNz_UVxUVy -> edk::GU::vbo_XY_RGB_NxNyNz_UVxUVy
                    for(edk::uint32 i=0u;i<this->vboCount;i++){
                        buffer.set(dest,this->vertexBuffer.get(source));
                        buffer.set(dest+1u,this->vertexBuffer.get(source+1u));

                        buffer.set(dest+2u,this->vertexBuffer.get(source+3u));
                        buffer.set(dest+3u,this->vertexBuffer.get(source+4u));
                        buffer.set(dest+4u,this->vertexBuffer.get(source+5u));

                        buffer.set(dest+5u,this->vertexBuffer.get(source+6u));
                        buffer.set(dest+6u,this->vertexBuffer.get(source+7u));
                        buffer.set(dest+7u,this->vertexBuffer.get(source+8u));

                        buffer.set(dest+8u,this->vertexBuffer.get(source+9u));
                        buffer.set(dest+9u,this->vertexBuffer.get(source+10u));
                        source+=vboSizeofMesh3D[this->vboType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy:
                {
                    //edk::GU::vbo_XYZ_RGB_NxNyNz_UVxUVy -> edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy
                    for(edk::uint32 i=0u;i<this->vboCount;i++){
                        buffer.set(dest,this->vertexBuffer.get(source));
                        buffer.set(dest+1u,this->vertexBuffer.get(source+1u));

                        buffer.set(dest+2u,this->vertexBuffer.get(source+3u));
                        buffer.set(dest+3u,this->vertexBuffer.get(source+4u));
                        buffer.set(dest+4u,this->vertexBuffer.get(source+5u));

                        buffer.set(dest+6u,this->vertexBuffer.get(source+6u));
                        buffer.set(dest+7u,this->vertexBuffer.get(source+7u));
                        buffer.set(dest+8u,this->vertexBuffer.get(source+8u));

                        buffer.set(dest+9u,this->vertexBuffer.get(source+9u));
                        buffer.set(dest+10u,this->vertexBuffer.get(source+10u));

                        source+=vboSizeofMesh3D[this->vboType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ:
                {
                    //edk::GU::vbo_XYZ_RGB_NxNyNz_UVxUVy -> edk::GU::vbo_XYZ
                    for(edk::uint32 i=0u;i<this->vboCount;i++){
                        buffer.set(dest,this->vertexBuffer.get(source));
                        buffer.set(dest+1u,this->vertexBuffer.get(source+1u));
                        buffer.set(dest+2u,this->vertexBuffer.get(source+2u));

                        source+=vboSizeofMesh3D[this->vboType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_NxNyNz:
                {
                    //edk::GU::vbo_XYZ_RGB_NxNyNz_UVxUVy -> edk::GU::vbo_XYZ_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboCount;i++){
                        buffer.set(dest,this->vertexBuffer.get(source));
                        buffer.set(dest+1u,this->vertexBuffer.get(source+1u));
                        buffer.set(dest+2u,this->vertexBuffer.get(source+2u));

                        buffer.set(dest+3u,this->vertexBuffer.get(source+6u));
                        buffer.set(dest+4u,this->vertexBuffer.get(source+7u));
                        buffer.set(dest+5u,this->vertexBuffer.get(source+8u));

                        source+=vboSizeofMesh3D[this->vboType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGB:
                {
                    //edk::GU::vbo_XYZ_RGB_NxNyNz_UVxUVy -> edk::GU::vbo_XYZ_RGB
                    for(edk::uint32 i=0u;i<this->vboCount;i++){
                        buffer.set(dest,this->vertexBuffer.get(source));
                        buffer.set(dest+1u,this->vertexBuffer.get(source+1u));
                        buffer.set(dest+2u,this->vertexBuffer.get(source+2u));

                        buffer.set(dest+3u,this->vertexBuffer.get(source+3u));
                        buffer.set(dest+4u,this->vertexBuffer.get(source+4u));
                        buffer.set(dest+5u,this->vertexBuffer.get(source+5u));

                        source+=vboSizeofMesh3D[this->vboType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGBA:
                {
                    //edk::GU::vbo_XYZ_RGB_NxNyNz_UVxUVy -> edk::GU::vbo_XYZ_RGBA
                    for(edk::uint32 i=0u;i<this->vboCount;i++){
                        buffer.set(dest,this->vertexBuffer.get(source));
                        buffer.set(dest+1u,this->vertexBuffer.get(source+1u));
                        buffer.set(dest+2u,this->vertexBuffer.get(source+2u));

                        buffer.set(dest+3u,this->vertexBuffer.get(source+3u));
                        buffer.set(dest+4u,this->vertexBuffer.get(source+4u));
                        buffer.set(dest+5u,this->vertexBuffer.get(source+5u));

                        source+=vboSizeofMesh3D[this->vboType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGB_NxNyNz:
                {
                    //edk::GU::vbo_XYZ_RGB_NxNyNz_UVxUVy -> edk::GU::vbo_XYZ_RGB_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboCount;i++){
                        buffer.set(dest,this->vertexBuffer.get(source));
                        buffer.set(dest+1u,this->vertexBuffer.get(source+1u));
                        buffer.set(dest+2u,this->vertexBuffer.get(source+2u));

                        buffer.set(dest+3u,this->vertexBuffer.get(source+3u));
                        buffer.set(dest+4u,this->vertexBuffer.get(source+4u));
                        buffer.set(dest+5u,this->vertexBuffer.get(source+5u));

                        buffer.set(dest+6u,this->vertexBuffer.get(source+6u));
                        buffer.set(dest+7u,this->vertexBuffer.get(source+7u));
                        buffer.set(dest+8u,this->vertexBuffer.get(source+8u));

                        source+=vboSizeofMesh3D[this->vboType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGBA_NxNyNz:
                {
                    //edk::GU::vbo_XYZ_RGB_NxNyNz_UVxUVy -> edk::GU::vbo_XYZ_RGBA_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboCount;i++){
                        buffer.set(dest,this->vertexBuffer.get(source));
                        buffer.set(dest+1u,this->vertexBuffer.get(source+1u));
                        buffer.set(dest+2u,this->vertexBuffer.get(source+2u));

                        buffer.set(dest+3u,this->vertexBuffer.get(source+3u));
                        buffer.set(dest+4u,this->vertexBuffer.get(source+4u));
                        buffer.set(dest+5u,this->vertexBuffer.get(source+5u));

                        buffer.set(dest+7u,this->vertexBuffer.get(source+6u));
                        buffer.set(dest+8u,this->vertexBuffer.get(source+7u));
                        buffer.set(dest+9u,this->vertexBuffer.get(source+8u));

                        source+=vboSizeofMesh3D[this->vboType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy:
                {
                    //edk::GU::vbo_XYZ_RGB_NxNyNz_UVxUVy -> edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy
                    for(edk::uint32 i=0u;i<this->vboCount;i++){
                        buffer.set(dest,this->vertexBuffer.get(source));
                        buffer.set(dest+1u,this->vertexBuffer.get(source+1u));
                        buffer.set(dest+2u,this->vertexBuffer.get(source+2u));

                        buffer.set(dest+3u,this->vertexBuffer.get(source+3u));
                        buffer.set(dest+4u,this->vertexBuffer.get(source+4u));
                        buffer.set(dest+5u,this->vertexBuffer.get(source+5u));

                        buffer.set(dest+7u,this->vertexBuffer.get(source+6u));
                        buffer.set(dest+8u,this->vertexBuffer.get(source+7u));
                        buffer.set(dest+9u,this->vertexBuffer.get(source+8u));

                        buffer.set(dest+10u,this->vertexBuffer.get(source+9u));
                        buffer.set(dest+11u,this->vertexBuffer.get(source+10u));

                        source+=vboSizeofMesh3D[this->vboType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                default:
                    break;
                }
            }
                break;
            case edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy:
            {
                switch(type){
                case edk::GU::vbo_XY:
                {
                    //edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy -> edk::GU::vbo_XY
                    for(edk::uint32 i=0u;i<this->vboCount;i++){
                        buffer.set(dest,this->vertexBuffer.get(source));
                        buffer.set(dest+1u,this->vertexBuffer.get(source+1u));

                        source+=vboSizeofMesh3D[this->vboType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_NxNyNz:
                {
                    //edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy -> edk::GU::vbo_XY_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboCount;i++){
                        buffer.set(dest,this->vertexBuffer.get(source));
                        buffer.set(dest+1u,this->vertexBuffer.get(source+1u));

                        buffer.set(dest+2u,this->vertexBuffer.get(source+7u));
                        buffer.set(dest+3u,this->vertexBuffer.get(source+8u));
                        buffer.set(dest+4u,this->vertexBuffer.get(source+9u));

                        source+=vboSizeofMesh3D[this->vboType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGB:
                {
                    //edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy -> edk::GU::vbo_XY_RGB
                    for(edk::uint32 i=0u;i<this->vboCount;i++){
                        buffer.set(dest,this->vertexBuffer.get(source));
                        buffer.set(dest+1u,this->vertexBuffer.get(source+1u));

                        buffer.set(dest+2u,this->vertexBuffer.get(source+3u));
                        buffer.set(dest+3u,this->vertexBuffer.get(source+4u));
                        buffer.set(dest+4u,this->vertexBuffer.get(source+5u));

                        source+=vboSizeofMesh3D[this->vboType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGBA:
                {
                    //edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy -> edk::GU::vbo_XY_RGBA
                    for(edk::uint32 i=0u;i<this->vboCount;i++){
                        buffer.set(dest,this->vertexBuffer.get(source));
                        buffer.set(dest+1u,this->vertexBuffer.get(source+1u));

                        buffer.set(dest+2u,this->vertexBuffer.get(source+3u));
                        buffer.set(dest+3u,this->vertexBuffer.get(source+4u));
                        buffer.set(dest+4u,this->vertexBuffer.get(source+5u));
                        buffer.set(dest+5u,this->vertexBuffer.get(source+6u));

                        source+=vboSizeofMesh3D[this->vboType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGB_NxNyNz:
                {
                    //edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy -> edk::GU::vbo_XY_RGB_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboCount;i++){
                        buffer.set(dest,this->vertexBuffer.get(source));
                        buffer.set(dest+1u,this->vertexBuffer.get(source+1u));

                        buffer.set(dest+2u,this->vertexBuffer.get(source+3u));
                        buffer.set(dest+3u,this->vertexBuffer.get(source+4u));
                        buffer.set(dest+4u,this->vertexBuffer.get(source+5u));

                        buffer.set(dest+5u,this->vertexBuffer.get(source+7u));
                        buffer.set(dest+6u,this->vertexBuffer.get(source+8u));
                        buffer.set(dest+7u,this->vertexBuffer.get(source+9u));

                        source+=vboSizeofMesh3D[this->vboType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGBA_NxNyNz:
                {
                    //edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy -> edk::GU::vbo_XY_RGBA_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboCount;i++){
                        buffer.set(dest,this->vertexBuffer.get(source));
                        buffer.set(dest+1u,this->vertexBuffer.get(source+1u));

                        buffer.set(dest+2u,this->vertexBuffer.get(source+3u));
                        buffer.set(dest+3u,this->vertexBuffer.get(source+4u));
                        buffer.set(dest+4u,this->vertexBuffer.get(source+5u));
                        buffer.set(dest+5u,this->vertexBuffer.get(source+6u));

                        buffer.set(dest+6u,this->vertexBuffer.get(source+7u));
                        buffer.set(dest+7u,this->vertexBuffer.get(source+8u));
                        buffer.set(dest+8u,this->vertexBuffer.get(source+9u));

                        source+=vboSizeofMesh3D[this->vboType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGB_NxNyNz_UVxUVy:
                {
                    //edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy -> edk::GU::vbo_XY_RGB_NxNyNz_UVxUVy
                    for(edk::uint32 i=0u;i<this->vboCount;i++){
                        buffer.set(dest,this->vertexBuffer.get(source));
                        buffer.set(dest+1u,this->vertexBuffer.get(source+1u));

                        buffer.set(dest+2u,this->vertexBuffer.get(source+3u));
                        buffer.set(dest+3u,this->vertexBuffer.get(source+4u));
                        buffer.set(dest+4u,this->vertexBuffer.get(source+5u));

                        buffer.set(dest+5u,this->vertexBuffer.get(source+7u));
                        buffer.set(dest+6u,this->vertexBuffer.get(source+8u));
                        buffer.set(dest+7u,this->vertexBuffer.get(source+9u));

                        buffer.set(dest+8u,this->vertexBuffer.get(source+10u));
                        buffer.set(dest+9u,this->vertexBuffer.get(source+11u));

                        source+=vboSizeofMesh3D[this->vboType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy:
                {
                    //edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy -> edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy
                    for(edk::uint32 i=0u;i<this->vboCount;i++){
                        buffer.set(dest,this->vertexBuffer.get(source));
                        buffer.set(dest+1u,this->vertexBuffer.get(source+1u));

                        buffer.set(dest+2u,this->vertexBuffer.get(source+3u));
                        buffer.set(dest+3u,this->vertexBuffer.get(source+4u));
                        buffer.set(dest+4u,this->vertexBuffer.get(source+5u));
                        buffer.set(dest+5u,this->vertexBuffer.get(source+6u));

                        buffer.set(dest+6u,this->vertexBuffer.get(source+7u));
                        buffer.set(dest+7u,this->vertexBuffer.get(source+8u));
                        buffer.set(dest+8u,this->vertexBuffer.get(source+9u));

                        buffer.set(dest+9u,this->vertexBuffer.get(source+10u));
                        buffer.set(dest+10u,this->vertexBuffer.get(source+11u));

                        source+=vboSizeofMesh3D[this->vboType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ:
                {
                    //edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy -> edk::GU::vbo_XYZ
                    for(edk::uint32 i=0u;i<this->vboCount;i++){
                        buffer.set(dest,this->vertexBuffer.get(source));
                        buffer.set(dest+1u,this->vertexBuffer.get(source+1u));
                        buffer.set(dest+2u,this->vertexBuffer.get(source+2u));

                        source+=vboSizeofMesh3D[this->vboType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_NxNyNz:
                {
                    //edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy -> edk::GU::vbo_XYZ_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboCount;i++){
                        buffer.set(dest,this->vertexBuffer.get(source));
                        buffer.set(dest+1u,this->vertexBuffer.get(source+1u));
                        buffer.set(dest+2u,this->vertexBuffer.get(source+2u));

                        buffer.set(dest+3u,this->vertexBuffer.get(source+7u));
                        buffer.set(dest+4u,this->vertexBuffer.get(source+8u));
                        buffer.set(dest+5u,this->vertexBuffer.get(source+9u));

                        source+=vboSizeofMesh3D[this->vboType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGB:
                {
                    //edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy -> edk::GU::vbo_XYZ_RGB
                    for(edk::uint32 i=0u;i<this->vboCount;i++){
                        buffer.set(dest,this->vertexBuffer.get(source));
                        buffer.set(dest+1u,this->vertexBuffer.get(source+1u));
                        buffer.set(dest+2u,this->vertexBuffer.get(source+2u));

                        buffer.set(dest+3u,this->vertexBuffer.get(source+3u));
                        buffer.set(dest+4u,this->vertexBuffer.get(source+4u));
                        buffer.set(dest+5u,this->vertexBuffer.get(source+5u));

                        source+=vboSizeofMesh3D[this->vboType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGBA:
                {
                    //edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy -> edk::GU::vbo_XYZ_RGBA
                    for(edk::uint32 i=0u;i<this->vboCount;i++){
                        buffer.set(dest,this->vertexBuffer.get(source));
                        buffer.set(dest+1u,this->vertexBuffer.get(source+1u));
                        buffer.set(dest+2u,this->vertexBuffer.get(source+2u));

                        buffer.set(dest+3u,this->vertexBuffer.get(source+3u));
                        buffer.set(dest+4u,this->vertexBuffer.get(source+4u));
                        buffer.set(dest+5u,this->vertexBuffer.get(source+5u));
                        buffer.set(dest+6u,this->vertexBuffer.get(source+6u));

                        source+=vboSizeofMesh3D[this->vboType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGB_NxNyNz:
                {
                    //edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy -> edk::GU::vbo_XYZ_RGB_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboCount;i++){
                        buffer.set(dest,this->vertexBuffer.get(source));
                        buffer.set(dest+1u,this->vertexBuffer.get(source+1u));
                        buffer.set(dest+2u,this->vertexBuffer.get(source+2u));

                        buffer.set(dest+3u,this->vertexBuffer.get(source+3u));
                        buffer.set(dest+4u,this->vertexBuffer.get(source+4u));
                        buffer.set(dest+5u,this->vertexBuffer.get(source+5u));

                        buffer.set(dest+6u,this->vertexBuffer.get(source+7u));
                        buffer.set(dest+7u,this->vertexBuffer.get(source+8u));
                        buffer.set(dest+8u,this->vertexBuffer.get(source+9u));

                        source+=vboSizeofMesh3D[this->vboType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGBA_NxNyNz:
                {
                    //edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy -> edk::GU::vbo_XYZ_RGBA_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboCount;i++){
                        buffer.set(dest,this->vertexBuffer.get(source));
                        buffer.set(dest+1u,this->vertexBuffer.get(source+1u));
                        buffer.set(dest+2u,this->vertexBuffer.get(source+2u));

                        buffer.set(dest+3u,this->vertexBuffer.get(source+3u));
                        buffer.set(dest+4u,this->vertexBuffer.get(source+4u));
                        buffer.set(dest+5u,this->vertexBuffer.get(source+5u));
                        buffer.set(dest+6u,this->vertexBuffer.get(source+6u));

                        buffer.set(dest+7u,this->vertexBuffer.get(source+7u));
                        buffer.set(dest+8u,this->vertexBuffer.get(source+8u));
                        buffer.set(dest+9u,this->vertexBuffer.get(source+9u));

                        source+=vboSizeofMesh3D[this->vboType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGB_NxNyNz_UVxUVy:
                {
                    //edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy -> edk::GU::vbo_XYZ_RGB_NxNyNz_UVxUVy
                    for(edk::uint32 i=0u;i<this->vboCount;i++){
                        buffer.set(dest,this->vertexBuffer.get(source));
                        buffer.set(dest+1u,this->vertexBuffer.get(source+1u));
                        buffer.set(dest+2u,this->vertexBuffer.get(source+2u));

                        buffer.set(dest+3u,this->vertexBuffer.get(source+3u));
                        buffer.set(dest+4u,this->vertexBuffer.get(source+4u));
                        buffer.set(dest+5u,this->vertexBuffer.get(source+5u));

                        buffer.set(dest+6u,this->vertexBuffer.get(source+7u));
                        buffer.set(dest+7u,this->vertexBuffer.get(source+8u));
                        buffer.set(dest+8u,this->vertexBuffer.get(source+9u));

                        buffer.set(dest+9u,this->vertexBuffer.get(source+10u));
                        buffer.set(dest+10u,this->vertexBuffer.get(source+11u));

                        source+=vboSizeofMesh3D[this->vboType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                default:
                    break;
                }
            }
                break;
            default:
                break;
            }
            //clone the buffer
            this->vertexBuffer.cloneFrom(&buffer);
            this->vboType = type;
            //set the update funtions
            this->updateVBOFunctions();
            return true;
        }
    }
    return false;
}
bool edk::shape::Polygon3DList::changeVBOWithMatrix(edk::GU::VBOType type){
    if(this->canUseVBO && type != this->vboWithMatrixType && type!=edk::GU::vbo_NULL && type<edk::GU::vbo_Size){
        edk::vector::Array<edk::float32> buffer;
        if(buffer.createArray(this->vboWithMatrixCount * vboSizeofMesh3D[type])){
            edk::uint32 increment = vboSizeofMesh3D[type];
            edk::uint32 size = this->vboWithMatrixCount*increment;
            //clean the vertexBuffer
            switch(type){
            case edk::GU::vbo_XY:
                for(edk::uint32 i=0u;i<size;i+=increment){
                    buffer.set(i,0.f);
                    buffer.set(i+1u,0.f);
                }
                break;
            case edk::GU::vbo_XY_NxNyNz:
                for(edk::uint32 i=0u;i<size;i+=increment){
                    buffer.set(i,0.f);
                    buffer.set(i+1u,0.f);

                    buffer.set(i+2u,0.f);
                    buffer.set(i+3u,0.f);
                    buffer.set(i+4u,1.f);
                }
                break;
            case edk::GU::vbo_XY_RGB:
                for(edk::uint32 i=0u;i<size;i+=increment){
                    buffer.set(i,0.f);
                    buffer.set(i+1u,0.f);

                    buffer.set(i+2u,1.f);
                    buffer.set(i+3u,1.f);
                    buffer.set(i+4u,1.f);
                }
                break;
            case edk::GU::vbo_XY_RGBA:
                for(edk::uint32 i=0u;i<size;i+=increment){
                    buffer.set(i,0.f);
                    buffer.set(i+1u,0.f);

                    buffer.set(i+2u,1.f);
                    buffer.set(i+3u,1.f);
                    buffer.set(i+4u,1.f);
                    buffer.set(i+5u,1.f);
                }
                break;
            case edk::GU::vbo_XY_RGB_NxNyNz:
                for(edk::uint32 i=0u;i<size;i+=increment){
                    buffer.set(i,0.f);
                    buffer.set(i+1u,0.f);

                    buffer.set(i+2u,1.f);
                    buffer.set(i+3u,1.f);
                    buffer.set(i+4u,1.f);

                    buffer.set(i+5u,0.f);
                    buffer.set(i+6u,0.f);
                    buffer.set(i+7u,1.f);
                }
                break;
            case edk::GU::vbo_XY_RGBA_NxNyNz:
                for(edk::uint32 i=0u;i<size;i+=increment){
                    buffer.set(i,0.f);
                    buffer.set(i+1u,0.f);

                    buffer.set(i+2u,1.f);
                    buffer.set(i+3u,1.f);
                    buffer.set(i+4u,1.f);
                    buffer.set(i+5u,1.f);

                    buffer.set(i+6u,0.f);
                    buffer.set(i+7u,0.f);
                    buffer.set(i+8u,1.f);
                }
                break;
            case edk::GU::vbo_XY_RGB_NxNyNz_UVxUVy:
                for(edk::uint32 i=0u;i<size;i+=increment){
                    buffer.set(i,0.f);
                    buffer.set(i+1u,0.f);

                    buffer.set(i+2u,1.f);
                    buffer.set(i+3u,1.f);
                    buffer.set(i+4u,1.f);

                    buffer.set(i+5u,0.f);
                    buffer.set(i+6u,0.f);
                    buffer.set(i+7u,1.f);

                    buffer.set(i+8u,0.f);
                    buffer.set(i+9u,0.f);
                }
                break;
            case edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy:
                for(edk::uint32 i=0u;i<size;i+=increment){
                    buffer.set(i,0.f);
                    buffer.set(i+1u,0.f);

                    buffer.set(i+2u,1.f);
                    buffer.set(i+3u,1.f);
                    buffer.set(i+4u,1.f);
                    buffer.set(i+5u,1.f);

                    buffer.set(i+6u,0.f);
                    buffer.set(i+7u,0.f);
                    buffer.set(i+8u,1.f);

                    buffer.set(i+9u,0.f);
                    buffer.set(i+10u,0.f);
                }
                break;
            case edk::GU::vbo_XYZ:
                for(edk::uint32 i=0u;i<size;i+=increment){
                    buffer.set(i,0.f);
                    buffer.set(i+1u,0.f);
                    buffer.set(i+2u,0.f);
                }
                break;
            case edk::GU::vbo_XYZ_NxNyNz:
                for(edk::uint32 i=0u;i<size;i+=increment){
                    buffer.set(i,0.f);
                    buffer.set(i+1u,0.f);
                    buffer.set(i+2u,0.f);

                    buffer.set(i+3u,0.f);
                    buffer.set(i+4u,0.f);
                    buffer.set(i+5u,1.f);
                }
                break;
            case edk::GU::vbo_XYZ_RGB:
                for(edk::uint32 i=0u;i<size;i+=increment){
                    buffer.set(i,0.f);
                    buffer.set(i+1u,0.f);
                    buffer.set(i+2u,0.f);

                    buffer.set(i+3u,1.f);
                    buffer.set(i+4u,1.f);
                    buffer.set(i+5u,1.f);
                }
                break;
            case edk::GU::vbo_XYZ_RGBA:
                for(edk::uint32 i=0u;i<size;i+=increment){
                    buffer.set(i,0.f);
                    buffer.set(i+1u,0.f);
                    buffer.set(i+2u,0.f);

                    buffer.set(i+3u,1.f);
                    buffer.set(i+4u,1.f);
                    buffer.set(i+5u,1.f);
                    buffer.set(i+6u,1.f);
                }
                break;
            case edk::GU::vbo_XYZ_RGB_NxNyNz:
                for(edk::uint32 i=0u;i<size;i+=increment){
                    buffer.set(i,0.f);
                    buffer.set(i+1u,0.f);
                    buffer.set(i+2u,0.f);

                    buffer.set(i+3u,1.f);
                    buffer.set(i+4u,1.f);
                    buffer.set(i+5u,1.f);

                    buffer.set(i+6u,0.f);
                    buffer.set(i+7u,0.f);
                    buffer.set(i+8u,1.f);
                }
                break;
            case edk::GU::vbo_XYZ_RGBA_NxNyNz:
                for(edk::uint32 i=0u;i<size;i+=increment){
                    buffer.set(i,0.f);
                    buffer.set(i+1u,0.f);
                    buffer.set(i+2u,0.f);

                    buffer.set(i+3u,1.f);
                    buffer.set(i+4u,1.f);
                    buffer.set(i+5u,1.f);
                    buffer.set(i+6u,1.f);

                    buffer.set(i+7u,0.f);
                    buffer.set(i+8u,0.f);
                    buffer.set(i+9u,1.f);
                }
                break;
            case edk::GU::vbo_XYZ_RGB_NxNyNz_UVxUVy:
                for(edk::uint32 i=0u;i<size;i+=increment){
                    buffer.set(i,0.f);
                    buffer.set(i+1u,0.f);
                    buffer.set(i+2u,0.f);

                    buffer.set(i+3u,1.f);
                    buffer.set(i+4u,1.f);
                    buffer.set(i+5u,1.f);

                    buffer.set(i+6u,0.f);
                    buffer.set(i+7u,0.f);
                    buffer.set(i+8u,1.f);

                    buffer.set(i+9u,0.f);
                    buffer.set(i+10u,0.f);
                }
                break;
            case edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy:
                for(edk::uint32 i=0u;i<size;i+=increment){
                    buffer.set(i,0.f);
                    buffer.set(i+1u,0.f);
                    buffer.set(i+2u,0.f);

                    buffer.set(i+3u,1.f);
                    buffer.set(i+4u,1.f);
                    buffer.set(i+5u,1.f);
                    buffer.set(i+6u,1.f);

                    buffer.set(i+7u,0.f);
                    buffer.set(i+8u,0.f);
                    buffer.set(i+9u,1.f);

                    buffer.set(i+10u,0.f);
                    buffer.set(i+11u,0.f);
                }
                break;
            default:
                break;
            }

            edk::uint32 source=0u,dest=0u;
            //
            switch(this->vboWithMatrixType){
            case edk::GU::vbo_XY:
            {
                for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
                    buffer.set(dest,this->vertexBufferWithMatrix.get(source));
                    buffer.set(dest+1u,this->vertexBufferWithMatrix.get(source+1u));

                    source+=vboSizeofMesh3D[this->vboWithMatrixType];
                    dest+=vboSizeofMesh3D[type];
                }
            }
                break;
            case edk::GU::vbo_XY_NxNyNz:
            {
                switch(type){
                case edk::GU::vbo_XY:
                {
                    //vbo_XY_NxNyNz -> edk::GU::vbo_XY
                    for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
                        buffer.set(dest,this->vertexBufferWithMatrix.get(source));
                        buffer.set(dest+1u,this->vertexBufferWithMatrix.get(source+1u));

                        source+=vboSizeofMesh3D[this->vboWithMatrixType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGB:
                {
                    //vbo_XY_NxNyNz -> edk::GU::vbo_XY_RGB
                    for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
                        buffer.set(dest,this->vertexBufferWithMatrix.get(source));
                        buffer.set(dest+1u,this->vertexBufferWithMatrix.get(source+1u));

                        source+=vboSizeofMesh3D[this->vboWithMatrixType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGBA:
                {
                    //vbo_XY_NxNyNz -> edk::GU::vbo_XY_RGBA
                    for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
                        buffer.set(dest,this->vertexBufferWithMatrix.get(source));
                        buffer.set(dest+1u,this->vertexBufferWithMatrix.get(source+1u));

                        source+=vboSizeofMesh3D[this->vboWithMatrixType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGB_NxNyNz:
                {
                    //vbo_XY_NxNyNz -> edk::GU::vbo_XY_RGB_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
                        buffer.set(dest,this->vertexBufferWithMatrix.get(source));
                        buffer.set(dest+1u,this->vertexBufferWithMatrix.get(source+1u));

                        buffer.set(dest+5u,this->vertexBufferWithMatrix.get(source+2u));
                        buffer.set(dest+6u,this->vertexBufferWithMatrix.get(source+3u));
                        buffer.set(dest+7u,this->vertexBufferWithMatrix.get(source+4u));

                        source+=vboSizeofMesh3D[this->vboWithMatrixType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGBA_NxNyNz:
                {
                    //vbo_XY_NxNyNz -> edk::GU::vbo_XY_RGBA_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
                        buffer.set(dest,this->vertexBufferWithMatrix.get(source));
                        buffer.set(dest+1u,this->vertexBufferWithMatrix.get(source+1u));

                        buffer.set(dest+6u,this->vertexBufferWithMatrix.get(source+2u));
                        buffer.set(dest+7u,this->vertexBufferWithMatrix.get(source+3u));
                        buffer.set(dest+8u,this->vertexBufferWithMatrix.get(source+4u));

                        source+=vboSizeofMesh3D[this->vboWithMatrixType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGB_NxNyNz_UVxUVy:
                {
                    //vbo_XY_NxNyNz -> edk::GU::vbo_XY_RGB_NxNyNz_UVxUVy
                    for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
                        buffer.set(dest,this->vertexBufferWithMatrix.get(source));
                        buffer.set(dest+1u,this->vertexBufferWithMatrix.get(source+1u));

                        buffer.set(dest+5u,this->vertexBufferWithMatrix.get(source+2u));
                        buffer.set(dest+6u,this->vertexBufferWithMatrix.get(source+3u));
                        buffer.set(dest+7u,this->vertexBufferWithMatrix.get(source+4u));

                        source+=vboSizeofMesh3D[this->vboWithMatrixType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy:
                {
                    //vbo_XY_NxNyNz -> edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy
                    for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
                        buffer.set(dest,this->vertexBufferWithMatrix.get(source));
                        buffer.set(dest+1u,this->vertexBufferWithMatrix.get(source+1u));

                        buffer.set(dest+6u,this->vertexBufferWithMatrix.get(source+2u));
                        buffer.set(dest+7u,this->vertexBufferWithMatrix.get(source+3u));
                        buffer.set(dest+8u,this->vertexBufferWithMatrix.get(source+4u));

                        source+=vboSizeofMesh3D[this->vboWithMatrixType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ:
                {
                    //vbo_XY_NxNyNz -> edk::GU::vbo_XYZ
                    for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
                        buffer.set(dest,this->vertexBufferWithMatrix.get(source));
                        buffer.set(dest+1u,this->vertexBufferWithMatrix.get(source+1u));

                        source+=vboSizeofMesh3D[this->vboWithMatrixType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_NxNyNz:
                {
                    //vbo_XY_NxNyNz -> edk::GU::vbo_XYZ_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
                        buffer.set(dest,this->vertexBufferWithMatrix.get(source));
                        buffer.set(dest+1u,this->vertexBufferWithMatrix.get(source+1u));

                        buffer.set(dest+3u,this->vertexBufferWithMatrix.get(source+2u));
                        buffer.set(dest+4u,this->vertexBufferWithMatrix.get(source+3u));
                        buffer.set(dest+5u,this->vertexBufferWithMatrix.get(source+4u));

                        source+=vboSizeofMesh3D[this->vboWithMatrixType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGB:
                {
                    //vbo_XY_NxNyNz -> edk::GU::vbo_XYZ_RGB
                    for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
                        buffer.set(dest,this->vertexBufferWithMatrix.get(source));
                        buffer.set(dest+1u,this->vertexBufferWithMatrix.get(source+1u));

                        source+=vboSizeofMesh3D[this->vboWithMatrixType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGBA:
                {
                    //vbo_XY_NxNyNz -> edk::GU::vbo_XYZ_RGBA
                    for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
                        buffer.set(dest,this->vertexBufferWithMatrix.get(source));
                        buffer.set(dest+1u,this->vertexBufferWithMatrix.get(source+1u));

                        source+=vboSizeofMesh3D[this->vboWithMatrixType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGB_NxNyNz:
                {
                    //vbo_XY_NxNyNz -> edk::GU::vbo_XYZ_RGB_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
                        buffer.set(dest,this->vertexBufferWithMatrix.get(source));
                        buffer.set(dest+1u,this->vertexBufferWithMatrix.get(source+1u));

                        buffer.set(dest+6u,this->vertexBufferWithMatrix.get(source+2u));
                        buffer.set(dest+7u,this->vertexBufferWithMatrix.get(source+3u));
                        buffer.set(dest+8u,this->vertexBufferWithMatrix.get(source+4u));

                        source+=vboSizeofMesh3D[this->vboWithMatrixType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGBA_NxNyNz:
                {
                    //vbo_XY_NxNyNz -> edk::GU::vbo_XYZ_RGBA_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
                        buffer.set(dest,this->vertexBufferWithMatrix.get(source));
                        buffer.set(dest+1u,this->vertexBufferWithMatrix.get(source+1u));

                        buffer.set(dest+7u,this->vertexBufferWithMatrix.get(source+2u));
                        buffer.set(dest+8u,this->vertexBufferWithMatrix.get(source+3u));
                        buffer.set(dest+9u,this->vertexBufferWithMatrix.get(source+4u));

                        source+=vboSizeofMesh3D[this->vboWithMatrixType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGB_NxNyNz_UVxUVy:
                {
                    //vbo_XY_NxNyNz -> edk::GU::vbo_XYZ_RGB_NxNyNz_UVxUVy
                    for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
                        buffer.set(dest,this->vertexBufferWithMatrix.get(source));
                        buffer.set(dest+1u,this->vertexBufferWithMatrix.get(source+1u));

                        buffer.set(dest+6u,this->vertexBufferWithMatrix.get(source+2u));
                        buffer.set(dest+7u,this->vertexBufferWithMatrix.get(source+3u));
                        buffer.set(dest+8u,this->vertexBufferWithMatrix.get(source+4u));

                        source+=vboSizeofMesh3D[this->vboWithMatrixType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy:
                {
                    //vbo_XY_NxNyNz -> edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy
                    for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
                        buffer.set(dest,this->vertexBufferWithMatrix.get(source));
                        buffer.set(dest+1u,this->vertexBufferWithMatrix.get(source+1u));

                        buffer.set(dest+7u,this->vertexBufferWithMatrix.get(source+2u));
                        buffer.set(dest+8u,this->vertexBufferWithMatrix.get(source+3u));
                        buffer.set(dest+9u,this->vertexBufferWithMatrix.get(source+4u));

                        source+=vboSizeofMesh3D[this->vboWithMatrixType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                default:
                    break;
                }
            }
                break;
            case edk::GU::vbo_XY_RGB:
            {
                switch(type){
                case edk::GU::vbo_XY:
                {
                    //edk::GU::vbo_XY_RGB -> edk::GU::vbo_XY
                    for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
                        buffer.set(dest,this->vertexBufferWithMatrix.get(source));
                        buffer.set(dest+1u,this->vertexBufferWithMatrix.get(source+1u));

                        source+=vboSizeofMesh3D[this->vboWithMatrixType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_NxNyNz:
                {
                    //edk::GU::vbo_XY_RGB -> edk::GU::vbo_XY_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
                        buffer.set(dest,this->vertexBufferWithMatrix.get(source));
                        buffer.set(dest+1u,this->vertexBufferWithMatrix.get(source+1u));

                        source+=vboSizeofMesh3D[this->vboWithMatrixType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGBA:
                {
                    //edk::GU::vbo_XY_RGB -> edk::GU::vbo_XY_RGBA
                    for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
                        buffer.set(dest,this->vertexBufferWithMatrix.get(source));
                        buffer.set(dest+1u,this->vertexBufferWithMatrix.get(source+1u));

                        buffer.set(dest+3u,this->vertexBufferWithMatrix.get(source+2u));
                        buffer.set(dest+4u,this->vertexBufferWithMatrix.get(source+3u));
                        buffer.set(dest+5u,this->vertexBufferWithMatrix.get(source+4u));

                        source+=vboSizeofMesh3D[this->vboWithMatrixType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGB_NxNyNz:
                {
                    //edk::GU::vbo_XY_RGB -> edk::GU::vbo_XY_RGB_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
                        buffer.set(dest,this->vertexBufferWithMatrix.get(source));
                        buffer.set(dest+1u,this->vertexBufferWithMatrix.get(source+1u));

                        buffer.set(dest+2u,this->vertexBufferWithMatrix.get(source+2u));
                        buffer.set(dest+3u,this->vertexBufferWithMatrix.get(source+3u));
                        buffer.set(dest+4u,this->vertexBufferWithMatrix.get(source+4u));

                        source+=vboSizeofMesh3D[this->vboWithMatrixType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGBA_NxNyNz:
                {
                    //edk::GU::vbo_XY_RGB -> edk::GU::vbo_XY_RGBA_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
                        buffer.set(dest,this->vertexBufferWithMatrix.get(source));
                        buffer.set(dest+1u,this->vertexBufferWithMatrix.get(source+1u));

                        buffer.set(dest+2u,this->vertexBufferWithMatrix.get(source+2u));
                        buffer.set(dest+3u,this->vertexBufferWithMatrix.get(source+3u));
                        buffer.set(dest+4u,this->vertexBufferWithMatrix.get(source+4u));

                        source+=vboSizeofMesh3D[this->vboWithMatrixType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGB_NxNyNz_UVxUVy:
                {
                    //edk::GU::vbo_XY_RGB -> edk::GU::vbo_XY_RGB_NxNyNz_UVxUVy
                    for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
                        buffer.set(dest,this->vertexBufferWithMatrix.get(source));
                        buffer.set(dest+1u,this->vertexBufferWithMatrix.get(source+1u));

                        buffer.set(dest+2u,this->vertexBufferWithMatrix.get(source+2u));
                        buffer.set(dest+3u,this->vertexBufferWithMatrix.get(source+3u));
                        buffer.set(dest+4u,this->vertexBufferWithMatrix.get(source+4u));

                        source+=vboSizeofMesh3D[this->vboWithMatrixType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy:
                {
                    //edk::GU::vbo_XY_RGB -> edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy
                    for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
                        buffer.set(dest,this->vertexBufferWithMatrix.get(source));
                        buffer.set(dest+1u,this->vertexBufferWithMatrix.get(source+1u));

                        buffer.set(dest+2u,this->vertexBufferWithMatrix.get(source+2u));
                        buffer.set(dest+3u,this->vertexBufferWithMatrix.get(source+3u));
                        buffer.set(dest+4u,this->vertexBufferWithMatrix.get(source+4u));

                        source+=vboSizeofMesh3D[this->vboWithMatrixType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ:
                {
                    //edk::GU::vbo_XY_RGB -> edk::GU::vbo_XYZ
                    for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
                        buffer.set(dest,this->vertexBufferWithMatrix.get(source));
                        buffer.set(dest+1u,this->vertexBufferWithMatrix.get(source+1u));

                        source+=vboSizeofMesh3D[this->vboWithMatrixType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_NxNyNz:
                {
                    //edk::GU::vbo_XY_RGB -> edk::GU::vbo_XYZ_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
                        buffer.set(dest,this->vertexBufferWithMatrix.get(source));
                        buffer.set(dest+1u,this->vertexBufferWithMatrix.get(source+1u));

                        source+=vboSizeofMesh3D[this->vboWithMatrixType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGB:
                {
                    //edk::GU::vbo_XY_RGB -> edk::GU::vbo_XYZ_RGB
                    for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
                        buffer.set(dest,this->vertexBufferWithMatrix.get(source));
                        buffer.set(dest+1u,this->vertexBufferWithMatrix.get(source+1u));

                        buffer.set(dest+3u,this->vertexBufferWithMatrix.get(source+2u));
                        buffer.set(dest+4u,this->vertexBufferWithMatrix.get(source+3u));
                        buffer.set(dest+5u,this->vertexBufferWithMatrix.get(source+4u));

                        source+=vboSizeofMesh3D[this->vboWithMatrixType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGBA:
                {
                    //edk::GU::vbo_XY_RGB -> edk::GU::vbo_XYZ_RGBA
                    for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
                        buffer.set(dest,this->vertexBufferWithMatrix.get(source));
                        buffer.set(dest+1u,this->vertexBufferWithMatrix.get(source+1u));

                        buffer.set(dest+3u,this->vertexBufferWithMatrix.get(source+2u));
                        buffer.set(dest+4u,this->vertexBufferWithMatrix.get(source+3u));
                        buffer.set(dest+5u,this->vertexBufferWithMatrix.get(source+4u));

                        source+=vboSizeofMesh3D[this->vboWithMatrixType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGB_NxNyNz:
                {
                    //edk::GU::vbo_XY_RGB -> edk::GU::vbo_XYZ_RGB_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
                        buffer.set(dest,this->vertexBufferWithMatrix.get(source));
                        buffer.set(dest+1u,this->vertexBufferWithMatrix.get(source+1u));

                        buffer.set(dest+3u,this->vertexBufferWithMatrix.get(source+2u));
                        buffer.set(dest+4u,this->vertexBufferWithMatrix.get(source+3u));
                        buffer.set(dest+5u,this->vertexBufferWithMatrix.get(source+4u));

                        source+=vboSizeofMesh3D[this->vboWithMatrixType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGBA_NxNyNz:
                {
                    //edk::GU::vbo_XY_RGB -> edk::GU::vbo_XYZ_RGBA_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
                        buffer.set(dest,this->vertexBufferWithMatrix.get(source));
                        buffer.set(dest+1u,this->vertexBufferWithMatrix.get(source+1u));

                        buffer.set(dest+3u,this->vertexBufferWithMatrix.get(source+2u));
                        buffer.set(dest+4u,this->vertexBufferWithMatrix.get(source+3u));
                        buffer.set(dest+5u,this->vertexBufferWithMatrix.get(source+4u));

                        source+=vboSizeofMesh3D[this->vboWithMatrixType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGB_NxNyNz_UVxUVy:
                {
                    //edk::GU::vbo_XY_RGB -> edk::GU::vbo_XYZ_RGB_NxNyNz_UVxUVy
                    for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
                        buffer.set(dest,this->vertexBufferWithMatrix.get(source));
                        buffer.set(dest+1u,this->vertexBufferWithMatrix.get(source+1u));

                        buffer.set(dest+3u,this->vertexBufferWithMatrix.get(source+2u));
                        buffer.set(dest+4u,this->vertexBufferWithMatrix.get(source+3u));
                        buffer.set(dest+5u,this->vertexBufferWithMatrix.get(source+4u));

                        source+=vboSizeofMesh3D[this->vboWithMatrixType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy:
                {
                    //edk::GU::vbo_XY_RGB -> edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy
                    for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
                        buffer.set(dest,this->vertexBufferWithMatrix.get(source));
                        buffer.set(dest+1u,this->vertexBufferWithMatrix.get(source+1u));

                        buffer.set(dest+3u,this->vertexBufferWithMatrix.get(source+2u));
                        buffer.set(dest+4u,this->vertexBufferWithMatrix.get(source+3u));
                        buffer.set(dest+5u,this->vertexBufferWithMatrix.get(source+4u));

                        source+=vboSizeofMesh3D[this->vboWithMatrixType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                default:
                    break;
                }
            }
                break;
            case edk::GU::vbo_XY_RGBA:
            {
                switch(type){
                case edk::GU::vbo_XY:
                {
                    //edk::GU::vbo_XY_RGBA -> edk::GU::vbo_XY
                    for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
                        buffer.set(dest,this->vertexBufferWithMatrix.get(source));
                        buffer.set(dest+1u,this->vertexBufferWithMatrix.get(source+1u));

                        source+=vboSizeofMesh3D[this->vboWithMatrixType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_NxNyNz:
                {
                    //edk::GU::vbo_XY_RGBA -> edk::GU::vbo_XY_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
                        buffer.set(dest,this->vertexBufferWithMatrix.get(source));
                        buffer.set(dest+1u,this->vertexBufferWithMatrix.get(source+1u));

                        source+=vboSizeofMesh3D[this->vboWithMatrixType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGB:
                {
                    //edk::GU::vbo_XY_RGBA -> edk::GU::vbo_XY_RGB
                    for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
                        buffer.set(dest,this->vertexBufferWithMatrix.get(source));
                        buffer.set(dest+1u,this->vertexBufferWithMatrix.get(source+1u));

                        source+=vboSizeofMesh3D[this->vboWithMatrixType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGB_NxNyNz:
                {
                    //edk::GU::vbo_XY_RGBA -> edk::GU::vbo_XY_RGB_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
                        buffer.set(dest,this->vertexBufferWithMatrix.get(source));
                        buffer.set(dest+1u,this->vertexBufferWithMatrix.get(source+1u));

                        source+=vboSizeofMesh3D[this->vboWithMatrixType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGBA_NxNyNz:
                {
                    //edk::GU::vbo_XY_RGBA -> edk::GU::vbo_XY_RGBA_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
                        buffer.set(dest,this->vertexBufferWithMatrix.get(source));
                        buffer.set(dest+1u,this->vertexBufferWithMatrix.get(source+1u));

                        buffer.set(dest+2u,this->vertexBufferWithMatrix.get(source+2u));
                        buffer.set(dest+3u,this->vertexBufferWithMatrix.get(source+3u));
                        buffer.set(dest+4u,this->vertexBufferWithMatrix.get(source+4u));
                        buffer.set(dest+5u,this->vertexBufferWithMatrix.get(source+5u));

                        source+=vboSizeofMesh3D[this->vboWithMatrixType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGB_NxNyNz_UVxUVy:
                {
                    //edk::GU::vbo_XY_RGBA -> edk::GU::vbo_XY_RGB_NxNyNz_UVxUVy
                    for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
                        buffer.set(dest,this->vertexBufferWithMatrix.get(source));
                        buffer.set(dest+1u,this->vertexBufferWithMatrix.get(source+1u));

                        buffer.set(dest+2u,this->vertexBufferWithMatrix.get(source+2u));
                        buffer.set(dest+3u,this->vertexBufferWithMatrix.get(source+3u));
                        buffer.set(dest+4u,this->vertexBufferWithMatrix.get(source+4u));

                        source+=vboSizeofMesh3D[this->vboWithMatrixType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy:
                {
                    //edk::GU::vbo_XY_RGBA -> edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy
                    for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
                        buffer.set(dest,this->vertexBufferWithMatrix.get(source));
                        buffer.set(dest+1u,this->vertexBufferWithMatrix.get(source+1u));

                        buffer.set(dest+2u,this->vertexBufferWithMatrix.get(source+2u));
                        buffer.set(dest+3u,this->vertexBufferWithMatrix.get(source+3u));
                        buffer.set(dest+4u,this->vertexBufferWithMatrix.get(source+4u));
                        buffer.set(dest+5u,this->vertexBufferWithMatrix.get(source+5u));

                        source+=vboSizeofMesh3D[this->vboWithMatrixType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ:
                {
                    //edk::GU::vbo_XY_RGBA -> edk::GU::vbo_XYZ
                    for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
                        buffer.set(dest,this->vertexBufferWithMatrix.get(source));
                        buffer.set(dest+1u,this->vertexBufferWithMatrix.get(source+1u));

                        source+=vboSizeofMesh3D[this->vboWithMatrixType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_NxNyNz:
                {
                    //edk::GU::vbo_XY_RGBA -> edk::GU::vbo_XYZ_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
                        buffer.set(dest,this->vertexBufferWithMatrix.get(source));
                        buffer.set(dest+1u,this->vertexBufferWithMatrix.get(source+1u));

                        source+=vboSizeofMesh3D[this->vboWithMatrixType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGB:
                {
                    //edk::GU::vbo_XY_RGBA -> edk::GU::vbo_XYZ_RGB
                    for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
                        buffer.set(dest,this->vertexBufferWithMatrix.get(source));
                        buffer.set(dest+1u,this->vertexBufferWithMatrix.get(source+1u));

                        source+=vboSizeofMesh3D[this->vboWithMatrixType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGBA:
                {
                    //edk::GU::vbo_XY_RGBA -> edk::GU::vbo_XYZ_RGBA
                    for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
                        buffer.set(dest,this->vertexBufferWithMatrix.get(source));
                        buffer.set(dest+1u,this->vertexBufferWithMatrix.get(source+1u));

                        buffer.set(dest+3u,this->vertexBufferWithMatrix.get(source+2u));
                        buffer.set(dest+4u,this->vertexBufferWithMatrix.get(source+3u));
                        buffer.set(dest+5u,this->vertexBufferWithMatrix.get(source+4u));
                        buffer.set(dest+6u,this->vertexBufferWithMatrix.get(source+5u));

                        source+=vboSizeofMesh3D[this->vboWithMatrixType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGB_NxNyNz:
                {
                    //edk::GU::vbo_XY_RGBA -> edk::GU::vbo_XYZ_RGB_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
                        buffer.set(dest,this->vertexBufferWithMatrix.get(source));
                        buffer.set(dest+1u,this->vertexBufferWithMatrix.get(source+1u));

                        buffer.set(dest+3u,this->vertexBufferWithMatrix.get(source+2u));
                        buffer.set(dest+4u,this->vertexBufferWithMatrix.get(source+3u));
                        buffer.set(dest+5u,this->vertexBufferWithMatrix.get(source+4u));

                        source+=vboSizeofMesh3D[this->vboWithMatrixType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGBA_NxNyNz:
                {
                    //edk::GU::vbo_XY_RGBA -> edk::GU::vbo_XYZ_RGBA_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
                        buffer.set(dest,this->vertexBufferWithMatrix.get(source));
                        buffer.set(dest+1u,this->vertexBufferWithMatrix.get(source+1u));

                        buffer.set(dest+3u,this->vertexBufferWithMatrix.get(source+2u));
                        buffer.set(dest+4u,this->vertexBufferWithMatrix.get(source+3u));
                        buffer.set(dest+5u,this->vertexBufferWithMatrix.get(source+4u));
                        buffer.set(dest+6u,this->vertexBufferWithMatrix.get(source+5u));

                        source+=vboSizeofMesh3D[this->vboWithMatrixType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGB_NxNyNz_UVxUVy:
                {
                    //edk::GU::vbo_XY_RGBA -> edk::GU::vbo_XYZ_RGB_NxNyNz_UVxUVy
                    for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
                        buffer.set(dest,this->vertexBufferWithMatrix.get(source));
                        buffer.set(dest+1u,this->vertexBufferWithMatrix.get(source+1u));

                        buffer.set(dest+3u,this->vertexBufferWithMatrix.get(source+2u));
                        buffer.set(dest+4u,this->vertexBufferWithMatrix.get(source+3u));
                        buffer.set(dest+5u,this->vertexBufferWithMatrix.get(source+4u));

                        source+=vboSizeofMesh3D[this->vboWithMatrixType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy:
                {
                    //edk::GU::vbo_XY_RGBA -> edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy
                    for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
                        buffer.set(dest,this->vertexBufferWithMatrix.get(source));
                        buffer.set(dest+1u,this->vertexBufferWithMatrix.get(source+1u));

                        buffer.set(dest+3u,this->vertexBufferWithMatrix.get(source+2u));
                        buffer.set(dest+4u,this->vertexBufferWithMatrix.get(source+3u));
                        buffer.set(dest+5u,this->vertexBufferWithMatrix.get(source+4u));
                        buffer.set(dest+6u,this->vertexBufferWithMatrix.get(source+5u));

                        source+=vboSizeofMesh3D[this->vboWithMatrixType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                default:
                    break;
                }
            }
                break;
            case edk::GU::vbo_XY_RGB_NxNyNz:
            {
                switch(type){
                case edk::GU::vbo_XY:
                {
                    //edk::GU::vbo_XY_RGB_NxNyNz -> edk::GU::vbo_XY
                    for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
                        buffer.set(dest,this->vertexBufferWithMatrix.get(source));
                        buffer.set(dest+1u,this->vertexBufferWithMatrix.get(source+1u));

                        source+=vboSizeofMesh3D[this->vboWithMatrixType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_NxNyNz:
                {
                    //edk::GU::vbo_XY_RGB_NxNyNz -> edk::GU::vbo_XY_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
                        buffer.set(dest,this->vertexBufferWithMatrix.get(source));
                        buffer.set(dest+1u,this->vertexBufferWithMatrix.get(source+1u));

                        buffer.set(dest+2u,this->vertexBufferWithMatrix.get(source+5u));
                        buffer.set(dest+3u,this->vertexBufferWithMatrix.get(source+6u));
                        buffer.set(dest+4u,this->vertexBufferWithMatrix.get(source+7u));

                        source+=vboSizeofMesh3D[this->vboWithMatrixType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGB:
                {
                    //edk::GU::vbo_XY_RGB_NxNyNz -> edk::GU::vbo_XY_RGB
                    for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
                        buffer.set(dest,this->vertexBufferWithMatrix.get(source));
                        buffer.set(dest+1u,this->vertexBufferWithMatrix.get(source+1u));

                        buffer.set(dest+2u,this->vertexBufferWithMatrix.get(source+2u));
                        buffer.set(dest+3u,this->vertexBufferWithMatrix.get(source+3u));
                        buffer.set(dest+4u,this->vertexBufferWithMatrix.get(source+4u));

                        source+=vboSizeofMesh3D[this->vboWithMatrixType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGBA:
                {
                    //edk::GU::vbo_XY_RGB_NxNyNz -> edk::GU::vbo_XY_RGBA
                    for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
                        buffer.set(dest,this->vertexBufferWithMatrix.get(source));
                        buffer.set(dest+1u,this->vertexBufferWithMatrix.get(source+1u));

                        buffer.set(dest+2u,this->vertexBufferWithMatrix.get(source+2u));
                        buffer.set(dest+3u,this->vertexBufferWithMatrix.get(source+3u));
                        buffer.set(dest+4u,this->vertexBufferWithMatrix.get(source+4u));

                        source+=vboSizeofMesh3D[this->vboWithMatrixType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGBA_NxNyNz:
                {
                    //edk::GU::vbo_XY_RGB_NxNyNz -> edk::GU::vbo_XY_RGBA_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
                        buffer.set(dest,this->vertexBufferWithMatrix.get(source));
                        buffer.set(dest+1u,this->vertexBufferWithMatrix.get(source+1u));

                        buffer.set(dest+2u,this->vertexBufferWithMatrix.get(source+2u));
                        buffer.set(dest+3u,this->vertexBufferWithMatrix.get(source+3u));
                        buffer.set(dest+4u,this->vertexBufferWithMatrix.get(source+4u));

                        buffer.set(dest+6u,this->vertexBufferWithMatrix.get(source+5u));
                        buffer.set(dest+7u,this->vertexBufferWithMatrix.get(source+6u));
                        buffer.set(dest+8u,this->vertexBufferWithMatrix.get(source+7u));

                        source+=vboSizeofMesh3D[this->vboWithMatrixType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGB_NxNyNz_UVxUVy:
                {
                    //edk::GU::vbo_XY_RGB_NxNyNz -> edk::GU::vbo_XY_RGB_NxNyNz_UVxUVy
                    for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
                        buffer.set(dest,this->vertexBufferWithMatrix.get(source));
                        buffer.set(dest+1u,this->vertexBufferWithMatrix.get(source+1u));

                        buffer.set(dest+2u,this->vertexBufferWithMatrix.get(source+2u));
                        buffer.set(dest+3u,this->vertexBufferWithMatrix.get(source+3u));
                        buffer.set(dest+4u,this->vertexBufferWithMatrix.get(source+4u));

                        buffer.set(dest+5u,this->vertexBufferWithMatrix.get(source+5u));
                        buffer.set(dest+6u,this->vertexBufferWithMatrix.get(source+6u));
                        buffer.set(dest+7u,this->vertexBufferWithMatrix.get(source+7u));

                        source+=vboSizeofMesh3D[this->vboWithMatrixType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy:
                {
                    //edk::GU::vbo_XY_RGB_NxNyNz -> edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy
                    for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
                        buffer.set(dest,this->vertexBufferWithMatrix.get(source));
                        buffer.set(dest+1u,this->vertexBufferWithMatrix.get(source+1u));

                        buffer.set(dest+2u,this->vertexBufferWithMatrix.get(source+2u));
                        buffer.set(dest+3u,this->vertexBufferWithMatrix.get(source+3u));
                        buffer.set(dest+4u,this->vertexBufferWithMatrix.get(source+4u));

                        buffer.set(dest+6u,this->vertexBufferWithMatrix.get(source+5u));
                        buffer.set(dest+7u,this->vertexBufferWithMatrix.get(source+6u));
                        buffer.set(dest+8u,this->vertexBufferWithMatrix.get(source+7u));

                        source+=vboSizeofMesh3D[this->vboWithMatrixType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ:
                {
                    //edk::GU::vbo_XY_RGB_NxNyNz -> edk::GU::vbo_XYZ
                    for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
                        buffer.set(dest,this->vertexBufferWithMatrix.get(source));
                        buffer.set(dest+1u,this->vertexBufferWithMatrix.get(source+1u));

                        source+=vboSizeofMesh3D[this->vboWithMatrixType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_NxNyNz:
                {
                    //edk::GU::vbo_XY_RGB_NxNyNz -> edk::GU::vbo_XYZ_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
                        buffer.set(dest,this->vertexBufferWithMatrix.get(source));
                        buffer.set(dest+1u,this->vertexBufferWithMatrix.get(source+1u));

                        buffer.set(dest+3u,this->vertexBufferWithMatrix.get(source+5u));
                        buffer.set(dest+4u,this->vertexBufferWithMatrix.get(source+6u));
                        buffer.set(dest+5u,this->vertexBufferWithMatrix.get(source+7u));

                        source+=vboSizeofMesh3D[this->vboWithMatrixType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGB:
                {
                    //edk::GU::vbo_XY_RGB_NxNyNz -> edk::GU::vbo_XYZ_RGB
                    for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
                        buffer.set(dest,this->vertexBufferWithMatrix.get(source));
                        buffer.set(dest+1u,this->vertexBufferWithMatrix.get(source+1u));

                        buffer.set(dest+3u,this->vertexBufferWithMatrix.get(source+2u));
                        buffer.set(dest+4u,this->vertexBufferWithMatrix.get(source+3u));
                        buffer.set(dest+5u,this->vertexBufferWithMatrix.get(source+4u));

                        source+=vboSizeofMesh3D[this->vboWithMatrixType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGBA:
                {
                    //edk::GU::vbo_XY_RGB_NxNyNz -> edk::GU::vbo_XYZ_RGBA
                    for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
                        buffer.set(dest,this->vertexBufferWithMatrix.get(source));
                        buffer.set(dest+1u,this->vertexBufferWithMatrix.get(source+1u));

                        buffer.set(dest+3u,this->vertexBufferWithMatrix.get(source+2u));
                        buffer.set(dest+4u,this->vertexBufferWithMatrix.get(source+3u));
                        buffer.set(dest+5u,this->vertexBufferWithMatrix.get(source+4u));

                        source+=vboSizeofMesh3D[this->vboWithMatrixType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGB_NxNyNz:
                {
                    //edk::GU::vbo_XY_RGB_NxNyNz -> edk::GU::vbo_XYZ_RGB_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
                        buffer.set(dest,this->vertexBufferWithMatrix.get(source));
                        buffer.set(dest+1u,this->vertexBufferWithMatrix.get(source+1u));

                        buffer.set(dest+3u,this->vertexBufferWithMatrix.get(source+2u));
                        buffer.set(dest+4u,this->vertexBufferWithMatrix.get(source+3u));
                        buffer.set(dest+5u,this->vertexBufferWithMatrix.get(source+4u));

                        buffer.set(dest+6u,this->vertexBufferWithMatrix.get(source+5u));
                        buffer.set(dest+7u,this->vertexBufferWithMatrix.get(source+6u));
                        buffer.set(dest+8u,this->vertexBufferWithMatrix.get(source+7u));

                        source+=vboSizeofMesh3D[this->vboWithMatrixType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGBA_NxNyNz:
                {
                    //edk::GU::vbo_XY_RGB_NxNyNz -> edk::GU::vbo_XYZ_RGBA_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
                        buffer.set(dest,this->vertexBufferWithMatrix.get(source));
                        buffer.set(dest+1u,this->vertexBufferWithMatrix.get(source+1u));

                        buffer.set(dest+3u,this->vertexBufferWithMatrix.get(source+2u));
                        buffer.set(dest+4u,this->vertexBufferWithMatrix.get(source+3u));
                        buffer.set(dest+5u,this->vertexBufferWithMatrix.get(source+4u));

                        buffer.set(dest+7u,this->vertexBufferWithMatrix.get(source+5u));
                        buffer.set(dest+8u,this->vertexBufferWithMatrix.get(source+6u));
                        buffer.set(dest+9u,this->vertexBufferWithMatrix.get(source+7u));

                        source+=vboSizeofMesh3D[this->vboWithMatrixType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGB_NxNyNz_UVxUVy:
                {
                    //edk::GU::vbo_XY_RGB_NxNyNz -> edk::GU::vbo_XYZ_RGB_NxNyNz_UVxUVy
                    for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
                        buffer.set(dest,this->vertexBufferWithMatrix.get(source));
                        buffer.set(dest+1u,this->vertexBufferWithMatrix.get(source+1u));

                        buffer.set(dest+3u,this->vertexBufferWithMatrix.get(source+2u));
                        buffer.set(dest+4u,this->vertexBufferWithMatrix.get(source+3u));
                        buffer.set(dest+5u,this->vertexBufferWithMatrix.get(source+4u));

                        buffer.set(dest+6u,this->vertexBufferWithMatrix.get(source+5u));
                        buffer.set(dest+7u,this->vertexBufferWithMatrix.get(source+6u));
                        buffer.set(dest+8u,this->vertexBufferWithMatrix.get(source+7u));

                        source+=vboSizeofMesh3D[this->vboWithMatrixType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy:
                {
                    //edk::GU::vbo_XY_RGB_NxNyNz -> edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy
                    for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
                        buffer.set(dest,this->vertexBufferWithMatrix.get(source));
                        buffer.set(dest+1u,this->vertexBufferWithMatrix.get(source+1u));

                        buffer.set(dest+3u,this->vertexBufferWithMatrix.get(source+2u));
                        buffer.set(dest+4u,this->vertexBufferWithMatrix.get(source+3u));
                        buffer.set(dest+5u,this->vertexBufferWithMatrix.get(source+4u));

                        buffer.set(dest+7u,this->vertexBufferWithMatrix.get(source+5u));
                        buffer.set(dest+8u,this->vertexBufferWithMatrix.get(source+6u));
                        buffer.set(dest+9u,this->vertexBufferWithMatrix.get(source+7u));

                        source+=vboSizeofMesh3D[this->vboWithMatrixType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                default:
                    break;
                }
            }
                break;
            case edk::GU::vbo_XY_RGBA_NxNyNz:
            {
                switch(type){
                case edk::GU::vbo_XY:
                {
                    //edk::GU::vbo_XY_RGBA_NxNyNz -> edk::GU::vbo_XY
                    for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
                        buffer.set(dest,this->vertexBufferWithMatrix.get(source));
                        buffer.set(dest+1u,this->vertexBufferWithMatrix.get(source+1u));

                        source+=vboSizeofMesh3D[this->vboWithMatrixType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_NxNyNz:
                {
                    //edk::GU::vbo_XY_RGBA_NxNyNz -> edk::GU::vbo_XY_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
                        buffer.set(dest,this->vertexBufferWithMatrix.get(source));
                        buffer.set(dest+1u,this->vertexBufferWithMatrix.get(source+1u));

                        buffer.set(dest+2u,this->vertexBufferWithMatrix.get(source+6u));
                        buffer.set(dest+3u,this->vertexBufferWithMatrix.get(source+7u));
                        buffer.set(dest+4u,this->vertexBufferWithMatrix.get(source+8u));

                        source+=vboSizeofMesh3D[this->vboWithMatrixType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGB:
                {
                    //edk::GU::vbo_XY_RGBA_NxNyNz -> edk::GU::vbo_XY_RGB
                    for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
                        buffer.set(dest,this->vertexBufferWithMatrix.get(source));
                        buffer.set(dest+1u,this->vertexBufferWithMatrix.get(source+1u));

                        buffer.set(dest+2u,this->vertexBufferWithMatrix.get(source+2u));
                        buffer.set(dest+3u,this->vertexBufferWithMatrix.get(source+3u));
                        buffer.set(dest+4u,this->vertexBufferWithMatrix.get(source+4u));

                        source+=vboSizeofMesh3D[this->vboWithMatrixType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGBA:
                {
                    //edk::GU::vbo_XY_RGBA_NxNyNz -> edk::GU::vbo_XY_RGBA
                    for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
                        buffer.set(dest,this->vertexBufferWithMatrix.get(source));
                        buffer.set(dest+1u,this->vertexBufferWithMatrix.get(source+1u));

                        buffer.set(dest+2u,this->vertexBufferWithMatrix.get(source+2u));
                        buffer.set(dest+3u,this->vertexBufferWithMatrix.get(source+3u));
                        buffer.set(dest+4u,this->vertexBufferWithMatrix.get(source+4u));
                        buffer.set(dest+5u,this->vertexBufferWithMatrix.get(source+5u));

                        source+=vboSizeofMesh3D[this->vboWithMatrixType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGB_NxNyNz:
                {
                    //edk::GU::vbo_XY_RGBA_NxNyNz -> edk::GU::vbo_XY_RGB_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
                        buffer.set(dest,this->vertexBufferWithMatrix.get(source));
                        buffer.set(dest+1u,this->vertexBufferWithMatrix.get(source+1u));

                        buffer.set(dest+2u,this->vertexBufferWithMatrix.get(source+2u));
                        buffer.set(dest+3u,this->vertexBufferWithMatrix.get(source+3u));
                        buffer.set(dest+4u,this->vertexBufferWithMatrix.get(source+4u));

                        buffer.set(dest+5u,this->vertexBufferWithMatrix.get(source+6u));
                        buffer.set(dest+6u,this->vertexBufferWithMatrix.get(source+7u));
                        buffer.set(dest+7u,this->vertexBufferWithMatrix.get(source+8u));

                        source+=vboSizeofMesh3D[this->vboWithMatrixType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGB_NxNyNz_UVxUVy:
                {
                    //edk::GU::vbo_XY_RGBA_NxNyNz -> edk::GU::vbo_XY_RGB_NxNyNz_UVxUVy
                    for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
                        buffer.set(dest,this->vertexBufferWithMatrix.get(source));
                        buffer.set(dest+1u,this->vertexBufferWithMatrix.get(source+1u));

                        buffer.set(dest+2u,this->vertexBufferWithMatrix.get(source+2u));
                        buffer.set(dest+3u,this->vertexBufferWithMatrix.get(source+3u));
                        buffer.set(dest+4u,this->vertexBufferWithMatrix.get(source+4u));

                        buffer.set(dest+5u,this->vertexBufferWithMatrix.get(source+6u));
                        buffer.set(dest+6u,this->vertexBufferWithMatrix.get(source+7u));
                        buffer.set(dest+7u,this->vertexBufferWithMatrix.get(source+8u));

                        source+=vboSizeofMesh3D[this->vboWithMatrixType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy:
                {
                    //edk::GU::vbo_XY_RGBA_NxNyNz -> edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy
                    for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
                        buffer.set(dest,this->vertexBufferWithMatrix.get(source));
                        buffer.set(dest+1u,this->vertexBufferWithMatrix.get(source+1u));

                        buffer.set(dest+2u,this->vertexBufferWithMatrix.get(source+2u));
                        buffer.set(dest+3u,this->vertexBufferWithMatrix.get(source+3u));
                        buffer.set(dest+4u,this->vertexBufferWithMatrix.get(source+4u));
                        buffer.set(dest+5u,this->vertexBufferWithMatrix.get(source+5u));

                        buffer.set(dest+6u,this->vertexBufferWithMatrix.get(source+6u));
                        buffer.set(dest+7u,this->vertexBufferWithMatrix.get(source+7u));
                        buffer.set(dest+8u,this->vertexBufferWithMatrix.get(source+8u));

                        source+=vboSizeofMesh3D[this->vboWithMatrixType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ:
                {
                    //edk::GU::vbo_XY_RGBA_NxNyNz -> edk::GU::vbo_XYZ
                    for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
                        buffer.set(dest,this->vertexBufferWithMatrix.get(source));
                        buffer.set(dest+1u,this->vertexBufferWithMatrix.get(source+1u));

                        source+=vboSizeofMesh3D[this->vboWithMatrixType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_NxNyNz:
                {
                    //edk::GU::vbo_XY_RGBA_NxNyNz -> edk::GU::vbo_XYZ_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
                        buffer.set(dest,this->vertexBufferWithMatrix.get(source));
                        buffer.set(dest+1u,this->vertexBufferWithMatrix.get(source+1u));

                        buffer.set(dest+3u,this->vertexBufferWithMatrix.get(source+6u));
                        buffer.set(dest+4u,this->vertexBufferWithMatrix.get(source+7u));
                        buffer.set(dest+5u,this->vertexBufferWithMatrix.get(source+8u));

                        source+=vboSizeofMesh3D[this->vboWithMatrixType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGB:
                {
                    //edk::GU::vbo_XY_RGBA_NxNyNz -> edk::GU::vbo_XYZ_RGB
                    for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
                        buffer.set(dest,this->vertexBufferWithMatrix.get(source));
                        buffer.set(dest+1u,this->vertexBufferWithMatrix.get(source+1u));

                        buffer.set(dest+3u,this->vertexBufferWithMatrix.get(source+2u));
                        buffer.set(dest+4u,this->vertexBufferWithMatrix.get(source+3u));
                        buffer.set(dest+5u,this->vertexBufferWithMatrix.get(source+4u));

                        source+=vboSizeofMesh3D[this->vboWithMatrixType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGBA:
                {
                    //edk::GU::vbo_XY_RGBA_NxNyNz -> edk::GU::vbo_XYZ_RGBA
                    for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
                        buffer.set(dest,this->vertexBufferWithMatrix.get(source));
                        buffer.set(dest+1u,this->vertexBufferWithMatrix.get(source+1u));

                        buffer.set(dest+3u,this->vertexBufferWithMatrix.get(source+2u));
                        buffer.set(dest+4u,this->vertexBufferWithMatrix.get(source+3u));
                        buffer.set(dest+5u,this->vertexBufferWithMatrix.get(source+4u));
                        buffer.set(dest+6u,this->vertexBufferWithMatrix.get(source+5u));

                        source+=vboSizeofMesh3D[this->vboWithMatrixType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGB_NxNyNz:
                {
                    //edk::GU::vbo_XY_RGBA_NxNyNz -> edk::GU::vbo_XYZ_RGB_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
                        buffer.set(dest,this->vertexBufferWithMatrix.get(source));
                        buffer.set(dest+1u,this->vertexBufferWithMatrix.get(source+1u));

                        buffer.set(dest+3u,this->vertexBufferWithMatrix.get(source+2u));
                        buffer.set(dest+4u,this->vertexBufferWithMatrix.get(source+3u));
                        buffer.set(dest+5u,this->vertexBufferWithMatrix.get(source+4u));

                        buffer.set(dest+6u,this->vertexBufferWithMatrix.get(source+6u));
                        buffer.set(dest+7u,this->vertexBufferWithMatrix.get(source+7u));
                        buffer.set(dest+8u,this->vertexBufferWithMatrix.get(source+8u));

                        source+=vboSizeofMesh3D[this->vboWithMatrixType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGBA_NxNyNz:
                {
                    //edk::GU::vbo_XY_RGBA_NxNyNz -> edk::GU::vbo_XYZ_RGBA_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
                        buffer.set(dest,this->vertexBufferWithMatrix.get(source));
                        buffer.set(dest+1u,this->vertexBufferWithMatrix.get(source+1u));

                        buffer.set(dest+3u,this->vertexBufferWithMatrix.get(source+2u));
                        buffer.set(dest+4u,this->vertexBufferWithMatrix.get(source+3u));
                        buffer.set(dest+5u,this->vertexBufferWithMatrix.get(source+4u));
                        buffer.set(dest+6u,this->vertexBufferWithMatrix.get(source+5u));

                        buffer.set(dest+7u,this->vertexBufferWithMatrix.get(source+6u));
                        buffer.set(dest+8u,this->vertexBufferWithMatrix.get(source+7u));
                        buffer.set(dest+9u,this->vertexBufferWithMatrix.get(source+8u));

                        source+=vboSizeofMesh3D[this->vboWithMatrixType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGB_NxNyNz_UVxUVy:
                {
                    //edk::GU::vbo_XY_RGBA_NxNyNz -> edk::GU::vbo_XYZ_RGB_NxNyNz_UVxUVy
                    for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
                        buffer.set(dest,this->vertexBufferWithMatrix.get(source));
                        buffer.set(dest+1u,this->vertexBufferWithMatrix.get(source+1u));

                        buffer.set(dest+3u,this->vertexBufferWithMatrix.get(source+2u));
                        buffer.set(dest+4u,this->vertexBufferWithMatrix.get(source+3u));
                        buffer.set(dest+5u,this->vertexBufferWithMatrix.get(source+4u));

                        buffer.set(dest+6u,this->vertexBufferWithMatrix.get(source+6u));
                        buffer.set(dest+7u,this->vertexBufferWithMatrix.get(source+7u));
                        buffer.set(dest+8u,this->vertexBufferWithMatrix.get(source+8u));

                        source+=vboSizeofMesh3D[this->vboWithMatrixType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy:
                {
                    //edk::GU::vbo_XY_RGBA_NxNyNz -> edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy
                    for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
                        buffer.set(dest,this->vertexBufferWithMatrix.get(source));
                        buffer.set(dest+1u,this->vertexBufferWithMatrix.get(source+1u));

                        buffer.set(dest+3u,this->vertexBufferWithMatrix.get(source+2u));
                        buffer.set(dest+4u,this->vertexBufferWithMatrix.get(source+3u));
                        buffer.set(dest+5u,this->vertexBufferWithMatrix.get(source+4u));
                        buffer.set(dest+6u,this->vertexBufferWithMatrix.get(source+5u));

                        buffer.set(dest+7u,this->vertexBufferWithMatrix.get(source+6u));
                        buffer.set(dest+8u,this->vertexBufferWithMatrix.get(source+7u));
                        buffer.set(dest+9u,this->vertexBufferWithMatrix.get(source+8u));

                        source+=vboSizeofMesh3D[this->vboWithMatrixType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                default:
                    break;
                }
            }
                break;
            case edk::GU::vbo_XY_RGB_NxNyNz_UVxUVy:
            {
                switch(type){
                case edk::GU::vbo_XY:
                {
                    //edk::GU::vbo_XY_RGB_NxNyNz_UVxUVy -> edk::GU::vbo_XY
                    for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
                        buffer.set(dest,this->vertexBufferWithMatrix.get(source));
                        buffer.set(dest+1u,this->vertexBufferWithMatrix.get(source+1u));

                        source+=vboSizeofMesh3D[this->vboWithMatrixType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_NxNyNz:
                {
                    //edk::GU::vbo_XY_RGB_NxNyNz_UVxUVy -> edk::GU::vbo_XY_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
                        buffer.set(dest,this->vertexBufferWithMatrix.get(source));
                        buffer.set(dest+1u,this->vertexBufferWithMatrix.get(source+1u));

                        buffer.set(dest+2u,this->vertexBufferWithMatrix.get(source+5u));
                        buffer.set(dest+3u,this->vertexBufferWithMatrix.get(source+6u));
                        buffer.set(dest+4u,this->vertexBufferWithMatrix.get(source+7u));

                        source+=vboSizeofMesh3D[this->vboWithMatrixType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGB:
                {
                    //edk::GU::vbo_XY_RGB_NxNyNz_UVxUVy -> edk::GU::vbo_XY_RGB
                    for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
                        buffer.set(dest,this->vertexBufferWithMatrix.get(source));
                        buffer.set(dest+1u,this->vertexBufferWithMatrix.get(source+1u));

                        buffer.set(dest+2u,this->vertexBufferWithMatrix.get(source+2u));
                        buffer.set(dest+3u,this->vertexBufferWithMatrix.get(source+3u));
                        buffer.set(dest+4u,this->vertexBufferWithMatrix.get(source+4u));

                        source+=vboSizeofMesh3D[this->vboWithMatrixType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGBA:
                {
                    //edk::GU::vbo_XY_RGB_NxNyNz_UVxUVy -> edk::GU::vbo_XY_RGBA
                    for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
                        buffer.set(dest,this->vertexBufferWithMatrix.get(source));
                        buffer.set(dest+1u,this->vertexBufferWithMatrix.get(source+1u));

                        buffer.set(dest+2u,this->vertexBufferWithMatrix.get(source+2u));
                        buffer.set(dest+3u,this->vertexBufferWithMatrix.get(source+3u));
                        buffer.set(dest+4u,this->vertexBufferWithMatrix.get(source+4u));

                        source+=vboSizeofMesh3D[this->vboWithMatrixType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGB_NxNyNz:
                {
                    //edk::GU::vbo_XY_RGB_NxNyNz_UVxUVy -> edk::GU::vbo_XY_RGB_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
                        buffer.set(dest,this->vertexBufferWithMatrix.get(source));
                        buffer.set(dest+1u,this->vertexBufferWithMatrix.get(source+1u));

                        buffer.set(dest+2u,this->vertexBufferWithMatrix.get(source+2u));
                        buffer.set(dest+3u,this->vertexBufferWithMatrix.get(source+3u));
                        buffer.set(dest+4u,this->vertexBufferWithMatrix.get(source+4u));

                        buffer.set(dest+5u,this->vertexBufferWithMatrix.get(source+5u));
                        buffer.set(dest+6u,this->vertexBufferWithMatrix.get(source+6u));
                        buffer.set(dest+7u,this->vertexBufferWithMatrix.get(source+7u));

                        source+=vboSizeofMesh3D[this->vboWithMatrixType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGBA_NxNyNz:
                {
                    //edk::GU::vbo_XY_RGB_NxNyNz_UVxUVy -> edk::GU::vbo_XY_RGBA_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
                        buffer.set(dest,this->vertexBufferWithMatrix.get(source));
                        buffer.set(dest+1u,this->vertexBufferWithMatrix.get(source+1u));

                        buffer.set(dest+2u,this->vertexBufferWithMatrix.get(source+2u));
                        buffer.set(dest+3u,this->vertexBufferWithMatrix.get(source+3u));
                        buffer.set(dest+4u,this->vertexBufferWithMatrix.get(source+4u));

                        buffer.set(dest+6u,this->vertexBufferWithMatrix.get(source+5u));
                        buffer.set(dest+7u,this->vertexBufferWithMatrix.get(source+6u));
                        buffer.set(dest+8u,this->vertexBufferWithMatrix.get(source+7u));

                        source+=vboSizeofMesh3D[this->vboWithMatrixType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy:
                {
                    //edk::GU::vbo_XY_RGB_NxNyNz_UVxUVy -> edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy
                    for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
                        buffer.set(dest,this->vertexBufferWithMatrix.get(source));
                        buffer.set(dest+1u,this->vertexBufferWithMatrix.get(source+1u));

                        buffer.set(dest+2u,this->vertexBufferWithMatrix.get(source+2u));
                        buffer.set(dest+3u,this->vertexBufferWithMatrix.get(source+3u));
                        buffer.set(dest+4u,this->vertexBufferWithMatrix.get(source+4u));

                        buffer.set(dest+6u,this->vertexBufferWithMatrix.get(source+5u));
                        buffer.set(dest+7u,this->vertexBufferWithMatrix.get(source+6u));
                        buffer.set(dest+8u,this->vertexBufferWithMatrix.get(source+7u));

                        buffer.set(dest+9u,this->vertexBufferWithMatrix.get(source+8u));
                        buffer.set(dest+10u,this->vertexBufferWithMatrix.get(source+9u));

                        source+=vboSizeofMesh3D[this->vboWithMatrixType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ:
                {
                    //edk::GU::vbo_XY_RGB_NxNyNz_UVxUVy -> edk::GU::vbo_XYZ
                    for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
                        buffer.set(dest,this->vertexBufferWithMatrix.get(source));
                        buffer.set(dest+1u,this->vertexBufferWithMatrix.get(source+1u));

                        source+=vboSizeofMesh3D[this->vboWithMatrixType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_NxNyNz:
                {
                    //edk::GU::vbo_XY_RGB_NxNyNz_UVxUVy -> edk::GU::vbo_XYZ_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
                        buffer.set(dest,this->vertexBufferWithMatrix.get(source));
                        buffer.set(dest+1u,this->vertexBufferWithMatrix.get(source+1u));

                        buffer.set(dest+3u,this->vertexBufferWithMatrix.get(source+5u));
                        buffer.set(dest+4u,this->vertexBufferWithMatrix.get(source+6u));
                        buffer.set(dest+5u,this->vertexBufferWithMatrix.get(source+7u));

                        source+=vboSizeofMesh3D[this->vboWithMatrixType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGB:
                {
                    //edk::GU::vbo_XY_RGB_NxNyNz_UVxUVy -> edk::GU::vbo_XYZ_RGB
                    for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
                        buffer.set(dest,this->vertexBufferWithMatrix.get(source));
                        buffer.set(dest+1u,this->vertexBufferWithMatrix.get(source+1u));

                        buffer.set(dest+3u,this->vertexBufferWithMatrix.get(source+2u));
                        buffer.set(dest+4u,this->vertexBufferWithMatrix.get(source+3u));
                        buffer.set(dest+5u,this->vertexBufferWithMatrix.get(source+4u));

                        source+=vboSizeofMesh3D[this->vboWithMatrixType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGBA:
                {
                    //edk::GU::vbo_XY_RGB_NxNyNz_UVxUVy -> edk::GU::vbo_XYZ_RGBA
                    for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
                        buffer.set(dest,this->vertexBufferWithMatrix.get(source));
                        buffer.set(dest+1u,this->vertexBufferWithMatrix.get(source+1u));

                        buffer.set(dest+3u,this->vertexBufferWithMatrix.get(source+2u));
                        buffer.set(dest+4u,this->vertexBufferWithMatrix.get(source+3u));
                        buffer.set(dest+5u,this->vertexBufferWithMatrix.get(source+4u));

                        source+=vboSizeofMesh3D[this->vboWithMatrixType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGB_NxNyNz:
                {
                    //edk::GU::vbo_XY_RGB_NxNyNz_UVxUVy -> edk::GU::vbo_XYZ_RGB_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
                        buffer.set(dest,this->vertexBufferWithMatrix.get(source));
                        buffer.set(dest+1u,this->vertexBufferWithMatrix.get(source+1u));

                        buffer.set(dest+3u,this->vertexBufferWithMatrix.get(source+2u));
                        buffer.set(dest+4u,this->vertexBufferWithMatrix.get(source+3u));
                        buffer.set(dest+5u,this->vertexBufferWithMatrix.get(source+4u));

                        buffer.set(dest+6u,this->vertexBufferWithMatrix.get(source+5u));
                        buffer.set(dest+7u,this->vertexBufferWithMatrix.get(source+6u));
                        buffer.set(dest+8u,this->vertexBufferWithMatrix.get(source+7u));

                        source+=vboSizeofMesh3D[this->vboWithMatrixType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGBA_NxNyNz:
                {
                    //edk::GU::vbo_XY_RGB_NxNyNz_UVxUVy -> edk::GU::vbo_XYZ_RGBA_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
                        buffer.set(dest,this->vertexBufferWithMatrix.get(source));
                        buffer.set(dest+1u,this->vertexBufferWithMatrix.get(source+1u));

                        buffer.set(dest+3u,this->vertexBufferWithMatrix.get(source+2u));
                        buffer.set(dest+4u,this->vertexBufferWithMatrix.get(source+3u));
                        buffer.set(dest+5u,this->vertexBufferWithMatrix.get(source+4u));

                        buffer.set(dest+7u,this->vertexBufferWithMatrix.get(source+5u));
                        buffer.set(dest+8u,this->vertexBufferWithMatrix.get(source+6u));
                        buffer.set(dest+9u,this->vertexBufferWithMatrix.get(source+7u));

                        source+=vboSizeofMesh3D[this->vboWithMatrixType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGB_NxNyNz_UVxUVy:
                {
                    //edk::GU::vbo_XY_RGB_NxNyNz_UVxUVy -> edk::GU::vbo_XYZ_RGB_NxNyNz_UVxUVy
                    for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
                        buffer.set(dest,this->vertexBufferWithMatrix.get(source));
                        buffer.set(dest+1u,this->vertexBufferWithMatrix.get(source+1u));

                        buffer.set(dest+3u,this->vertexBufferWithMatrix.get(source+2u));
                        buffer.set(dest+4u,this->vertexBufferWithMatrix.get(source+3u));
                        buffer.set(dest+5u,this->vertexBufferWithMatrix.get(source+4u));

                        buffer.set(dest+6u,this->vertexBufferWithMatrix.get(source+5u));
                        buffer.set(dest+7u,this->vertexBufferWithMatrix.get(source+6u));
                        buffer.set(dest+8u,this->vertexBufferWithMatrix.get(source+7u));

                        buffer.set(dest+9u,this->vertexBufferWithMatrix.get(source+8u));
                        buffer.set(dest+10u,this->vertexBufferWithMatrix.get(source+9u));

                        source+=vboSizeofMesh3D[this->vboWithMatrixType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy:
                {
                    //edk::GU::vbo_XY_RGB_NxNyNz_UVxUVy -> edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy
                    for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
                        buffer.set(dest,this->vertexBufferWithMatrix.get(source));
                        buffer.set(dest+1u,this->vertexBufferWithMatrix.get(source+1u));

                        buffer.set(dest+3u,this->vertexBufferWithMatrix.get(source+2u));
                        buffer.set(dest+4u,this->vertexBufferWithMatrix.get(source+3u));
                        buffer.set(dest+5u,this->vertexBufferWithMatrix.get(source+4u));

                        buffer.set(dest+7u,this->vertexBufferWithMatrix.get(source+5u));
                        buffer.set(dest+8u,this->vertexBufferWithMatrix.get(source+6u));
                        buffer.set(dest+9u,this->vertexBufferWithMatrix.get(source+7u));

                        buffer.set(dest+10u,this->vertexBufferWithMatrix.get(source+8u));
                        buffer.set(dest+11u,this->vertexBufferWithMatrix.get(source+9u));

                        source+=vboSizeofMesh3D[this->vboWithMatrixType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                default:
                    break;
                }
            }
                break;
            case edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy:
            {
                switch(type){
                case edk::GU::vbo_XY:
                {
                    //edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy -> edk::GU::vbo_XY
                    for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
                        buffer.set(dest,this->vertexBufferWithMatrix.get(source));
                        buffer.set(dest+1u,this->vertexBufferWithMatrix.get(source+1u));

                        source+=vboSizeofMesh3D[this->vboWithMatrixType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_NxNyNz:
                {
                    //edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy -> edk::GU::vbo_XY_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
                        buffer.set(dest,this->vertexBufferWithMatrix.get(source));
                        buffer.set(dest+1u,this->vertexBufferWithMatrix.get(source+1u));

                        buffer.set(dest+2u,this->vertexBufferWithMatrix.get(source+6u));
                        buffer.set(dest+3u,this->vertexBufferWithMatrix.get(source+7u));
                        buffer.set(dest+4u,this->vertexBufferWithMatrix.get(source+8u));

                        source+=vboSizeofMesh3D[this->vboWithMatrixType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGB:
                {
                    //edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy -> edk::GU::vbo_XY_RGB
                    for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
                        buffer.set(dest,this->vertexBufferWithMatrix.get(source));
                        buffer.set(dest+1u,this->vertexBufferWithMatrix.get(source+1u));

                        buffer.set(dest+2u,this->vertexBufferWithMatrix.get(source+2u));
                        buffer.set(dest+3u,this->vertexBufferWithMatrix.get(source+3u));
                        buffer.set(dest+4u,this->vertexBufferWithMatrix.get(source+4u));

                        source+=vboSizeofMesh3D[this->vboWithMatrixType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGBA:
                {
                    //edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy -> edk::GU::vbo_XY_RGBA
                    for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
                        buffer.set(dest,this->vertexBufferWithMatrix.get(source));
                        buffer.set(dest+1u,this->vertexBufferWithMatrix.get(source+1u));

                        buffer.set(dest+2u,this->vertexBufferWithMatrix.get(source+2u));
                        buffer.set(dest+3u,this->vertexBufferWithMatrix.get(source+3u));
                        buffer.set(dest+4u,this->vertexBufferWithMatrix.get(source+4u));
                        buffer.set(dest+5u,this->vertexBufferWithMatrix.get(source+5u));

                        source+=vboSizeofMesh3D[this->vboWithMatrixType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGB_NxNyNz:
                {
                    //edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy -> edk::GU::vbo_XY_RGB_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
                        buffer.set(dest,this->vertexBufferWithMatrix.get(source));
                        buffer.set(dest+1u,this->vertexBufferWithMatrix.get(source+1u));

                        buffer.set(dest+2u,this->vertexBufferWithMatrix.get(source+2u));
                        buffer.set(dest+3u,this->vertexBufferWithMatrix.get(source+3u));
                        buffer.set(dest+4u,this->vertexBufferWithMatrix.get(source+4u));

                        buffer.set(dest+5u,this->vertexBufferWithMatrix.get(source+6u));
                        buffer.set(dest+6u,this->vertexBufferWithMatrix.get(source+7u));
                        buffer.set(dest+7u,this->vertexBufferWithMatrix.get(source+8u));

                        source+=vboSizeofMesh3D[this->vboWithMatrixType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGBA_NxNyNz:
                {
                    //edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy -> edk::GU::vbo_XY_RGBA_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
                        buffer.set(dest,this->vertexBufferWithMatrix.get(source));
                        buffer.set(dest+1u,this->vertexBufferWithMatrix.get(source+1u));

                        buffer.set(dest+2u,this->vertexBufferWithMatrix.get(source+2u));
                        buffer.set(dest+3u,this->vertexBufferWithMatrix.get(source+3u));
                        buffer.set(dest+4u,this->vertexBufferWithMatrix.get(source+4u));
                        buffer.set(dest+5u,this->vertexBufferWithMatrix.get(source+5u));

                        buffer.set(dest+6u,this->vertexBufferWithMatrix.get(source+6u));
                        buffer.set(dest+7u,this->vertexBufferWithMatrix.get(source+7u));
                        buffer.set(dest+8u,this->vertexBufferWithMatrix.get(source+8u));

                        source+=vboSizeofMesh3D[this->vboWithMatrixType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGB_NxNyNz_UVxUVy:
                {
                    //edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy -> edk::GU::vbo_XY_RGB_NxNyNz_UVxUVy
                    for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
                        buffer.set(dest,this->vertexBufferWithMatrix.get(source));
                        buffer.set(dest+1u,this->vertexBufferWithMatrix.get(source+1u));

                        buffer.set(dest+2u,this->vertexBufferWithMatrix.get(source+2u));
                        buffer.set(dest+3u,this->vertexBufferWithMatrix.get(source+3u));
                        buffer.set(dest+4u,this->vertexBufferWithMatrix.get(source+4u));

                        buffer.set(dest+5u,this->vertexBufferWithMatrix.get(source+6u));
                        buffer.set(dest+6u,this->vertexBufferWithMatrix.get(source+7u));
                        buffer.set(dest+7u,this->vertexBufferWithMatrix.get(source+8u));

                        buffer.set(dest+8u,this->vertexBufferWithMatrix.get(source+9u));
                        buffer.set(dest+9u,this->vertexBufferWithMatrix.get(source+10u));

                        source+=vboSizeofMesh3D[this->vboWithMatrixType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ:
                {
                    //edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy -> edk::GU::vbo_XYZ
                    for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
                        buffer.set(dest,this->vertexBufferWithMatrix.get(source));
                        buffer.set(dest+1u,this->vertexBufferWithMatrix.get(source+1u));

                        source+=vboSizeofMesh3D[this->vboWithMatrixType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_NxNyNz:
                {
                    //edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy -> edk::GU::vbo_XYZ_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
                        buffer.set(dest,this->vertexBufferWithMatrix.get(source));
                        buffer.set(dest+1u,this->vertexBufferWithMatrix.get(source+1u));

                        buffer.set(dest+3u,this->vertexBufferWithMatrix.get(source+6u));
                        buffer.set(dest+4u,this->vertexBufferWithMatrix.get(source+7u));
                        buffer.set(dest+5u,this->vertexBufferWithMatrix.get(source+8u));

                        source+=vboSizeofMesh3D[this->vboWithMatrixType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGB:
                {
                    //edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy -> edk::GU::vbo_XYZ_RGB
                    for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
                        buffer.set(dest,this->vertexBufferWithMatrix.get(source));
                        buffer.set(dest+1u,this->vertexBufferWithMatrix.get(source+1u));

                        buffer.set(dest+3u,this->vertexBufferWithMatrix.get(source+2u));
                        buffer.set(dest+4u,this->vertexBufferWithMatrix.get(source+3u));
                        buffer.set(dest+5u,this->vertexBufferWithMatrix.get(source+4u));

                        source+=vboSizeofMesh3D[this->vboWithMatrixType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGBA:
                {
                    //edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy -> edk::GU::vbo_XYZ_RGBA
                    for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
                        buffer.set(dest,this->vertexBufferWithMatrix.get(source));
                        buffer.set(dest+1u,this->vertexBufferWithMatrix.get(source+1u));

                        buffer.set(dest+3u,this->vertexBufferWithMatrix.get(source+2u));
                        buffer.set(dest+4u,this->vertexBufferWithMatrix.get(source+3u));
                        buffer.set(dest+5u,this->vertexBufferWithMatrix.get(source+4u));
                        buffer.set(dest+6u,this->vertexBufferWithMatrix.get(source+5u));

                        source+=vboSizeofMesh3D[this->vboWithMatrixType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGB_NxNyNz:
                {
                    //edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy -> edk::GU::vbo_XYZ_RGB_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
                        buffer.set(dest,this->vertexBufferWithMatrix.get(source));
                        buffer.set(dest+1u,this->vertexBufferWithMatrix.get(source+1u));

                        buffer.set(dest+3u,this->vertexBufferWithMatrix.get(source+2u));
                        buffer.set(dest+4u,this->vertexBufferWithMatrix.get(source+3u));
                        buffer.set(dest+5u,this->vertexBufferWithMatrix.get(source+4u));

                        buffer.set(dest+6u,this->vertexBufferWithMatrix.get(source+6u));
                        buffer.set(dest+7u,this->vertexBufferWithMatrix.get(source+7u));
                        buffer.set(dest+8u,this->vertexBufferWithMatrix.get(source+8u));

                        source+=vboSizeofMesh3D[this->vboWithMatrixType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGBA_NxNyNz:
                {
                    //edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy -> edk::GU::vbo_XYZ_RGBA_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
                        buffer.set(dest,this->vertexBufferWithMatrix.get(source));
                        buffer.set(dest+1u,this->vertexBufferWithMatrix.get(source+1u));

                        buffer.set(dest+3u,this->vertexBufferWithMatrix.get(source+2u));
                        buffer.set(dest+4u,this->vertexBufferWithMatrix.get(source+3u));
                        buffer.set(dest+5u,this->vertexBufferWithMatrix.get(source+4u));
                        buffer.set(dest+6u,this->vertexBufferWithMatrix.get(source+5u));

                        buffer.set(dest+7u,this->vertexBufferWithMatrix.get(source+6u));
                        buffer.set(dest+8u,this->vertexBufferWithMatrix.get(source+7u));
                        buffer.set(dest+9u,this->vertexBufferWithMatrix.get(source+8u));

                        source+=vboSizeofMesh3D[this->vboWithMatrixType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGB_NxNyNz_UVxUVy:
                {
                    //edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy -> edk::GU::vbo_XYZ_RGB_NxNyNz_UVxUVy
                    for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
                        buffer.set(dest,this->vertexBufferWithMatrix.get(source));
                        buffer.set(dest+1u,this->vertexBufferWithMatrix.get(source+1u));

                        buffer.set(dest+3u,this->vertexBufferWithMatrix.get(source+2u));
                        buffer.set(dest+4u,this->vertexBufferWithMatrix.get(source+3u));
                        buffer.set(dest+5u,this->vertexBufferWithMatrix.get(source+4u));

                        buffer.set(dest+6u,this->vertexBufferWithMatrix.get(source+6u));
                        buffer.set(dest+7u,this->vertexBufferWithMatrix.get(source+7u));
                        buffer.set(dest+8u,this->vertexBufferWithMatrix.get(source+8u));

                        buffer.set(dest+9u,this->vertexBufferWithMatrix.get(source+9u));
                        buffer.set(dest+10u,this->vertexBufferWithMatrix.get(source+10u));

                        source+=vboSizeofMesh3D[this->vboWithMatrixType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy:
                {
                    //edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy -> edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy
                    for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
                        buffer.set(dest,this->vertexBufferWithMatrix.get(source));
                        buffer.set(dest+1u,this->vertexBufferWithMatrix.get(source+1u));

                        buffer.set(dest+3u,this->vertexBufferWithMatrix.get(source+2u));
                        buffer.set(dest+4u,this->vertexBufferWithMatrix.get(source+3u));
                        buffer.set(dest+5u,this->vertexBufferWithMatrix.get(source+4u));
                        buffer.set(dest+6u,this->vertexBufferWithMatrix.get(source+5u));

                        buffer.set(dest+7u,this->vertexBufferWithMatrix.get(source+6u));
                        buffer.set(dest+8u,this->vertexBufferWithMatrix.get(source+7u));
                        buffer.set(dest+9u,this->vertexBufferWithMatrix.get(source+8u));

                        buffer.set(dest+10u,this->vertexBufferWithMatrix.get(source+9u));
                        buffer.set(dest+11u,this->vertexBufferWithMatrix.get(source+10u));

                        source+=vboSizeofMesh3D[this->vboWithMatrixType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                default:
                    break;
                }
            }
                break;
            case edk::GU::vbo_XYZ:
            {
                switch(type){
                case edk::GU::vbo_XY:
                {
                    //edk::GU::vbo_XYZ -> edk::GU::vbo_XY
                    for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
                        buffer.set(dest,this->vertexBufferWithMatrix.get(source));
                        buffer.set(dest+1u,this->vertexBufferWithMatrix.get(source+1u));

                        source+=vboSizeofMesh3D[this->vboWithMatrixType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_NxNyNz:
                {
                    //edk::GU::vbo_XYZ -> edk::GU::vbo_XY_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
                        buffer.set(dest,this->vertexBufferWithMatrix.get(source));
                        buffer.set(dest+1u,this->vertexBufferWithMatrix.get(source+1u));

                        source+=vboSizeofMesh3D[this->vboWithMatrixType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGB:
                {
                    //edk::GU::vbo_XYZ -> edk::GU::vbo_XY_RGB
                    for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
                        buffer.set(dest,this->vertexBufferWithMatrix.get(source));
                        buffer.set(dest+1u,this->vertexBufferWithMatrix.get(source+1u));

                        source+=vboSizeofMesh3D[this->vboWithMatrixType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGBA:
                {
                    //edk::GU::vbo_XYZ -> edk::GU::vbo_XY_RGBA
                    for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
                        buffer.set(dest,this->vertexBufferWithMatrix.get(source));
                        buffer.set(dest+1u,this->vertexBufferWithMatrix.get(source+1u));

                        source+=vboSizeofMesh3D[this->vboWithMatrixType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGB_NxNyNz:
                {
                    //edk::GU::vbo_XYZ -> edk::GU::vbo_XY_RGB_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
                        buffer.set(dest,this->vertexBufferWithMatrix.get(source));
                        buffer.set(dest+1u,this->vertexBufferWithMatrix.get(source+1u));

                        source+=vboSizeofMesh3D[this->vboWithMatrixType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGBA_NxNyNz:
                {
                    //edk::GU::vbo_XYZ -> edk::GU::vbo_XY_RGBA_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
                        buffer.set(dest,this->vertexBufferWithMatrix.get(source));
                        buffer.set(dest+1u,this->vertexBufferWithMatrix.get(source+1u));


                        source+=vboSizeofMesh3D[this->vboWithMatrixType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGB_NxNyNz_UVxUVy:
                {
                    //edk::GU::vbo_XYZ -> edk::GU::vbo_XY_RGB_NxNyNz_UVxUVy
                    for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
                        buffer.set(dest,this->vertexBufferWithMatrix.get(source));
                        buffer.set(dest+1u,this->vertexBufferWithMatrix.get(source+1u));

                        source+=vboSizeofMesh3D[this->vboWithMatrixType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy:
                {
                    //edk::GU::vbo_XYZ -> edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy
                    for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
                        buffer.set(dest,this->vertexBufferWithMatrix.get(source));
                        buffer.set(dest+1u,this->vertexBufferWithMatrix.get(source+1u));

                        source+=vboSizeofMesh3D[this->vboWithMatrixType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_NxNyNz:
                {
                    //edk::GU::vbo_XYZ -> edk::GU::vbo_XYZ_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
                        buffer.set(dest,this->vertexBufferWithMatrix.get(source));
                        buffer.set(dest+1u,this->vertexBufferWithMatrix.get(source+1u));
                        buffer.set(dest+2u,this->vertexBufferWithMatrix.get(source+2u));

                        source+=vboSizeofMesh3D[this->vboWithMatrixType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGB:
                {
                    //edk::GU::vbo_XYZ -> edk::GU::vbo_XYZ_RGB
                    for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
                        buffer.set(dest,this->vertexBufferWithMatrix.get(source));
                        buffer.set(dest+1u,this->vertexBufferWithMatrix.get(source+1u));
                        buffer.set(dest+2u,this->vertexBufferWithMatrix.get(source+2u));

                        source+=vboSizeofMesh3D[this->vboWithMatrixType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGBA:
                {
                    //edk::GU::vbo_XYZ -> edk::GU::vbo_XYZ_RGBA
                    for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
                        buffer.set(dest,this->vertexBufferWithMatrix.get(source));
                        buffer.set(dest+1u,this->vertexBufferWithMatrix.get(source+1u));
                        buffer.set(dest+2u,this->vertexBufferWithMatrix.get(source+2u));

                        source+=vboSizeofMesh3D[this->vboWithMatrixType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGB_NxNyNz:
                {
                    //edk::GU::vbo_XYZ -> edk::GU::vbo_XYZ_RGB_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
                        buffer.set(dest,this->vertexBufferWithMatrix.get(source));
                        buffer.set(dest+1u,this->vertexBufferWithMatrix.get(source+1u));
                        buffer.set(dest+2u,this->vertexBufferWithMatrix.get(source+2u));

                        source+=vboSizeofMesh3D[this->vboWithMatrixType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGBA_NxNyNz:
                {
                    //edk::GU::vbo_XYZ -> edk::GU::vbo_XYZ_RGBA_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
                        buffer.set(dest,this->vertexBufferWithMatrix.get(source));
                        buffer.set(dest+1u,this->vertexBufferWithMatrix.get(source+1u));
                        buffer.set(dest+2u,this->vertexBufferWithMatrix.get(source+2u));

                        source+=vboSizeofMesh3D[this->vboWithMatrixType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGB_NxNyNz_UVxUVy:
                {
                    //edk::GU::vbo_XYZ -> edk::GU::vbo_XYZ_RGB_NxNyNz_UVxUVy
                    for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
                        buffer.set(dest,this->vertexBufferWithMatrix.get(source));
                        buffer.set(dest+1u,this->vertexBufferWithMatrix.get(source+1u));
                        buffer.set(dest+2u,this->vertexBufferWithMatrix.get(source+2u));

                        source+=vboSizeofMesh3D[this->vboWithMatrixType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy:
                {
                    //edk::GU::vbo_XYZ -> edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy
                    for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
                        buffer.set(dest,this->vertexBufferWithMatrix.get(source));
                        buffer.set(dest+1u,this->vertexBufferWithMatrix.get(source+1u));
                        buffer.set(dest+2u,this->vertexBufferWithMatrix.get(source+2u));

                        source+=vboSizeofMesh3D[this->vboWithMatrixType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                default:
                    break;
                }
            }
                break;
            case edk::GU::vbo_XYZ_NxNyNz:
            {
                switch(type){
                case edk::GU::vbo_XY:
                {
                    //edk::GU::vbo_XYZ_NxNyNz -> edk::GU::vbo_XY
                    for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
                        buffer.set(dest,this->vertexBufferWithMatrix.get(source));
                        buffer.set(dest+1u,this->vertexBufferWithMatrix.get(source+1u));

                        source+=vboSizeofMesh3D[this->vboWithMatrixType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_NxNyNz:
                {
                    //edk::GU::vbo_XYZ_NxNyNz -> edk::GU::vbo_XY_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
                        buffer.set(dest,this->vertexBufferWithMatrix.get(source));
                        buffer.set(dest+1u,this->vertexBufferWithMatrix.get(source+1u));

                        buffer.set(dest+2u,this->vertexBufferWithMatrix.get(source+3u));
                        buffer.set(dest+3u,this->vertexBufferWithMatrix.get(source+4u));
                        buffer.set(dest+4u,this->vertexBufferWithMatrix.get(source+5u));

                        source+=vboSizeofMesh3D[this->vboWithMatrixType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGB:
                {
                    //edk::GU::vbo_XYZ_NxNyNz -> edk::GU::vbo_XY_RGB
                    for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
                        buffer.set(dest,this->vertexBufferWithMatrix.get(source));
                        buffer.set(dest+1u,this->vertexBufferWithMatrix.get(source+1u));

                        source+=vboSizeofMesh3D[this->vboWithMatrixType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGBA:
                {
                    //edk::GU::vbo_XYZ_NxNyNz -> edk::GU::vbo_XY_RGBA
                    for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
                        buffer.set(dest,this->vertexBufferWithMatrix.get(source));
                        buffer.set(dest+1u,this->vertexBufferWithMatrix.get(source+1u));

                        source+=vboSizeofMesh3D[this->vboWithMatrixType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGB_NxNyNz:
                {
                    //edk::GU::vbo_XYZ_NxNyNz -> edk::GU::vbo_XY_RGB_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
                        buffer.set(dest,this->vertexBufferWithMatrix.get(source));
                        buffer.set(dest+1u,this->vertexBufferWithMatrix.get(source+1u));

                        buffer.set(dest+5u,this->vertexBufferWithMatrix.get(source+3u));
                        buffer.set(dest+6u,this->vertexBufferWithMatrix.get(source+4u));
                        buffer.set(dest+7u,this->vertexBufferWithMatrix.get(source+5u));

                        source+=vboSizeofMesh3D[this->vboWithMatrixType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGBA_NxNyNz:
                {
                    //edk::GU::vbo_XYZ_NxNyNz -> edk::GU::vbo_XY_RGBA_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
                        buffer.set(dest,this->vertexBufferWithMatrix.get(source));
                        buffer.set(dest+1u,this->vertexBufferWithMatrix.get(source+1u));

                        buffer.set(dest+6u,this->vertexBufferWithMatrix.get(source+3u));
                        buffer.set(dest+7u,this->vertexBufferWithMatrix.get(source+4u));
                        buffer.set(dest+8u,this->vertexBufferWithMatrix.get(source+5u));

                        source+=vboSizeofMesh3D[this->vboWithMatrixType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGB_NxNyNz_UVxUVy:
                {
                    //edk::GU::vbo_XYZ_NxNyNz -> edk::GU::vbo_XY_RGB_NxNyNz_UVxUVy
                    for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
                        buffer.set(dest,this->vertexBufferWithMatrix.get(source));
                        buffer.set(dest+1u,this->vertexBufferWithMatrix.get(source+1u));

                        buffer.set(dest+5u,this->vertexBufferWithMatrix.get(source+3u));
                        buffer.set(dest+6u,this->vertexBufferWithMatrix.get(source+4u));
                        buffer.set(dest+7u,this->vertexBufferWithMatrix.get(source+5u));

                        source+=vboSizeofMesh3D[this->vboWithMatrixType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy:
                {
                    //edk::GU::vbo_XYZ_NxNyNz -> edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy
                    for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
                        buffer.set(dest,this->vertexBufferWithMatrix.get(source));
                        buffer.set(dest+1u,this->vertexBufferWithMatrix.get(source+1u));

                        buffer.set(dest+6u,this->vertexBufferWithMatrix.get(source+3u));
                        buffer.set(dest+7u,this->vertexBufferWithMatrix.get(source+4u));
                        buffer.set(dest+8u,this->vertexBufferWithMatrix.get(source+5u));

                        source+=vboSizeofMesh3D[this->vboWithMatrixType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ:
                {
                    //edk::GU::vbo_XYZ_NxNyNz -> edk::GU::vbo_XYZ
                    for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
                        buffer.set(dest,this->vertexBufferWithMatrix.get(source));
                        buffer.set(dest+1u,this->vertexBufferWithMatrix.get(source+1u));
                        buffer.set(dest+2u,this->vertexBufferWithMatrix.get(source+2u));

                        source+=vboSizeofMesh3D[this->vboWithMatrixType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGB:
                {
                    //edk::GU::vbo_XYZ_NxNyNz -> edk::GU::vbo_XYZ_RGB
                    for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
                        buffer.set(dest,this->vertexBufferWithMatrix.get(source));
                        buffer.set(dest+1u,this->vertexBufferWithMatrix.get(source+1u));
                        buffer.set(dest+2u,this->vertexBufferWithMatrix.get(source+2u));

                        source+=vboSizeofMesh3D[this->vboWithMatrixType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGBA:
                {
                    //edk::GU::vbo_XYZ_NxNyNz -> edk::GU::vbo_XYZ_RGBA
                    for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
                        buffer.set(dest,this->vertexBufferWithMatrix.get(source));
                        buffer.set(dest+1u,this->vertexBufferWithMatrix.get(source+1u));
                        buffer.set(dest+2u,this->vertexBufferWithMatrix.get(source+2u));

                        source+=vboSizeofMesh3D[this->vboWithMatrixType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGB_NxNyNz:
                {
                    //edk::GU::vbo_XYZ_NxNyNz -> edk::GU::vbo_XYZ_RGB_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
                        buffer.set(dest,this->vertexBufferWithMatrix.get(source));
                        buffer.set(dest+1u,this->vertexBufferWithMatrix.get(source+1u));
                        buffer.set(dest+2u,this->vertexBufferWithMatrix.get(source+2u));

                        buffer.set(dest+6u,this->vertexBufferWithMatrix.get(source+3u));
                        buffer.set(dest+7u,this->vertexBufferWithMatrix.get(source+4u));
                        buffer.set(dest+8u,this->vertexBufferWithMatrix.get(source+5u));

                        source+=vboSizeofMesh3D[this->vboWithMatrixType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGBA_NxNyNz:
                {
                    //edk::GU::vbo_XYZ_NxNyNz -> edk::GU::vbo_XYZ_RGBA_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
                        buffer.set(dest,this->vertexBufferWithMatrix.get(source));
                        buffer.set(dest+1u,this->vertexBufferWithMatrix.get(source+1u));
                        buffer.set(dest+2u,this->vertexBufferWithMatrix.get(source+2u));

                        buffer.set(dest+7u,this->vertexBufferWithMatrix.get(source+3u));
                        buffer.set(dest+8u,this->vertexBufferWithMatrix.get(source+4u));
                        buffer.set(dest+9u,this->vertexBufferWithMatrix.get(source+5u));

                        source+=vboSizeofMesh3D[this->vboWithMatrixType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGB_NxNyNz_UVxUVy:
                {
                    //edk::GU::vbo_XYZ_NxNyNz -> edk::GU::vbo_XYZ_RGB_NxNyNz_UVxUVy
                    for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
                        buffer.set(dest,this->vertexBufferWithMatrix.get(source));
                        buffer.set(dest+1u,this->vertexBufferWithMatrix.get(source+1u));
                        buffer.set(dest+2u,this->vertexBufferWithMatrix.get(source+2u));

                        buffer.set(dest+6u,this->vertexBufferWithMatrix.get(source+3u));
                        buffer.set(dest+7u,this->vertexBufferWithMatrix.get(source+4u));
                        buffer.set(dest+8u,this->vertexBufferWithMatrix.get(source+5u));

                        source+=vboSizeofMesh3D[this->vboWithMatrixType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy:
                {
                    //edk::GU::vbo_XYZ_NxNyNz -> edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy
                    for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
                        buffer.set(dest,this->vertexBufferWithMatrix.get(source));
                        buffer.set(dest+1u,this->vertexBufferWithMatrix.get(source+1u));
                        buffer.set(dest+2u,this->vertexBufferWithMatrix.get(source+2u));

                        buffer.set(dest+7u,this->vertexBufferWithMatrix.get(source+3u));
                        buffer.set(dest+8u,this->vertexBufferWithMatrix.get(source+4u));
                        buffer.set(dest+9u,this->vertexBufferWithMatrix.get(source+5u));

                        source+=vboSizeofMesh3D[this->vboWithMatrixType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                default:
                    break;
                }
            }
                break;
            case edk::GU::vbo_XYZ_RGB:
            {
                switch(type){
                case edk::GU::vbo_XY:
                {
                    //edk::GU::vbo_XYZ_RGB -> edk::GU::vbo_XY
                    for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
                        buffer.set(dest,this->vertexBufferWithMatrix.get(source));
                        buffer.set(dest+1u,this->vertexBufferWithMatrix.get(source+1u));

                        source+=vboSizeofMesh3D[this->vboWithMatrixType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_NxNyNz:
                {
                    //edk::GU::vbo_XYZ_RGB -> edk::GU::vbo_XY_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
                        buffer.set(dest,this->vertexBufferWithMatrix.get(source));
                        buffer.set(dest+1u,this->vertexBufferWithMatrix.get(source+1u));

                        source+=vboSizeofMesh3D[this->vboWithMatrixType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGB:
                {
                    //edk::GU::vbo_XYZ_RGB -> edk::GU::vbo_XY_RGB
                    for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
                        buffer.set(dest,this->vertexBufferWithMatrix.get(source));
                        buffer.set(dest+1u,this->vertexBufferWithMatrix.get(source+1u));

                        buffer.set(dest+2u,this->vertexBufferWithMatrix.get(source+3u));
                        buffer.set(dest+3u,this->vertexBufferWithMatrix.get(source+4u));
                        buffer.set(dest+4u,this->vertexBufferWithMatrix.get(source+5u));

                        source+=vboSizeofMesh3D[this->vboWithMatrixType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGBA:
                {
                    //edk::GU::vbo_XYZ_RGB -> edk::GU::vbo_XY_RGBA
                    for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
                        buffer.set(dest,this->vertexBufferWithMatrix.get(source));
                        buffer.set(dest+1u,this->vertexBufferWithMatrix.get(source+1u));

                        buffer.set(dest+2u,this->vertexBufferWithMatrix.get(source+3u));
                        buffer.set(dest+3u,this->vertexBufferWithMatrix.get(source+4u));
                        buffer.set(dest+4u,this->vertexBufferWithMatrix.get(source+5u));

                        source+=vboSizeofMesh3D[this->vboWithMatrixType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGB_NxNyNz:
                {
                    //edk::GU::vbo_XYZ_RGB -> edk::GU::vbo_XY_RGB_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
                        buffer.set(dest,this->vertexBufferWithMatrix.get(source));
                        buffer.set(dest+1u,this->vertexBufferWithMatrix.get(source+1u));

                        buffer.set(dest+2u,this->vertexBufferWithMatrix.get(source+3u));
                        buffer.set(dest+3u,this->vertexBufferWithMatrix.get(source+4u));
                        buffer.set(dest+4u,this->vertexBufferWithMatrix.get(source+5u));

                        source+=vboSizeofMesh3D[this->vboWithMatrixType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGBA_NxNyNz:
                {
                    //edk::GU::vbo_XYZ_RGB -> edk::GU::vbo_XY_RGBA_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
                        buffer.set(dest,this->vertexBufferWithMatrix.get(source));
                        buffer.set(dest+1u,this->vertexBufferWithMatrix.get(source+1u));

                        buffer.set(dest+2u,this->vertexBufferWithMatrix.get(source+3u));
                        buffer.set(dest+3u,this->vertexBufferWithMatrix.get(source+4u));
                        buffer.set(dest+4u,this->vertexBufferWithMatrix.get(source+5u));

                        source+=vboSizeofMesh3D[this->vboWithMatrixType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGB_NxNyNz_UVxUVy:
                {
                    //edk::GU::vbo_XYZ_RGB -> edk::GU::vbo_XY_RGB_NxNyNz_UVxUVy
                    for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
                        buffer.set(dest,this->vertexBufferWithMatrix.get(source));
                        buffer.set(dest+1u,this->vertexBufferWithMatrix.get(source+1u));

                        buffer.set(dest+2u,this->vertexBufferWithMatrix.get(source+3u));
                        buffer.set(dest+3u,this->vertexBufferWithMatrix.get(source+4u));
                        buffer.set(dest+4u,this->vertexBufferWithMatrix.get(source+5u));

                        source+=vboSizeofMesh3D[this->vboWithMatrixType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy:
                {
                    //edk::GU::vbo_XYZ_RGB -> edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy
                    for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
                        buffer.set(dest,this->vertexBufferWithMatrix.get(source));
                        buffer.set(dest+1u,this->vertexBufferWithMatrix.get(source+1u));

                        buffer.set(dest+2u,this->vertexBufferWithMatrix.get(source+3u));
                        buffer.set(dest+3u,this->vertexBufferWithMatrix.get(source+4u));
                        buffer.set(dest+4u,this->vertexBufferWithMatrix.get(source+5u));

                        source+=vboSizeofMesh3D[this->vboWithMatrixType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ:
                {
                    //edk::GU::vbo_XYZ_RGB -> edk::GU::vbo_XYZ
                    for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
                        buffer.set(dest,this->vertexBufferWithMatrix.get(source));
                        buffer.set(dest+1u,this->vertexBufferWithMatrix.get(source+1u));
                        buffer.set(dest+2u,this->vertexBufferWithMatrix.get(source+2u));

                        source+=vboSizeofMesh3D[this->vboWithMatrixType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_NxNyNz:
                {
                    //edk::GU::vbo_XYZ_RGB -> edk::GU::vbo_XYZ_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
                        buffer.set(dest,this->vertexBufferWithMatrix.get(source));
                        buffer.set(dest+1u,this->vertexBufferWithMatrix.get(source+1u));
                        buffer.set(dest+2u,this->vertexBufferWithMatrix.get(source+2u));

                        source+=vboSizeofMesh3D[this->vboWithMatrixType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGBA:
                {
                    //edk::GU::vbo_XYZ_RGB -> edk::GU::vbo_XYZ_RGBA
                    for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
                        buffer.set(dest,this->vertexBufferWithMatrix.get(source));
                        buffer.set(dest+1u,this->vertexBufferWithMatrix.get(source+1u));
                        buffer.set(dest+2u,this->vertexBufferWithMatrix.get(source+2u));

                        buffer.set(dest+3u,this->vertexBufferWithMatrix.get(source+3u));
                        buffer.set(dest+4u,this->vertexBufferWithMatrix.get(source+4u));
                        buffer.set(dest+5u,this->vertexBufferWithMatrix.get(source+5u));

                        source+=vboSizeofMesh3D[this->vboWithMatrixType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGB_NxNyNz:
                {
                    //edk::GU::vbo_XYZ_RGB -> edk::GU::vbo_XYZ_RGB_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
                        buffer.set(dest,this->vertexBufferWithMatrix.get(source));
                        buffer.set(dest+1u,this->vertexBufferWithMatrix.get(source+1u));
                        buffer.set(dest+2u,this->vertexBufferWithMatrix.get(source+2u));

                        buffer.set(dest+3u,this->vertexBufferWithMatrix.get(source+3u));
                        buffer.set(dest+4u,this->vertexBufferWithMatrix.get(source+4u));
                        buffer.set(dest+5u,this->vertexBufferWithMatrix.get(source+5u));

                        source+=vboSizeofMesh3D[this->vboWithMatrixType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGBA_NxNyNz:
                {
                    //edk::GU::vbo_XYZ_RGB -> edk::GU::vbo_XYZ_RGBA_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
                        buffer.set(dest,this->vertexBufferWithMatrix.get(source));
                        buffer.set(dest+1u,this->vertexBufferWithMatrix.get(source+1u));
                        buffer.set(dest+2u,this->vertexBufferWithMatrix.get(source+2u));

                        buffer.set(dest+3u,this->vertexBufferWithMatrix.get(source+3u));
                        buffer.set(dest+4u,this->vertexBufferWithMatrix.get(source+4u));
                        buffer.set(dest+5u,this->vertexBufferWithMatrix.get(source+5u));


                        source+=vboSizeofMesh3D[this->vboWithMatrixType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGB_NxNyNz_UVxUVy:
                {
                    //edk::GU::vbo_XYZ_RGB -> edk::GU::vbo_XYZ_RGB_NxNyNz_UVxUVy
                    for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
                        buffer.set(dest,this->vertexBufferWithMatrix.get(source));
                        buffer.set(dest+1u,this->vertexBufferWithMatrix.get(source+1u));
                        buffer.set(dest+2u,this->vertexBufferWithMatrix.get(source+2u));

                        buffer.set(dest+3u,this->vertexBufferWithMatrix.get(source+3u));
                        buffer.set(dest+4u,this->vertexBufferWithMatrix.get(source+4u));
                        buffer.set(dest+5u,this->vertexBufferWithMatrix.get(source+5u));

                        source+=vboSizeofMesh3D[this->vboWithMatrixType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy:
                {
                    //edk::GU::vbo_XYZ_RGB -> edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy
                    for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
                        buffer.set(dest,this->vertexBufferWithMatrix.get(source));
                        buffer.set(dest+1u,this->vertexBufferWithMatrix.get(source+1u));
                        buffer.set(dest+2u,this->vertexBufferWithMatrix.get(source+2u));

                        buffer.set(dest+3u,this->vertexBufferWithMatrix.get(source+3u));
                        buffer.set(dest+4u,this->vertexBufferWithMatrix.get(source+4u));
                        buffer.set(dest+5u,this->vertexBufferWithMatrix.get(source+5u));

                        source+=vboSizeofMesh3D[this->vboWithMatrixType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                default:
                    break;
                }
            }
                break;
            case edk::GU::vbo_XYZ_RGBA:
            {
                switch(type){
                case edk::GU::vbo_XY:
                {
                    //edk::GU::vbo_XYZ_RGBA -> edk::GU::vbo_XY
                    for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
                        buffer.set(dest,this->vertexBufferWithMatrix.get(source));
                        buffer.set(dest+1u,this->vertexBufferWithMatrix.get(source+1u));

                        source+=vboSizeofMesh3D[this->vboWithMatrixType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_NxNyNz:
                {
                    //edk::GU::vbo_XYZ_RGBA -> edk::GU::vbo_XY_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
                        buffer.set(dest,this->vertexBufferWithMatrix.get(source));
                        buffer.set(dest+1u,this->vertexBufferWithMatrix.get(source+1u));

                        source+=vboSizeofMesh3D[this->vboWithMatrixType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGB:
                {
                    //edk::GU::vbo_XYZ_RGBA -> edk::GU::vbo_XY_RGB
                    for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
                        buffer.set(dest,this->vertexBufferWithMatrix.get(source));
                        buffer.set(dest+1u,this->vertexBufferWithMatrix.get(source+1u));

                        buffer.set(dest+2u,this->vertexBufferWithMatrix.get(source+3u));
                        buffer.set(dest+3u,this->vertexBufferWithMatrix.get(source+4u));
                        buffer.set(dest+4u,this->vertexBufferWithMatrix.get(source+5u));

                        source+=vboSizeofMesh3D[this->vboWithMatrixType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGBA:
                {
                    //edk::GU::vbo_XYZ_RGBA -> edk::GU::vbo_XY_RGBA
                    for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
                        buffer.set(dest,this->vertexBufferWithMatrix.get(source));
                        buffer.set(dest+1u,this->vertexBufferWithMatrix.get(source+1u));

                        buffer.set(dest+2u,this->vertexBufferWithMatrix.get(source+3u));
                        buffer.set(dest+3u,this->vertexBufferWithMatrix.get(source+4u));
                        buffer.set(dest+4u,this->vertexBufferWithMatrix.get(source+5u));
                        buffer.set(dest+5u,this->vertexBufferWithMatrix.get(source+6u));

                        source+=vboSizeofMesh3D[this->vboWithMatrixType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGB_NxNyNz:
                {
                    //edk::GU::vbo_XYZ_RGBA -> edk::GU::vbo_XY_RGB_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
                        buffer.set(dest,this->vertexBufferWithMatrix.get(source));
                        buffer.set(dest+1u,this->vertexBufferWithMatrix.get(source+1u));

                        buffer.set(dest+2u,this->vertexBufferWithMatrix.get(source+3u));
                        buffer.set(dest+3u,this->vertexBufferWithMatrix.get(source+4u));
                        buffer.set(dest+4u,this->vertexBufferWithMatrix.get(source+5u));

                        source+=vboSizeofMesh3D[this->vboWithMatrixType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGBA_NxNyNz:
                {
                    //edk::GU::vbo_XYZ_RGBA -> edk::GU::vbo_XY_RGBA_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
                        buffer.set(dest,this->vertexBufferWithMatrix.get(source));
                        buffer.set(dest+1u,this->vertexBufferWithMatrix.get(source+1u));

                        buffer.set(dest+2u,this->vertexBufferWithMatrix.get(source+3u));
                        buffer.set(dest+3u,this->vertexBufferWithMatrix.get(source+4u));
                        buffer.set(dest+4u,this->vertexBufferWithMatrix.get(source+5u));
                        buffer.set(dest+5u,this->vertexBufferWithMatrix.get(source+6u));

                        source+=vboSizeofMesh3D[this->vboWithMatrixType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGB_NxNyNz_UVxUVy:
                {
                    //edk::GU::vbo_XYZ_RGBA -> edk::GU::vbo_XY_RGB_NxNyNz_UVxUVy
                    for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
                        buffer.set(dest,this->vertexBufferWithMatrix.get(source));
                        buffer.set(dest+1u,this->vertexBufferWithMatrix.get(source+1u));

                        buffer.set(dest+2u,this->vertexBufferWithMatrix.get(source+3u));
                        buffer.set(dest+3u,this->vertexBufferWithMatrix.get(source+4u));
                        buffer.set(dest+4u,this->vertexBufferWithMatrix.get(source+5u));

                        source+=vboSizeofMesh3D[this->vboWithMatrixType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy:
                {
                    //edk::GU::vbo_XYZ_RGBA -> edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy
                    for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
                        buffer.set(dest,this->vertexBufferWithMatrix.get(source));
                        buffer.set(dest+1u,this->vertexBufferWithMatrix.get(source+1u));

                        buffer.set(dest+2u,this->vertexBufferWithMatrix.get(source+3u));
                        buffer.set(dest+3u,this->vertexBufferWithMatrix.get(source+4u));
                        buffer.set(dest+4u,this->vertexBufferWithMatrix.get(source+5u));
                        buffer.set(dest+5u,this->vertexBufferWithMatrix.get(source+6u));

                        source+=vboSizeofMesh3D[this->vboWithMatrixType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ:
                {
                    //edk::GU::vbo_XYZ_RGBA -> edk::GU::vbo_XYZ
                    for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
                        buffer.set(dest,this->vertexBufferWithMatrix.get(source));
                        buffer.set(dest+1u,this->vertexBufferWithMatrix.get(source+1u));
                        buffer.set(dest+2u,this->vertexBufferWithMatrix.get(source+2u));

                        source+=vboSizeofMesh3D[this->vboWithMatrixType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_NxNyNz:
                {
                    //edk::GU::vbo_XYZ_RGBA -> edk::GU::vbo_XYZ_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
                        buffer.set(dest,this->vertexBufferWithMatrix.get(source));
                        buffer.set(dest+1u,this->vertexBufferWithMatrix.get(source+1u));
                        buffer.set(dest+2u,this->vertexBufferWithMatrix.get(source+2u));

                        source+=vboSizeofMesh3D[this->vboWithMatrixType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGB:
                {
                    //edk::GU::vbo_XYZ_RGBA -> edk::GU::vbo_XYZ_RGB
                    for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
                        buffer.set(dest,this->vertexBufferWithMatrix.get(source));
                        buffer.set(dest+1u,this->vertexBufferWithMatrix.get(source+1u));
                        buffer.set(dest+2u,this->vertexBufferWithMatrix.get(source+2u));

                        buffer.set(dest+3u,this->vertexBufferWithMatrix.get(source+3u));
                        buffer.set(dest+4u,this->vertexBufferWithMatrix.get(source+4u));
                        buffer.set(dest+5u,this->vertexBufferWithMatrix.get(source+5u));

                        source+=vboSizeofMesh3D[this->vboWithMatrixType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGB_NxNyNz:
                {
                    //edk::GU::vbo_XYZ_RGBA -> edk::GU::vbo_XYZ_RGB_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
                        buffer.set(dest,this->vertexBufferWithMatrix.get(source));
                        buffer.set(dest+1u,this->vertexBufferWithMatrix.get(source+1u));
                        buffer.set(dest+2u,this->vertexBufferWithMatrix.get(source+2u));

                        buffer.set(dest+3u,this->vertexBufferWithMatrix.get(source+3u));
                        buffer.set(dest+4u,this->vertexBufferWithMatrix.get(source+4u));
                        buffer.set(dest+5u,this->vertexBufferWithMatrix.get(source+5u));

                        source+=vboSizeofMesh3D[this->vboWithMatrixType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGBA_NxNyNz:
                {
                    //edk::GU::vbo_XYZ_RGBA -> edk::GU::vbo_XYZ_RGBA_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
                        buffer.set(dest,this->vertexBufferWithMatrix.get(source));
                        buffer.set(dest+1u,this->vertexBufferWithMatrix.get(source+1u));
                        buffer.set(dest+2u,this->vertexBufferWithMatrix.get(source+2u));

                        buffer.set(dest+3u,this->vertexBufferWithMatrix.get(source+3u));
                        buffer.set(dest+4u,this->vertexBufferWithMatrix.get(source+4u));
                        buffer.set(dest+5u,this->vertexBufferWithMatrix.get(source+5u));
                        buffer.set(dest+6u,this->vertexBufferWithMatrix.get(source+6u));

                        source+=vboSizeofMesh3D[this->vboWithMatrixType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGB_NxNyNz_UVxUVy:
                {
                    //edk::GU::vbo_XYZ_RGBA -> edk::GU::vbo_XYZ_RGB_NxNyNz_UVxUVy
                    for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
                        buffer.set(dest,this->vertexBufferWithMatrix.get(source));
                        buffer.set(dest+1u,this->vertexBufferWithMatrix.get(source+1u));
                        buffer.set(dest+2u,this->vertexBufferWithMatrix.get(source+2u));

                        buffer.set(dest+3u,this->vertexBufferWithMatrix.get(source+3u));
                        buffer.set(dest+4u,this->vertexBufferWithMatrix.get(source+4u));
                        buffer.set(dest+5u,this->vertexBufferWithMatrix.get(source+5u));

                        source+=vboSizeofMesh3D[this->vboWithMatrixType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy:
                {
                    //edk::GU::vbo_XYZ_RGBA -> edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy
                    for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
                        buffer.set(dest,this->vertexBufferWithMatrix.get(source));
                        buffer.set(dest+1u,this->vertexBufferWithMatrix.get(source+1u));
                        buffer.set(dest+2u,this->vertexBufferWithMatrix.get(source+2u));

                        buffer.set(dest+3u,this->vertexBufferWithMatrix.get(source+3u));
                        buffer.set(dest+4u,this->vertexBufferWithMatrix.get(source+4u));
                        buffer.set(dest+5u,this->vertexBufferWithMatrix.get(source+5u));
                        buffer.set(dest+6u,this->vertexBufferWithMatrix.get(source+6u));

                        source+=vboSizeofMesh3D[this->vboWithMatrixType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                default:
                    break;
                }
            }
                break;
            case edk::GU::vbo_XYZ_RGB_NxNyNz:
            {
                switch(type){
                case edk::GU::vbo_XY:
                {
                    //edk::GU::vbo_XYZ_RGB_NxNyNz -> edk::GU::vbo_XY
                    for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
                        buffer.set(dest,this->vertexBufferWithMatrix.get(source));
                        buffer.set(dest+1u,this->vertexBufferWithMatrix.get(source+1u));

                        source+=vboSizeofMesh3D[this->vboWithMatrixType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_NxNyNz:
                {
                    //edk::GU::vbo_XYZ_RGB_NxNyNz -> edk::GU::vbo_XY_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
                        buffer.set(dest,this->vertexBufferWithMatrix.get(source));
                        buffer.set(dest+1u,this->vertexBufferWithMatrix.get(source+1u));

                        buffer.set(dest+2u,this->vertexBufferWithMatrix.get(source+6u));
                        buffer.set(dest+3u,this->vertexBufferWithMatrix.get(source+7u));
                        buffer.set(dest+4u,this->vertexBufferWithMatrix.get(source+8u));

                        source+=vboSizeofMesh3D[this->vboWithMatrixType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGB:
                {
                    //edk::GU::vbo_XYZ_RGB_NxNyNz -> edk::GU::vbo_XY_RGB
                    for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
                        buffer.set(dest,this->vertexBufferWithMatrix.get(source));
                        buffer.set(dest+1u,this->vertexBufferWithMatrix.get(source+1u));

                        buffer.set(dest+2u,this->vertexBufferWithMatrix.get(source+3u));
                        buffer.set(dest+3u,this->vertexBufferWithMatrix.get(source+4u));
                        buffer.set(dest+4u,this->vertexBufferWithMatrix.get(source+5u));

                        source+=vboSizeofMesh3D[this->vboWithMatrixType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGBA:
                {
                    //edk::GU::vbo_XYZ_RGB_NxNyNz -> edk::GU::vbo_XY_RGBA
                    for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
                        buffer.set(dest,this->vertexBufferWithMatrix.get(source));
                        buffer.set(dest+1u,this->vertexBufferWithMatrix.get(source+1u));

                        buffer.set(dest+2u,this->vertexBufferWithMatrix.get(source+3u));
                        buffer.set(dest+3u,this->vertexBufferWithMatrix.get(source+4u));
                        buffer.set(dest+4u,this->vertexBufferWithMatrix.get(source+5u));

                        source+=vboSizeofMesh3D[this->vboWithMatrixType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGB_NxNyNz:
                {
                    //edk::GU::vbo_XYZ_RGB_NxNyNz -> edk::GU::vbo_XY_RGB_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
                        buffer.set(dest,this->vertexBufferWithMatrix.get(source));
                        buffer.set(dest+1u,this->vertexBufferWithMatrix.get(source+1u));

                        buffer.set(dest+2u,this->vertexBufferWithMatrix.get(source+3u));
                        buffer.set(dest+3u,this->vertexBufferWithMatrix.get(source+4u));
                        buffer.set(dest+4u,this->vertexBufferWithMatrix.get(source+5u));

                        buffer.set(dest+5u,this->vertexBufferWithMatrix.get(source+6u));
                        buffer.set(dest+6u,this->vertexBufferWithMatrix.get(source+7u));
                        buffer.set(dest+7u,this->vertexBufferWithMatrix.get(source+8u));

                        source+=vboSizeofMesh3D[this->vboWithMatrixType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGBA_NxNyNz:
                {
                    //edk::GU::vbo_XYZ_RGB_NxNyNz -> edk::GU::vbo_XY_RGBA_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
                        buffer.set(dest,this->vertexBufferWithMatrix.get(source));
                        buffer.set(dest+1u,this->vertexBufferWithMatrix.get(source+1u));

                        buffer.set(dest+2u,this->vertexBufferWithMatrix.get(source+3u));
                        buffer.set(dest+3u,this->vertexBufferWithMatrix.get(source+4u));
                        buffer.set(dest+4u,this->vertexBufferWithMatrix.get(source+5u));

                        buffer.set(dest+6u,this->vertexBufferWithMatrix.get(source+6u));
                        buffer.set(dest+7u,this->vertexBufferWithMatrix.get(source+7u));
                        buffer.set(dest+8u,this->vertexBufferWithMatrix.get(source+8u));

                        source+=vboSizeofMesh3D[this->vboWithMatrixType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGB_NxNyNz_UVxUVy:
                {
                    //edk::GU::vbo_XYZ_RGB_NxNyNz -> edk::GU::vbo_XY_RGB_NxNyNz_UVxUVy
                    for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
                        buffer.set(dest,this->vertexBufferWithMatrix.get(source));
                        buffer.set(dest+1u,this->vertexBufferWithMatrix.get(source+1u));

                        buffer.set(dest+2u,this->vertexBufferWithMatrix.get(source+3u));
                        buffer.set(dest+3u,this->vertexBufferWithMatrix.get(source+4u));
                        buffer.set(dest+4u,this->vertexBufferWithMatrix.get(source+5u));

                        buffer.set(dest+5u,this->vertexBufferWithMatrix.get(source+6u));
                        buffer.set(dest+6u,this->vertexBufferWithMatrix.get(source+7u));
                        buffer.set(dest+7u,this->vertexBufferWithMatrix.get(source+8u));

                        source+=vboSizeofMesh3D[this->vboWithMatrixType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy:
                {
                    //edk::GU::vbo_XYZ_RGB_NxNyNz -> edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy
                    for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
                        buffer.set(dest,this->vertexBufferWithMatrix.get(source));
                        buffer.set(dest+1u,this->vertexBufferWithMatrix.get(source+1u));

                        buffer.set(dest+2u,this->vertexBufferWithMatrix.get(source+3u));
                        buffer.set(dest+3u,this->vertexBufferWithMatrix.get(source+4u));
                        buffer.set(dest+4u,this->vertexBufferWithMatrix.get(source+5u));

                        buffer.set(dest+6u,this->vertexBufferWithMatrix.get(source+6u));
                        buffer.set(dest+7u,this->vertexBufferWithMatrix.get(source+7u));
                        buffer.set(dest+8u,this->vertexBufferWithMatrix.get(source+8u));

                        source+=vboSizeofMesh3D[this->vboWithMatrixType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ:
                {
                    //edk::GU::vbo_XYZ_RGB_NxNyNz -> edk::GU::vbo_XYZ
                    for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
                        buffer.set(dest,this->vertexBufferWithMatrix.get(source));
                        buffer.set(dest+1u,this->vertexBufferWithMatrix.get(source+1u));
                        buffer.set(dest+2u,this->vertexBufferWithMatrix.get(source+2u));

                        source+=vboSizeofMesh3D[this->vboWithMatrixType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_NxNyNz:
                {
                    //edk::GU::vbo_XYZ_RGB_NxNyNz -> edk::GU::vbo_XYZ_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
                        buffer.set(dest,this->vertexBufferWithMatrix.get(source));
                        buffer.set(dest+1u,this->vertexBufferWithMatrix.get(source+1u));
                        buffer.set(dest+2u,this->vertexBufferWithMatrix.get(source+2u));

                        buffer.set(dest+3u,this->vertexBufferWithMatrix.get(source+6u));
                        buffer.set(dest+4u,this->vertexBufferWithMatrix.get(source+7u));
                        buffer.set(dest+5u,this->vertexBufferWithMatrix.get(source+8u));

                        source+=vboSizeofMesh3D[this->vboWithMatrixType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGB:
                {
                    //edk::GU::vbo_XYZ_RGB_NxNyNz -> edk::GU::vbo_XYZ_RGB
                    for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
                        buffer.set(dest,this->vertexBufferWithMatrix.get(source));
                        buffer.set(dest+1u,this->vertexBufferWithMatrix.get(source+1u));
                        buffer.set(dest+2u,this->vertexBufferWithMatrix.get(source+2u));

                        buffer.set(dest+3u,this->vertexBufferWithMatrix.get(source+3u));
                        buffer.set(dest+4u,this->vertexBufferWithMatrix.get(source+4u));
                        buffer.set(dest+5u,this->vertexBufferWithMatrix.get(source+5u));

                        source+=vboSizeofMesh3D[this->vboWithMatrixType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGBA:
                {
                    //edk::GU::vbo_XYZ_RGB_NxNyNz -> edk::GU::vbo_XYZ_RGBA
                    for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
                        buffer.set(dest,this->vertexBufferWithMatrix.get(source));
                        buffer.set(dest+1u,this->vertexBufferWithMatrix.get(source+1u));
                        buffer.set(dest+2u,this->vertexBufferWithMatrix.get(source+2u));

                        buffer.set(dest+3u,this->vertexBufferWithMatrix.get(source+3u));
                        buffer.set(dest+4u,this->vertexBufferWithMatrix.get(source+4u));
                        buffer.set(dest+5u,this->vertexBufferWithMatrix.get(source+5u));

                        source+=vboSizeofMesh3D[this->vboWithMatrixType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGBA_NxNyNz:
                {
                    //edk::GU::vbo_XYZ_RGB_NxNyNz -> edk::GU::vbo_XYZ_RGBA_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
                        buffer.set(dest,this->vertexBufferWithMatrix.get(source));
                        buffer.set(dest+1u,this->vertexBufferWithMatrix.get(source+1u));
                        buffer.set(dest+2u,this->vertexBufferWithMatrix.get(source+2u));

                        buffer.set(dest+3u,this->vertexBufferWithMatrix.get(source+3u));
                        buffer.set(dest+4u,this->vertexBufferWithMatrix.get(source+4u));
                        buffer.set(dest+5u,this->vertexBufferWithMatrix.get(source+5u));

                        buffer.set(dest+7u,this->vertexBufferWithMatrix.get(source+6u));
                        buffer.set(dest+8u,this->vertexBufferWithMatrix.get(source+7u));
                        buffer.set(dest+9u,this->vertexBufferWithMatrix.get(source+8u));

                        source+=vboSizeofMesh3D[this->vboWithMatrixType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGB_NxNyNz_UVxUVy:
                {
                    //edk::GU::vbo_XYZ_RGB_NxNyNz -> edk::GU::vbo_XYZ_RGB_NxNyNz_UVxUVy
                    for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
                        buffer.set(dest,this->vertexBufferWithMatrix.get(source));
                        buffer.set(dest+1u,this->vertexBufferWithMatrix.get(source+1u));
                        buffer.set(dest+2u,this->vertexBufferWithMatrix.get(source+2u));

                        buffer.set(dest+3u,this->vertexBufferWithMatrix.get(source+3u));
                        buffer.set(dest+4u,this->vertexBufferWithMatrix.get(source+4u));
                        buffer.set(dest+5u,this->vertexBufferWithMatrix.get(source+5u));

                        buffer.set(dest+6u,this->vertexBufferWithMatrix.get(source+6u));
                        buffer.set(dest+7u,this->vertexBufferWithMatrix.get(source+7u));
                        buffer.set(dest+8u,this->vertexBufferWithMatrix.get(source+8u));

                        source+=vboSizeofMesh3D[this->vboWithMatrixType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy:
                {
                    //edk::GU::vbo_XYZ_RGB_NxNyNz -> edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy
                    for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
                        buffer.set(dest,this->vertexBufferWithMatrix.get(source));
                        buffer.set(dest+1u,this->vertexBufferWithMatrix.get(source+1u));
                        buffer.set(dest+2u,this->vertexBufferWithMatrix.get(source+2u));

                        buffer.set(dest+3u,this->vertexBufferWithMatrix.get(source+3u));
                        buffer.set(dest+4u,this->vertexBufferWithMatrix.get(source+4u));
                        buffer.set(dest+5u,this->vertexBufferWithMatrix.get(source+5u));

                        buffer.set(dest+8u,this->vertexBufferWithMatrix.get(source+6u));
                        buffer.set(dest+9u,this->vertexBufferWithMatrix.get(source+7u));
                        buffer.set(dest+10u,this->vertexBufferWithMatrix.get(source+8u));

                        source+=vboSizeofMesh3D[this->vboWithMatrixType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                default:
                    break;
                }
            }
                break;
            case edk::GU::vbo_XYZ_RGBA_NxNyNz:
            {
                switch(type){
                case edk::GU::vbo_XY:
                {
                    //edk::GU::vbo_XYZ_RGBA_NxNyNz -> edk::GU::vbo_XY
                    for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
                        buffer.set(dest,this->vertexBufferWithMatrix.get(source));
                        buffer.set(dest+1u,this->vertexBufferWithMatrix.get(source+1u));

                        source+=vboSizeofMesh3D[this->vboWithMatrixType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_NxNyNz:
                {
                    //edk::GU::vbo_XYZ_RGBA_NxNyNz -> edk::GU::vbo_XY_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
                        buffer.set(dest,this->vertexBufferWithMatrix.get(source));
                        buffer.set(dest+1u,this->vertexBufferWithMatrix.get(source+1u));

                        buffer.set(dest+2u,this->vertexBufferWithMatrix.get(source+7u));
                        buffer.set(dest+3u,this->vertexBufferWithMatrix.get(source+8u));
                        buffer.set(dest+4u,this->vertexBufferWithMatrix.get(source+9u));

                        source+=vboSizeofMesh3D[this->vboWithMatrixType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGB:
                {
                    //edk::GU::vbo_XYZ_RGBA_NxNyNz -> edk::GU::vbo_XY_RGB
                    for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
                        buffer.set(dest,this->vertexBufferWithMatrix.get(source));
                        buffer.set(dest+1u,this->vertexBufferWithMatrix.get(source+1u));

                        buffer.set(dest+2u,this->vertexBufferWithMatrix.get(source+3u));
                        buffer.set(dest+3u,this->vertexBufferWithMatrix.get(source+4u));
                        buffer.set(dest+4u,this->vertexBufferWithMatrix.get(source+5u));

                        source+=vboSizeofMesh3D[this->vboWithMatrixType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGBA:
                {
                    //edk::GU::vbo_XYZ_RGBA_NxNyNz -> edk::GU::vbo_XY_RGBA
                    for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
                        buffer.set(dest,this->vertexBufferWithMatrix.get(source));
                        buffer.set(dest+1u,this->vertexBufferWithMatrix.get(source+1u));

                        buffer.set(dest+2u,this->vertexBufferWithMatrix.get(source+3u));
                        buffer.set(dest+3u,this->vertexBufferWithMatrix.get(source+4u));
                        buffer.set(dest+4u,this->vertexBufferWithMatrix.get(source+5u));
                        buffer.set(dest+5u,this->vertexBufferWithMatrix.get(source+6u));

                        source+=vboSizeofMesh3D[this->vboWithMatrixType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGB_NxNyNz:
                {
                    //edk::GU::vbo_XYZ_RGBA_NxNyNz -> edk::GU::vbo_XY_RGB_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
                        buffer.set(dest,this->vertexBufferWithMatrix.get(source));
                        buffer.set(dest+1u,this->vertexBufferWithMatrix.get(source+1u));

                        buffer.set(dest+2u,this->vertexBufferWithMatrix.get(source+3u));
                        buffer.set(dest+3u,this->vertexBufferWithMatrix.get(source+4u));
                        buffer.set(dest+4u,this->vertexBufferWithMatrix.get(source+5u));

                        buffer.set(dest+5u,this->vertexBufferWithMatrix.get(source+7u));
                        buffer.set(dest+6u,this->vertexBufferWithMatrix.get(source+8u));
                        buffer.set(dest+7u,this->vertexBufferWithMatrix.get(source+9u));

                        source+=vboSizeofMesh3D[this->vboWithMatrixType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGBA_NxNyNz:
                {
                    //edk::GU::vbo_XYZ_RGBA_NxNyNz -> edk::GU::vbo_XY_RGBA_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
                        buffer.set(dest,this->vertexBufferWithMatrix.get(source));
                        buffer.set(dest+1u,this->vertexBufferWithMatrix.get(source+1u));

                        buffer.set(dest+2u,this->vertexBufferWithMatrix.get(source+3u));
                        buffer.set(dest+3u,this->vertexBufferWithMatrix.get(source+4u));
                        buffer.set(dest+4u,this->vertexBufferWithMatrix.get(source+5u));
                        buffer.set(dest+5u,this->vertexBufferWithMatrix.get(source+6u));

                        buffer.set(dest+6u,this->vertexBufferWithMatrix.get(source+7u));
                        buffer.set(dest+7u,this->vertexBufferWithMatrix.get(source+8u));
                        buffer.set(dest+8u,this->vertexBufferWithMatrix.get(source+9u));

                        source+=vboSizeofMesh3D[this->vboWithMatrixType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGB_NxNyNz_UVxUVy:
                {
                    //edk::GU::vbo_XYZ_RGBA_NxNyNz -> edk::GU::vbo_XY_RGB_NxNyNz_UVxUVy
                    for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
                        buffer.set(dest,this->vertexBufferWithMatrix.get(source));
                        buffer.set(dest+1u,this->vertexBufferWithMatrix.get(source+1u));

                        buffer.set(dest+2u,this->vertexBufferWithMatrix.get(source+3u));
                        buffer.set(dest+3u,this->vertexBufferWithMatrix.get(source+4u));
                        buffer.set(dest+4u,this->vertexBufferWithMatrix.get(source+5u));

                        buffer.set(dest+5u,this->vertexBufferWithMatrix.get(source+7u));
                        buffer.set(dest+6u,this->vertexBufferWithMatrix.get(source+8u));
                        buffer.set(dest+7u,this->vertexBufferWithMatrix.get(source+9u));

                        source+=vboSizeofMesh3D[this->vboWithMatrixType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy:
                {
                    //edk::GU::vbo_XYZ_RGBA_NxNyNz -> edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy
                    for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
                        buffer.set(dest,this->vertexBufferWithMatrix.get(source));
                        buffer.set(dest+1u,this->vertexBufferWithMatrix.get(source+1u));

                        buffer.set(dest+2u,this->vertexBufferWithMatrix.get(source+3u));
                        buffer.set(dest+3u,this->vertexBufferWithMatrix.get(source+4u));
                        buffer.set(dest+4u,this->vertexBufferWithMatrix.get(source+5u));
                        buffer.set(dest+5u,this->vertexBufferWithMatrix.get(source+6u));

                        buffer.set(dest+6u,this->vertexBufferWithMatrix.get(source+7u));
                        buffer.set(dest+7u,this->vertexBufferWithMatrix.get(source+8u));
                        buffer.set(dest+8u,this->vertexBufferWithMatrix.get(source+9u));

                        source+=vboSizeofMesh3D[this->vboWithMatrixType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ:
                {
                    //edk::GU::vbo_XYZ_RGBA_NxNyNz -> edk::GU::vbo_XYZ
                    for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
                        buffer.set(dest,this->vertexBufferWithMatrix.get(source));
                        buffer.set(dest+1u,this->vertexBufferWithMatrix.get(source+1u));
                        buffer.set(dest+2u,this->vertexBufferWithMatrix.get(source+2u));

                        source+=vboSizeofMesh3D[this->vboWithMatrixType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_NxNyNz:
                {
                    //edk::GU::vbo_XYZ_RGBA_NxNyNz -> edk::GU::vbo_XYZ_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
                        buffer.set(dest,this->vertexBufferWithMatrix.get(source));
                        buffer.set(dest+1u,this->vertexBufferWithMatrix.get(source+1u));
                        buffer.set(dest+2u,this->vertexBufferWithMatrix.get(source+2u));

                        buffer.set(dest+3u,this->vertexBufferWithMatrix.get(source+7u));
                        buffer.set(dest+4u,this->vertexBufferWithMatrix.get(source+8u));
                        buffer.set(dest+5u,this->vertexBufferWithMatrix.get(source+9u));

                        source+=vboSizeofMesh3D[this->vboWithMatrixType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGB:
                {
                    //edk::GU::vbo_XYZ_RGBA_NxNyNz -> edk::GU::vbo_XYZ_RGB
                    for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
                        buffer.set(dest,this->vertexBufferWithMatrix.get(source));
                        buffer.set(dest+1u,this->vertexBufferWithMatrix.get(source+1u));
                        buffer.set(dest+2u,this->vertexBufferWithMatrix.get(source+2u));

                        buffer.set(dest+3u,this->vertexBufferWithMatrix.get(source+3u));
                        buffer.set(dest+4u,this->vertexBufferWithMatrix.get(source+4u));
                        buffer.set(dest+5u,this->vertexBufferWithMatrix.get(source+5u));

                        source+=vboSizeofMesh3D[this->vboWithMatrixType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGBA:
                {
                    //edk::GU::vbo_XYZ_RGBA_NxNyNz -> edk::GU::vbo_XYZ_RGBA
                    for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
                        buffer.set(dest,this->vertexBufferWithMatrix.get(source));
                        buffer.set(dest+1u,this->vertexBufferWithMatrix.get(source+1u));
                        buffer.set(dest+2u,this->vertexBufferWithMatrix.get(source+2u));

                        buffer.set(dest+3u,this->vertexBufferWithMatrix.get(source+3u));
                        buffer.set(dest+4u,this->vertexBufferWithMatrix.get(source+4u));
                        buffer.set(dest+5u,this->vertexBufferWithMatrix.get(source+5u));
                        buffer.set(dest+6u,this->vertexBufferWithMatrix.get(source+6u));

                        source+=vboSizeofMesh3D[this->vboWithMatrixType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGB_NxNyNz:
                {
                    //edk::GU::vbo_XYZ_RGBA_NxNyNz -> edk::GU::vbo_XYZ_RGB_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
                        buffer.set(dest,this->vertexBufferWithMatrix.get(source));
                        buffer.set(dest+1u,this->vertexBufferWithMatrix.get(source+1u));
                        buffer.set(dest+2u,this->vertexBufferWithMatrix.get(source+2u));

                        buffer.set(dest+3u,this->vertexBufferWithMatrix.get(source+3u));
                        buffer.set(dest+4u,this->vertexBufferWithMatrix.get(source+4u));
                        buffer.set(dest+5u,this->vertexBufferWithMatrix.get(source+5u));

                        buffer.set(dest+6u,this->vertexBufferWithMatrix.get(source+7u));
                        buffer.set(dest+7u,this->vertexBufferWithMatrix.get(source+8u));
                        buffer.set(dest+8u,this->vertexBufferWithMatrix.get(source+9u));

                        source+=vboSizeofMesh3D[this->vboWithMatrixType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGB_NxNyNz_UVxUVy:
                {
                    //edk::GU::vbo_XYZ_RGBA_NxNyNz -> edk::GU::vbo_XYZ_RGB_NxNyNz_UVxUVy
                    for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
                        buffer.set(dest,this->vertexBufferWithMatrix.get(source));
                        buffer.set(dest+1u,this->vertexBufferWithMatrix.get(source+1u));
                        buffer.set(dest+2u,this->vertexBufferWithMatrix.get(source+2u));

                        buffer.set(dest+3u,this->vertexBufferWithMatrix.get(source+3u));
                        buffer.set(dest+4u,this->vertexBufferWithMatrix.get(source+4u));
                        buffer.set(dest+5u,this->vertexBufferWithMatrix.get(source+5u));

                        buffer.set(dest+6u,this->vertexBufferWithMatrix.get(source+7u));
                        buffer.set(dest+7u,this->vertexBufferWithMatrix.get(source+8u));
                        buffer.set(dest+8u,this->vertexBufferWithMatrix.get(source+8u));

                        source+=vboSizeofMesh3D[this->vboWithMatrixType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy:
                {
                    //edk::GU::vbo_XYZ_RGBA_NxNyNz -> edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy
                    for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
                        buffer.set(dest,this->vertexBufferWithMatrix.get(source));
                        buffer.set(dest+1u,this->vertexBufferWithMatrix.get(source+1u));
                        buffer.set(dest+2u,this->vertexBufferWithMatrix.get(source+2u));

                        buffer.set(dest+3u,this->vertexBufferWithMatrix.get(source+3u));
                        buffer.set(dest+4u,this->vertexBufferWithMatrix.get(source+4u));
                        buffer.set(dest+5u,this->vertexBufferWithMatrix.get(source+5u));
                        buffer.set(dest+6u,this->vertexBufferWithMatrix.get(source+6u));

                        buffer.set(dest+7u,this->vertexBufferWithMatrix.get(source+7u));
                        buffer.set(dest+8u,this->vertexBufferWithMatrix.get(source+8u));
                        buffer.set(dest+9u,this->vertexBufferWithMatrix.get(source+9u));

                        source+=vboSizeofMesh3D[this->vboWithMatrixType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                default:
                    break;
                }
            }
                break;
            case edk::GU::vbo_XYZ_RGB_NxNyNz_UVxUVy:
            {
                switch(type){
                case edk::GU::vbo_XY:
                {
                    //edk::GU::vbo_XYZ_RGB_NxNyNz_UVxUVy -> edk::GU::vbo_XY
                    for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
                        buffer.set(dest,this->vertexBufferWithMatrix.get(source));
                        buffer.set(dest+1u,this->vertexBufferWithMatrix.get(source+1u));

                        source+=vboSizeofMesh3D[this->vboWithMatrixType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_NxNyNz:
                {
                    //edk::GU::vbo_XYZ_RGB_NxNyNz_UVxUVy -> edk::GU::vbo_XY_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
                        buffer.set(dest,this->vertexBufferWithMatrix.get(source));
                        buffer.set(dest+1u,this->vertexBufferWithMatrix.get(source+1u));

                        buffer.set(dest+2u,this->vertexBufferWithMatrix.get(source+6u));
                        buffer.set(dest+3u,this->vertexBufferWithMatrix.get(source+7u));
                        buffer.set(dest+4u,this->vertexBufferWithMatrix.get(source+8u));

                        source+=vboSizeofMesh3D[this->vboWithMatrixType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGB:
                {
                    //edk::GU::vbo_XYZ_RGB_NxNyNz_UVxUVy -> edk::GU::vbo_XY_RGB
                    for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
                        buffer.set(dest,this->vertexBufferWithMatrix.get(source));
                        buffer.set(dest+1u,this->vertexBufferWithMatrix.get(source+1u));

                        buffer.set(dest+2u,this->vertexBufferWithMatrix.get(source+3u));
                        buffer.set(dest+3u,this->vertexBufferWithMatrix.get(source+4u));
                        buffer.set(dest+4u,this->vertexBufferWithMatrix.get(source+5u));

                        source+=vboSizeofMesh3D[this->vboWithMatrixType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGBA:
                {
                    //edk::GU::vbo_XYZ_RGB_NxNyNz_UVxUVy -> edk::GU::vbo_XY_RGBA
                    for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
                        buffer.set(dest,this->vertexBufferWithMatrix.get(source));
                        buffer.set(dest+1u,this->vertexBufferWithMatrix.get(source+1u));

                        buffer.set(dest+2u,this->vertexBufferWithMatrix.get(source+3u));
                        buffer.set(dest+3u,this->vertexBufferWithMatrix.get(source+4u));
                        buffer.set(dest+4u,this->vertexBufferWithMatrix.get(source+5u));

                        source+=vboSizeofMesh3D[this->vboWithMatrixType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGB_NxNyNz:
                {
                    //edk::GU::vbo_XYZ_RGB_NxNyNz_UVxUVy -> edk::GU::vbo_XY_RGB_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
                        buffer.set(dest,this->vertexBufferWithMatrix.get(source));
                        buffer.set(dest+1u,this->vertexBufferWithMatrix.get(source+1u));

                        buffer.set(dest+2u,this->vertexBufferWithMatrix.get(source+3u));
                        buffer.set(dest+3u,this->vertexBufferWithMatrix.get(source+4u));
                        buffer.set(dest+4u,this->vertexBufferWithMatrix.get(source+5u));

                        buffer.set(dest+5u,this->vertexBufferWithMatrix.get(source+6u));
                        buffer.set(dest+6u,this->vertexBufferWithMatrix.get(source+7u));
                        buffer.set(dest+7u,this->vertexBufferWithMatrix.get(source+8u));

                        source+=vboSizeofMesh3D[this->vboWithMatrixType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGBA_NxNyNz:
                {
                    //edk::GU::vbo_XYZ_RGB_NxNyNz_UVxUVy -> edk::GU::vbo_XY_RGBA_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
                        buffer.set(dest,this->vertexBufferWithMatrix.get(source));
                        buffer.set(dest+1u,this->vertexBufferWithMatrix.get(source+1u));

                        buffer.set(dest+2u,this->vertexBufferWithMatrix.get(source+3u));
                        buffer.set(dest+3u,this->vertexBufferWithMatrix.get(source+4u));
                        buffer.set(dest+4u,this->vertexBufferWithMatrix.get(source+5u));

                        buffer.set(dest+6u,this->vertexBufferWithMatrix.get(source+6u));
                        buffer.set(dest+7u,this->vertexBufferWithMatrix.get(source+7u));
                        buffer.set(dest+8u,this->vertexBufferWithMatrix.get(source+8u));

                        source+=vboSizeofMesh3D[this->vboWithMatrixType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGB_NxNyNz_UVxUVy:
                {
                    //edk::GU::vbo_XYZ_RGB_NxNyNz_UVxUVy -> edk::GU::vbo_XY_RGB_NxNyNz_UVxUVy
                    for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
                        buffer.set(dest,this->vertexBufferWithMatrix.get(source));
                        buffer.set(dest+1u,this->vertexBufferWithMatrix.get(source+1u));

                        buffer.set(dest+2u,this->vertexBufferWithMatrix.get(source+3u));
                        buffer.set(dest+3u,this->vertexBufferWithMatrix.get(source+4u));
                        buffer.set(dest+4u,this->vertexBufferWithMatrix.get(source+5u));

                        buffer.set(dest+5u,this->vertexBufferWithMatrix.get(source+6u));
                        buffer.set(dest+6u,this->vertexBufferWithMatrix.get(source+7u));
                        buffer.set(dest+7u,this->vertexBufferWithMatrix.get(source+8u));

                        buffer.set(dest+8u,this->vertexBufferWithMatrix.get(source+9u));
                        buffer.set(dest+9u,this->vertexBufferWithMatrix.get(source+10u));
                        source+=vboSizeofMesh3D[this->vboWithMatrixType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy:
                {
                    //edk::GU::vbo_XYZ_RGB_NxNyNz_UVxUVy -> edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy
                    for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
                        buffer.set(dest,this->vertexBufferWithMatrix.get(source));
                        buffer.set(dest+1u,this->vertexBufferWithMatrix.get(source+1u));

                        buffer.set(dest+2u,this->vertexBufferWithMatrix.get(source+3u));
                        buffer.set(dest+3u,this->vertexBufferWithMatrix.get(source+4u));
                        buffer.set(dest+4u,this->vertexBufferWithMatrix.get(source+5u));

                        buffer.set(dest+6u,this->vertexBufferWithMatrix.get(source+6u));
                        buffer.set(dest+7u,this->vertexBufferWithMatrix.get(source+7u));
                        buffer.set(dest+8u,this->vertexBufferWithMatrix.get(source+8u));

                        buffer.set(dest+9u,this->vertexBufferWithMatrix.get(source+9u));
                        buffer.set(dest+10u,this->vertexBufferWithMatrix.get(source+10u));

                        source+=vboSizeofMesh3D[this->vboWithMatrixType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ:
                {
                    //edk::GU::vbo_XYZ_RGB_NxNyNz_UVxUVy -> edk::GU::vbo_XYZ
                    for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
                        buffer.set(dest,this->vertexBufferWithMatrix.get(source));
                        buffer.set(dest+1u,this->vertexBufferWithMatrix.get(source+1u));
                        buffer.set(dest+2u,this->vertexBufferWithMatrix.get(source+2u));

                        source+=vboSizeofMesh3D[this->vboWithMatrixType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_NxNyNz:
                {
                    //edk::GU::vbo_XYZ_RGB_NxNyNz_UVxUVy -> edk::GU::vbo_XYZ_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
                        buffer.set(dest,this->vertexBufferWithMatrix.get(source));
                        buffer.set(dest+1u,this->vertexBufferWithMatrix.get(source+1u));
                        buffer.set(dest+2u,this->vertexBufferWithMatrix.get(source+2u));

                        buffer.set(dest+3u,this->vertexBufferWithMatrix.get(source+6u));
                        buffer.set(dest+4u,this->vertexBufferWithMatrix.get(source+7u));
                        buffer.set(dest+5u,this->vertexBufferWithMatrix.get(source+8u));

                        source+=vboSizeofMesh3D[this->vboWithMatrixType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGB:
                {
                    //edk::GU::vbo_XYZ_RGB_NxNyNz_UVxUVy -> edk::GU::vbo_XYZ_RGB
                    for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
                        buffer.set(dest,this->vertexBufferWithMatrix.get(source));
                        buffer.set(dest+1u,this->vertexBufferWithMatrix.get(source+1u));
                        buffer.set(dest+2u,this->vertexBufferWithMatrix.get(source+2u));

                        buffer.set(dest+3u,this->vertexBufferWithMatrix.get(source+3u));
                        buffer.set(dest+4u,this->vertexBufferWithMatrix.get(source+4u));
                        buffer.set(dest+5u,this->vertexBufferWithMatrix.get(source+5u));

                        source+=vboSizeofMesh3D[this->vboWithMatrixType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGBA:
                {
                    //edk::GU::vbo_XYZ_RGB_NxNyNz_UVxUVy -> edk::GU::vbo_XYZ_RGBA
                    for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
                        buffer.set(dest,this->vertexBufferWithMatrix.get(source));
                        buffer.set(dest+1u,this->vertexBufferWithMatrix.get(source+1u));
                        buffer.set(dest+2u,this->vertexBufferWithMatrix.get(source+2u));

                        buffer.set(dest+3u,this->vertexBufferWithMatrix.get(source+3u));
                        buffer.set(dest+4u,this->vertexBufferWithMatrix.get(source+4u));
                        buffer.set(dest+5u,this->vertexBufferWithMatrix.get(source+5u));

                        source+=vboSizeofMesh3D[this->vboWithMatrixType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGB_NxNyNz:
                {
                    //edk::GU::vbo_XYZ_RGB_NxNyNz_UVxUVy -> edk::GU::vbo_XYZ_RGB_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
                        buffer.set(dest,this->vertexBufferWithMatrix.get(source));
                        buffer.set(dest+1u,this->vertexBufferWithMatrix.get(source+1u));
                        buffer.set(dest+2u,this->vertexBufferWithMatrix.get(source+2u));

                        buffer.set(dest+3u,this->vertexBufferWithMatrix.get(source+3u));
                        buffer.set(dest+4u,this->vertexBufferWithMatrix.get(source+4u));
                        buffer.set(dest+5u,this->vertexBufferWithMatrix.get(source+5u));

                        buffer.set(dest+6u,this->vertexBufferWithMatrix.get(source+6u));
                        buffer.set(dest+7u,this->vertexBufferWithMatrix.get(source+7u));
                        buffer.set(dest+8u,this->vertexBufferWithMatrix.get(source+8u));

                        source+=vboSizeofMesh3D[this->vboWithMatrixType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGBA_NxNyNz:
                {
                    //edk::GU::vbo_XYZ_RGB_NxNyNz_UVxUVy -> edk::GU::vbo_XYZ_RGBA_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
                        buffer.set(dest,this->vertexBufferWithMatrix.get(source));
                        buffer.set(dest+1u,this->vertexBufferWithMatrix.get(source+1u));
                        buffer.set(dest+2u,this->vertexBufferWithMatrix.get(source+2u));

                        buffer.set(dest+3u,this->vertexBufferWithMatrix.get(source+3u));
                        buffer.set(dest+4u,this->vertexBufferWithMatrix.get(source+4u));
                        buffer.set(dest+5u,this->vertexBufferWithMatrix.get(source+5u));

                        buffer.set(dest+7u,this->vertexBufferWithMatrix.get(source+6u));
                        buffer.set(dest+8u,this->vertexBufferWithMatrix.get(source+7u));
                        buffer.set(dest+9u,this->vertexBufferWithMatrix.get(source+8u));

                        source+=vboSizeofMesh3D[this->vboWithMatrixType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy:
                {
                    //edk::GU::vbo_XYZ_RGB_NxNyNz_UVxUVy -> edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy
                    for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
                        buffer.set(dest,this->vertexBufferWithMatrix.get(source));
                        buffer.set(dest+1u,this->vertexBufferWithMatrix.get(source+1u));
                        buffer.set(dest+2u,this->vertexBufferWithMatrix.get(source+2u));

                        buffer.set(dest+3u,this->vertexBufferWithMatrix.get(source+3u));
                        buffer.set(dest+4u,this->vertexBufferWithMatrix.get(source+4u));
                        buffer.set(dest+5u,this->vertexBufferWithMatrix.get(source+5u));

                        buffer.set(dest+7u,this->vertexBufferWithMatrix.get(source+6u));
                        buffer.set(dest+8u,this->vertexBufferWithMatrix.get(source+7u));
                        buffer.set(dest+9u,this->vertexBufferWithMatrix.get(source+8u));

                        buffer.set(dest+10u,this->vertexBufferWithMatrix.get(source+9u));
                        buffer.set(dest+11u,this->vertexBufferWithMatrix.get(source+10u));

                        source+=vboSizeofMesh3D[this->vboWithMatrixType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                default:
                    break;
                }
            }
                break;
            case edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy:
            {
                switch(type){
                case edk::GU::vbo_XY:
                {
                    //edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy -> edk::GU::vbo_XY
                    for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
                        buffer.set(dest,this->vertexBufferWithMatrix.get(source));
                        buffer.set(dest+1u,this->vertexBufferWithMatrix.get(source+1u));

                        source+=vboSizeofMesh3D[this->vboWithMatrixType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_NxNyNz:
                {
                    //edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy -> edk::GU::vbo_XY_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
                        buffer.set(dest,this->vertexBufferWithMatrix.get(source));
                        buffer.set(dest+1u,this->vertexBufferWithMatrix.get(source+1u));

                        buffer.set(dest+2u,this->vertexBufferWithMatrix.get(source+7u));
                        buffer.set(dest+3u,this->vertexBufferWithMatrix.get(source+8u));
                        buffer.set(dest+4u,this->vertexBufferWithMatrix.get(source+9u));

                        source+=vboSizeofMesh3D[this->vboWithMatrixType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGB:
                {
                    //edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy -> edk::GU::vbo_XY_RGB
                    for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
                        buffer.set(dest,this->vertexBufferWithMatrix.get(source));
                        buffer.set(dest+1u,this->vertexBufferWithMatrix.get(source+1u));

                        buffer.set(dest+2u,this->vertexBufferWithMatrix.get(source+3u));
                        buffer.set(dest+3u,this->vertexBufferWithMatrix.get(source+4u));
                        buffer.set(dest+4u,this->vertexBufferWithMatrix.get(source+5u));

                        source+=vboSizeofMesh3D[this->vboWithMatrixType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGBA:
                {
                    //edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy -> edk::GU::vbo_XY_RGBA
                    for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
                        buffer.set(dest,this->vertexBufferWithMatrix.get(source));
                        buffer.set(dest+1u,this->vertexBufferWithMatrix.get(source+1u));

                        buffer.set(dest+2u,this->vertexBufferWithMatrix.get(source+3u));
                        buffer.set(dest+3u,this->vertexBufferWithMatrix.get(source+4u));
                        buffer.set(dest+4u,this->vertexBufferWithMatrix.get(source+5u));
                        buffer.set(dest+5u,this->vertexBufferWithMatrix.get(source+6u));

                        source+=vboSizeofMesh3D[this->vboWithMatrixType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGB_NxNyNz:
                {
                    //edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy -> edk::GU::vbo_XY_RGB_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
                        buffer.set(dest,this->vertexBufferWithMatrix.get(source));
                        buffer.set(dest+1u,this->vertexBufferWithMatrix.get(source+1u));

                        buffer.set(dest+2u,this->vertexBufferWithMatrix.get(source+3u));
                        buffer.set(dest+3u,this->vertexBufferWithMatrix.get(source+4u));
                        buffer.set(dest+4u,this->vertexBufferWithMatrix.get(source+5u));

                        buffer.set(dest+5u,this->vertexBufferWithMatrix.get(source+7u));
                        buffer.set(dest+6u,this->vertexBufferWithMatrix.get(source+8u));
                        buffer.set(dest+7u,this->vertexBufferWithMatrix.get(source+9u));

                        source+=vboSizeofMesh3D[this->vboWithMatrixType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGBA_NxNyNz:
                {
                    //edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy -> edk::GU::vbo_XY_RGBA_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
                        buffer.set(dest,this->vertexBufferWithMatrix.get(source));
                        buffer.set(dest+1u,this->vertexBufferWithMatrix.get(source+1u));

                        buffer.set(dest+2u,this->vertexBufferWithMatrix.get(source+3u));
                        buffer.set(dest+3u,this->vertexBufferWithMatrix.get(source+4u));
                        buffer.set(dest+4u,this->vertexBufferWithMatrix.get(source+5u));
                        buffer.set(dest+5u,this->vertexBufferWithMatrix.get(source+6u));

                        buffer.set(dest+6u,this->vertexBufferWithMatrix.get(source+7u));
                        buffer.set(dest+7u,this->vertexBufferWithMatrix.get(source+8u));
                        buffer.set(dest+8u,this->vertexBufferWithMatrix.get(source+9u));

                        source+=vboSizeofMesh3D[this->vboWithMatrixType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGB_NxNyNz_UVxUVy:
                {
                    //edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy -> edk::GU::vbo_XY_RGB_NxNyNz_UVxUVy
                    for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
                        buffer.set(dest,this->vertexBufferWithMatrix.get(source));
                        buffer.set(dest+1u,this->vertexBufferWithMatrix.get(source+1u));

                        buffer.set(dest+2u,this->vertexBufferWithMatrix.get(source+3u));
                        buffer.set(dest+3u,this->vertexBufferWithMatrix.get(source+4u));
                        buffer.set(dest+4u,this->vertexBufferWithMatrix.get(source+5u));

                        buffer.set(dest+5u,this->vertexBufferWithMatrix.get(source+7u));
                        buffer.set(dest+6u,this->vertexBufferWithMatrix.get(source+8u));
                        buffer.set(dest+7u,this->vertexBufferWithMatrix.get(source+9u));

                        buffer.set(dest+8u,this->vertexBufferWithMatrix.get(source+10u));
                        buffer.set(dest+9u,this->vertexBufferWithMatrix.get(source+11u));

                        source+=vboSizeofMesh3D[this->vboWithMatrixType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy:
                {
                    //edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy -> edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy
                    for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
                        buffer.set(dest,this->vertexBufferWithMatrix.get(source));
                        buffer.set(dest+1u,this->vertexBufferWithMatrix.get(source+1u));

                        buffer.set(dest+2u,this->vertexBufferWithMatrix.get(source+3u));
                        buffer.set(dest+3u,this->vertexBufferWithMatrix.get(source+4u));
                        buffer.set(dest+4u,this->vertexBufferWithMatrix.get(source+5u));
                        buffer.set(dest+5u,this->vertexBufferWithMatrix.get(source+6u));

                        buffer.set(dest+6u,this->vertexBufferWithMatrix.get(source+7u));
                        buffer.set(dest+7u,this->vertexBufferWithMatrix.get(source+8u));
                        buffer.set(dest+8u,this->vertexBufferWithMatrix.get(source+9u));

                        buffer.set(dest+9u,this->vertexBufferWithMatrix.get(source+10u));
                        buffer.set(dest+10u,this->vertexBufferWithMatrix.get(source+11u));

                        source+=vboSizeofMesh3D[this->vboWithMatrixType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ:
                {
                    //edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy -> edk::GU::vbo_XYZ
                    for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
                        buffer.set(dest,this->vertexBufferWithMatrix.get(source));
                        buffer.set(dest+1u,this->vertexBufferWithMatrix.get(source+1u));
                        buffer.set(dest+2u,this->vertexBufferWithMatrix.get(source+2u));

                        source+=vboSizeofMesh3D[this->vboWithMatrixType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_NxNyNz:
                {
                    //edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy -> edk::GU::vbo_XYZ_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
                        buffer.set(dest,this->vertexBufferWithMatrix.get(source));
                        buffer.set(dest+1u,this->vertexBufferWithMatrix.get(source+1u));
                        buffer.set(dest+2u,this->vertexBufferWithMatrix.get(source+2u));

                        buffer.set(dest+3u,this->vertexBufferWithMatrix.get(source+7u));
                        buffer.set(dest+4u,this->vertexBufferWithMatrix.get(source+8u));
                        buffer.set(dest+5u,this->vertexBufferWithMatrix.get(source+9u));

                        source+=vboSizeofMesh3D[this->vboWithMatrixType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGB:
                {
                    //edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy -> edk::GU::vbo_XYZ_RGB
                    for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
                        buffer.set(dest,this->vertexBufferWithMatrix.get(source));
                        buffer.set(dest+1u,this->vertexBufferWithMatrix.get(source+1u));
                        buffer.set(dest+2u,this->vertexBufferWithMatrix.get(source+2u));

                        buffer.set(dest+3u,this->vertexBufferWithMatrix.get(source+3u));
                        buffer.set(dest+4u,this->vertexBufferWithMatrix.get(source+4u));
                        buffer.set(dest+5u,this->vertexBufferWithMatrix.get(source+5u));

                        source+=vboSizeofMesh3D[this->vboWithMatrixType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGBA:
                {
                    //edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy -> edk::GU::vbo_XYZ_RGBA
                    for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
                        buffer.set(dest,this->vertexBufferWithMatrix.get(source));
                        buffer.set(dest+1u,this->vertexBufferWithMatrix.get(source+1u));
                        buffer.set(dest+2u,this->vertexBufferWithMatrix.get(source+2u));

                        buffer.set(dest+3u,this->vertexBufferWithMatrix.get(source+3u));
                        buffer.set(dest+4u,this->vertexBufferWithMatrix.get(source+4u));
                        buffer.set(dest+5u,this->vertexBufferWithMatrix.get(source+5u));
                        buffer.set(dest+6u,this->vertexBufferWithMatrix.get(source+6u));

                        source+=vboSizeofMesh3D[this->vboWithMatrixType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGB_NxNyNz:
                {
                    //edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy -> edk::GU::vbo_XYZ_RGB_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
                        buffer.set(dest,this->vertexBufferWithMatrix.get(source));
                        buffer.set(dest+1u,this->vertexBufferWithMatrix.get(source+1u));
                        buffer.set(dest+2u,this->vertexBufferWithMatrix.get(source+2u));

                        buffer.set(dest+3u,this->vertexBufferWithMatrix.get(source+3u));
                        buffer.set(dest+4u,this->vertexBufferWithMatrix.get(source+4u));
                        buffer.set(dest+5u,this->vertexBufferWithMatrix.get(source+5u));

                        buffer.set(dest+6u,this->vertexBufferWithMatrix.get(source+7u));
                        buffer.set(dest+7u,this->vertexBufferWithMatrix.get(source+8u));
                        buffer.set(dest+8u,this->vertexBufferWithMatrix.get(source+9u));

                        source+=vboSizeofMesh3D[this->vboWithMatrixType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGBA_NxNyNz:
                {
                    //edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy -> edk::GU::vbo_XYZ_RGBA_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
                        buffer.set(dest,this->vertexBufferWithMatrix.get(source));
                        buffer.set(dest+1u,this->vertexBufferWithMatrix.get(source+1u));
                        buffer.set(dest+2u,this->vertexBufferWithMatrix.get(source+2u));

                        buffer.set(dest+3u,this->vertexBufferWithMatrix.get(source+3u));
                        buffer.set(dest+4u,this->vertexBufferWithMatrix.get(source+4u));
                        buffer.set(dest+5u,this->vertexBufferWithMatrix.get(source+5u));
                        buffer.set(dest+6u,this->vertexBufferWithMatrix.get(source+6u));

                        buffer.set(dest+7u,this->vertexBufferWithMatrix.get(source+7u));
                        buffer.set(dest+8u,this->vertexBufferWithMatrix.get(source+8u));
                        buffer.set(dest+9u,this->vertexBufferWithMatrix.get(source+9u));

                        source+=vboSizeofMesh3D[this->vboWithMatrixType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGB_NxNyNz_UVxUVy:
                {
                    //edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy -> edk::GU::vbo_XYZ_RGB_NxNyNz_UVxUVy
                    for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
                        buffer.set(dest,this->vertexBufferWithMatrix.get(source));
                        buffer.set(dest+1u,this->vertexBufferWithMatrix.get(source+1u));
                        buffer.set(dest+2u,this->vertexBufferWithMatrix.get(source+2u));

                        buffer.set(dest+3u,this->vertexBufferWithMatrix.get(source+3u));
                        buffer.set(dest+4u,this->vertexBufferWithMatrix.get(source+4u));
                        buffer.set(dest+5u,this->vertexBufferWithMatrix.get(source+5u));

                        buffer.set(dest+6u,this->vertexBufferWithMatrix.get(source+7u));
                        buffer.set(dest+7u,this->vertexBufferWithMatrix.get(source+8u));
                        buffer.set(dest+8u,this->vertexBufferWithMatrix.get(source+9u));

                        buffer.set(dest+9u,this->vertexBufferWithMatrix.get(source+10u));
                        buffer.set(dest+10u,this->vertexBufferWithMatrix.get(source+11u));

                        source+=vboSizeofMesh3D[this->vboWithMatrixType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                default:
                    break;
                }
            }
                break;
            default:
                break;
            }
            //clone the buffer
            this->vertexBufferWithMatrix.cloneFrom(&buffer);
            this->vboWithMatrixType = type;
            //set the update funtions
            this->updateVBOFunctions();
            return true;
        }
    }
    return false;
}
bool edk::shape::Polygon3DList::changeVBOWire(edk::GU::VBOType type){
    if(this->canUseVBO && type != this->vboWireType && type!=edk::GU::vbo_NULL && type<edk::GU::vbo_Size){
        edk::vector::Array<edk::float32> buffer;
        if(buffer.createArray(this->vboWireCount * vboSizeofMesh3D[type])){
            edk::uint32 increment = vboSizeofMesh3D[type];
            edk::uint32 size = this->vboWireCount*increment;
            //clean the vertexBufferWire
            switch(type){
            case edk::GU::vbo_XY:
                for(edk::uint32 i=0u;i<size;i+=increment){
                    buffer.set(i,0.f);
                    buffer.set(i+1u,0.f);
                }
                break;
            case edk::GU::vbo_XY_NxNyNz:
                for(edk::uint32 i=0u;i<size;i+=increment){
                    buffer.set(i,0.f);
                    buffer.set(i+1u,0.f);

                    buffer.set(i+2u,0.f);
                    buffer.set(i+3u,0.f);
                    buffer.set(i+4u,1.f);
                }
                break;
            case edk::GU::vbo_XY_RGB:
                for(edk::uint32 i=0u;i<size;i+=increment){
                    buffer.set(i,0.f);
                    buffer.set(i+1u,0.f);

                    buffer.set(i+2u,1.f);
                    buffer.set(i+3u,1.f);
                    buffer.set(i+4u,1.f);
                }
                break;
            case edk::GU::vbo_XY_RGBA:
                for(edk::uint32 i=0u;i<size;i+=increment){
                    buffer.set(i,0.f);
                    buffer.set(i+1u,0.f);

                    buffer.set(i+2u,1.f);
                    buffer.set(i+3u,1.f);
                    buffer.set(i+4u,1.f);
                    buffer.set(i+5u,1.f);
                }
                break;
            case edk::GU::vbo_XY_RGB_NxNyNz:
                for(edk::uint32 i=0u;i<size;i+=increment){
                    buffer.set(i,0.f);
                    buffer.set(i+1u,0.f);

                    buffer.set(i+2u,1.f);
                    buffer.set(i+3u,1.f);
                    buffer.set(i+4u,1.f);

                    buffer.set(i+5u,0.f);
                    buffer.set(i+6u,0.f);
                    buffer.set(i+7u,1.f);
                }
                break;
            case edk::GU::vbo_XY_RGBA_NxNyNz:
                for(edk::uint32 i=0u;i<size;i+=increment){
                    buffer.set(i,0.f);
                    buffer.set(i+1u,0.f);

                    buffer.set(i+2u,1.f);
                    buffer.set(i+3u,1.f);
                    buffer.set(i+4u,1.f);
                    buffer.set(i+5u,1.f);

                    buffer.set(i+6u,0.f);
                    buffer.set(i+7u,0.f);
                    buffer.set(i+8u,1.f);
                }
                break;
            case edk::GU::vbo_XY_RGB_NxNyNz_UVxUVy:
                for(edk::uint32 i=0u;i<size;i+=increment){
                    buffer.set(i,0.f);
                    buffer.set(i+1u,0.f);

                    buffer.set(i+2u,1.f);
                    buffer.set(i+3u,1.f);
                    buffer.set(i+4u,1.f);

                    buffer.set(i+5u,0.f);
                    buffer.set(i+6u,0.f);
                    buffer.set(i+7u,1.f);

                    buffer.set(i+8u,0.f);
                    buffer.set(i+9u,0.f);
                }
                break;
            case edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy:
                for(edk::uint32 i=0u;i<size;i+=increment){
                    buffer.set(i,0.f);
                    buffer.set(i+1u,0.f);

                    buffer.set(i+2u,1.f);
                    buffer.set(i+3u,1.f);
                    buffer.set(i+4u,1.f);
                    buffer.set(i+5u,1.f);

                    buffer.set(i+6u,0.f);
                    buffer.set(i+7u,0.f);
                    buffer.set(i+8u,1.f);

                    buffer.set(i+9u,0.f);
                    buffer.set(i+10u,0.f);
                }
                break;
            case edk::GU::vbo_XYZ:
                for(edk::uint32 i=0u;i<size;i+=increment){
                    buffer.set(i,0.f);
                    buffer.set(i+1u,0.f);
                    buffer.set(i+2u,0.f);
                }
                break;
            case edk::GU::vbo_XYZ_NxNyNz:
                for(edk::uint32 i=0u;i<size;i+=increment){
                    buffer.set(i,0.f);
                    buffer.set(i+1u,0.f);
                    buffer.set(i+2u,0.f);

                    buffer.set(i+3u,0.f);
                    buffer.set(i+4u,0.f);
                    buffer.set(i+5u,1.f);
                }
                break;
            case edk::GU::vbo_XYZ_RGB:
                for(edk::uint32 i=0u;i<size;i+=increment){
                    buffer.set(i,0.f);
                    buffer.set(i+1u,0.f);
                    buffer.set(i+2u,0.f);

                    buffer.set(i+3u,1.f);
                    buffer.set(i+4u,1.f);
                    buffer.set(i+5u,1.f);
                }
                break;
            case edk::GU::vbo_XYZ_RGBA:
                for(edk::uint32 i=0u;i<size;i+=increment){
                    buffer.set(i,0.f);
                    buffer.set(i+1u,0.f);
                    buffer.set(i+2u,0.f);

                    buffer.set(i+3u,1.f);
                    buffer.set(i+4u,1.f);
                    buffer.set(i+5u,1.f);
                    buffer.set(i+6u,1.f);
                }
                break;
            case edk::GU::vbo_XYZ_RGB_NxNyNz:
                for(edk::uint32 i=0u;i<size;i+=increment){
                    buffer.set(i,0.f);
                    buffer.set(i+1u,0.f);
                    buffer.set(i+2u,0.f);

                    buffer.set(i+3u,1.f);
                    buffer.set(i+4u,1.f);
                    buffer.set(i+5u,1.f);

                    buffer.set(i+6u,0.f);
                    buffer.set(i+7u,0.f);
                    buffer.set(i+8u,1.f);
                }
                break;
            case edk::GU::vbo_XYZ_RGBA_NxNyNz:
                for(edk::uint32 i=0u;i<size;i+=increment){
                    buffer.set(i,0.f);
                    buffer.set(i+1u,0.f);
                    buffer.set(i+2u,0.f);

                    buffer.set(i+3u,1.f);
                    buffer.set(i+4u,1.f);
                    buffer.set(i+5u,1.f);
                    buffer.set(i+6u,1.f);

                    buffer.set(i+7u,0.f);
                    buffer.set(i+8u,0.f);
                    buffer.set(i+9u,1.f);
                }
                break;
            case edk::GU::vbo_XYZ_RGB_NxNyNz_UVxUVy:
                for(edk::uint32 i=0u;i<size;i+=increment){
                    buffer.set(i,0.f);
                    buffer.set(i+1u,0.f);
                    buffer.set(i+2u,0.f);

                    buffer.set(i+3u,1.f);
                    buffer.set(i+4u,1.f);
                    buffer.set(i+5u,1.f);

                    buffer.set(i+6u,0.f);
                    buffer.set(i+7u,0.f);
                    buffer.set(i+8u,1.f);

                    buffer.set(i+9u,0.f);
                    buffer.set(i+10u,0.f);
                }
                break;
            case edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy:
                for(edk::uint32 i=0u;i<size;i+=increment){
                    buffer.set(i,0.f);
                    buffer.set(i+1u,0.f);
                    buffer.set(i+2u,0.f);

                    buffer.set(i+3u,1.f);
                    buffer.set(i+4u,1.f);
                    buffer.set(i+5u,1.f);
                    buffer.set(i+6u,1.f);

                    buffer.set(i+7u,0.f);
                    buffer.set(i+8u,0.f);
                    buffer.set(i+9u,1.f);

                    buffer.set(i+10u,0.f);
                    buffer.set(i+11u,0.f);
                }
                break;
            default:
                break;
            }

            edk::uint32 source=0u,dest=0u;
            //
            switch(this->vboWireType){
            case edk::GU::vbo_XY:
            {
                for(edk::uint32 i=0u;i<this->vboWireCount;i++){
                    buffer.set(dest,this->vertexBufferWire.get(source));
                    buffer.set(dest+1u,this->vertexBufferWire.get(source+1u));

                    source+=vboSizeofMesh3D[this->vboWireType];
                    dest+=vboSizeofMesh3D[type];
                }
            }
                break;
            case edk::GU::vbo_XY_NxNyNz:
            {
                switch(type){
                case edk::GU::vbo_XY:
                {
                    //vbo_XY_NxNyNz -> edk::GU::vbo_XY
                    for(edk::uint32 i=0u;i<this->vboWireCount;i++){
                        buffer.set(dest,this->vertexBufferWire.get(source));
                        buffer.set(dest+1u,this->vertexBufferWire.get(source+1u));

                        source+=vboSizeofMesh3D[this->vboWireType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGB:
                {
                    //vbo_XY_NxNyNz -> edk::GU::vbo_XY_RGB
                    for(edk::uint32 i=0u;i<this->vboWireCount;i++){
                        buffer.set(dest,this->vertexBufferWire.get(source));
                        buffer.set(dest+1u,this->vertexBufferWire.get(source+1u));

                        source+=vboSizeofMesh3D[this->vboWireType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGBA:
                {
                    //vbo_XY_NxNyNz -> edk::GU::vbo_XY_RGBA
                    for(edk::uint32 i=0u;i<this->vboWireCount;i++){
                        buffer.set(dest,this->vertexBufferWire.get(source));
                        buffer.set(dest+1u,this->vertexBufferWire.get(source+1u));

                        source+=vboSizeofMesh3D[this->vboWireType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGB_NxNyNz:
                {
                    //vbo_XY_NxNyNz -> edk::GU::vbo_XY_RGB_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboWireCount;i++){
                        buffer.set(dest,this->vertexBufferWire.get(source));
                        buffer.set(dest+1u,this->vertexBufferWire.get(source+1u));

                        buffer.set(dest+5u,this->vertexBufferWire.get(source+2u));
                        buffer.set(dest+6u,this->vertexBufferWire.get(source+3u));
                        buffer.set(dest+7u,this->vertexBufferWire.get(source+4u));

                        source+=vboSizeofMesh3D[this->vboWireType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGBA_NxNyNz:
                {
                    //vbo_XY_NxNyNz -> edk::GU::vbo_XY_RGBA_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboWireCount;i++){
                        buffer.set(dest,this->vertexBufferWire.get(source));
                        buffer.set(dest+1u,this->vertexBufferWire.get(source+1u));

                        buffer.set(dest+6u,this->vertexBufferWire.get(source+2u));
                        buffer.set(dest+7u,this->vertexBufferWire.get(source+3u));
                        buffer.set(dest+8u,this->vertexBufferWire.get(source+4u));

                        source+=vboSizeofMesh3D[this->vboWireType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGB_NxNyNz_UVxUVy:
                {
                    //vbo_XY_NxNyNz -> edk::GU::vbo_XY_RGB_NxNyNz_UVxUVy
                    for(edk::uint32 i=0u;i<this->vboWireCount;i++){
                        buffer.set(dest,this->vertexBufferWire.get(source));
                        buffer.set(dest+1u,this->vertexBufferWire.get(source+1u));

                        buffer.set(dest+5u,this->vertexBufferWire.get(source+2u));
                        buffer.set(dest+6u,this->vertexBufferWire.get(source+3u));
                        buffer.set(dest+7u,this->vertexBufferWire.get(source+4u));

                        source+=vboSizeofMesh3D[this->vboWireType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy:
                {
                    //vbo_XY_NxNyNz -> edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy
                    for(edk::uint32 i=0u;i<this->vboWireCount;i++){
                        buffer.set(dest,this->vertexBufferWire.get(source));
                        buffer.set(dest+1u,this->vertexBufferWire.get(source+1u));

                        buffer.set(dest+6u,this->vertexBufferWire.get(source+2u));
                        buffer.set(dest+7u,this->vertexBufferWire.get(source+3u));
                        buffer.set(dest+8u,this->vertexBufferWire.get(source+4u));

                        source+=vboSizeofMesh3D[this->vboWireType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ:
                {
                    //vbo_XY_NxNyNz -> edk::GU::vbo_XYZ
                    for(edk::uint32 i=0u;i<this->vboWireCount;i++){
                        buffer.set(dest,this->vertexBufferWire.get(source));
                        buffer.set(dest+1u,this->vertexBufferWire.get(source+1u));

                        source+=vboSizeofMesh3D[this->vboWireType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_NxNyNz:
                {
                    //vbo_XY_NxNyNz -> edk::GU::vbo_XYZ_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboWireCount;i++){
                        buffer.set(dest,this->vertexBufferWire.get(source));
                        buffer.set(dest+1u,this->vertexBufferWire.get(source+1u));

                        buffer.set(dest+3u,this->vertexBufferWire.get(source+2u));
                        buffer.set(dest+4u,this->vertexBufferWire.get(source+3u));
                        buffer.set(dest+5u,this->vertexBufferWire.get(source+4u));

                        source+=vboSizeofMesh3D[this->vboWireType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGB:
                {
                    //vbo_XY_NxNyNz -> edk::GU::vbo_XYZ_RGB
                    for(edk::uint32 i=0u;i<this->vboWireCount;i++){
                        buffer.set(dest,this->vertexBufferWire.get(source));
                        buffer.set(dest+1u,this->vertexBufferWire.get(source+1u));

                        source+=vboSizeofMesh3D[this->vboWireType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGBA:
                {
                    //vbo_XY_NxNyNz -> edk::GU::vbo_XYZ_RGBA
                    for(edk::uint32 i=0u;i<this->vboWireCount;i++){
                        buffer.set(dest,this->vertexBufferWire.get(source));
                        buffer.set(dest+1u,this->vertexBufferWire.get(source+1u));

                        source+=vboSizeofMesh3D[this->vboWireType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGB_NxNyNz:
                {
                    //vbo_XY_NxNyNz -> edk::GU::vbo_XYZ_RGB_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboWireCount;i++){
                        buffer.set(dest,this->vertexBufferWire.get(source));
                        buffer.set(dest+1u,this->vertexBufferWire.get(source+1u));

                        buffer.set(dest+6u,this->vertexBufferWire.get(source+2u));
                        buffer.set(dest+7u,this->vertexBufferWire.get(source+3u));
                        buffer.set(dest+8u,this->vertexBufferWire.get(source+4u));

                        source+=vboSizeofMesh3D[this->vboWireType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGBA_NxNyNz:
                {
                    //vbo_XY_NxNyNz -> edk::GU::vbo_XYZ_RGBA_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboWireCount;i++){
                        buffer.set(dest,this->vertexBufferWire.get(source));
                        buffer.set(dest+1u,this->vertexBufferWire.get(source+1u));

                        buffer.set(dest+7u,this->vertexBufferWire.get(source+2u));
                        buffer.set(dest+8u,this->vertexBufferWire.get(source+3u));
                        buffer.set(dest+9u,this->vertexBufferWire.get(source+4u));

                        source+=vboSizeofMesh3D[this->vboWireType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGB_NxNyNz_UVxUVy:
                {
                    //vbo_XY_NxNyNz -> edk::GU::vbo_XYZ_RGB_NxNyNz_UVxUVy
                    for(edk::uint32 i=0u;i<this->vboWireCount;i++){
                        buffer.set(dest,this->vertexBufferWire.get(source));
                        buffer.set(dest+1u,this->vertexBufferWire.get(source+1u));

                        buffer.set(dest+6u,this->vertexBufferWire.get(source+2u));
                        buffer.set(dest+7u,this->vertexBufferWire.get(source+3u));
                        buffer.set(dest+8u,this->vertexBufferWire.get(source+4u));

                        source+=vboSizeofMesh3D[this->vboWireType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy:
                {
                    //vbo_XY_NxNyNz -> edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy
                    for(edk::uint32 i=0u;i<this->vboWireCount;i++){
                        buffer.set(dest,this->vertexBufferWire.get(source));
                        buffer.set(dest+1u,this->vertexBufferWire.get(source+1u));

                        buffer.set(dest+7u,this->vertexBufferWire.get(source+2u));
                        buffer.set(dest+8u,this->vertexBufferWire.get(source+3u));
                        buffer.set(dest+9u,this->vertexBufferWire.get(source+4u));

                        source+=vboSizeofMesh3D[this->vboWireType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                default:
                    break;
                }
            }
                break;
            case edk::GU::vbo_XY_RGB:
            {
                switch(type){
                case edk::GU::vbo_XY:
                {
                    //edk::GU::vbo_XY_RGB -> edk::GU::vbo_XY
                    for(edk::uint32 i=0u;i<this->vboWireCount;i++){
                        buffer.set(dest,this->vertexBufferWire.get(source));
                        buffer.set(dest+1u,this->vertexBufferWire.get(source+1u));

                        source+=vboSizeofMesh3D[this->vboWireType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_NxNyNz:
                {
                    //edk::GU::vbo_XY_RGB -> edk::GU::vbo_XY_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboWireCount;i++){
                        buffer.set(dest,this->vertexBufferWire.get(source));
                        buffer.set(dest+1u,this->vertexBufferWire.get(source+1u));

                        source+=vboSizeofMesh3D[this->vboWireType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGBA:
                {
                    //edk::GU::vbo_XY_RGB -> edk::GU::vbo_XY_RGBA
                    for(edk::uint32 i=0u;i<this->vboWireCount;i++){
                        buffer.set(dest,this->vertexBufferWire.get(source));
                        buffer.set(dest+1u,this->vertexBufferWire.get(source+1u));

                        buffer.set(dest+3u,this->vertexBufferWire.get(source+2u));
                        buffer.set(dest+4u,this->vertexBufferWire.get(source+3u));
                        buffer.set(dest+5u,this->vertexBufferWire.get(source+4u));

                        source+=vboSizeofMesh3D[this->vboWireType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGB_NxNyNz:
                {
                    //edk::GU::vbo_XY_RGB -> edk::GU::vbo_XY_RGB_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboWireCount;i++){
                        buffer.set(dest,this->vertexBufferWire.get(source));
                        buffer.set(dest+1u,this->vertexBufferWire.get(source+1u));

                        buffer.set(dest+2u,this->vertexBufferWire.get(source+2u));
                        buffer.set(dest+3u,this->vertexBufferWire.get(source+3u));
                        buffer.set(dest+4u,this->vertexBufferWire.get(source+4u));

                        source+=vboSizeofMesh3D[this->vboWireType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGBA_NxNyNz:
                {
                    //edk::GU::vbo_XY_RGB -> edk::GU::vbo_XY_RGBA_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboWireCount;i++){
                        buffer.set(dest,this->vertexBufferWire.get(source));
                        buffer.set(dest+1u,this->vertexBufferWire.get(source+1u));

                        buffer.set(dest+2u,this->vertexBufferWire.get(source+2u));
                        buffer.set(dest+3u,this->vertexBufferWire.get(source+3u));
                        buffer.set(dest+4u,this->vertexBufferWire.get(source+4u));

                        source+=vboSizeofMesh3D[this->vboWireType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGB_NxNyNz_UVxUVy:
                {
                    //edk::GU::vbo_XY_RGB -> edk::GU::vbo_XY_RGB_NxNyNz_UVxUVy
                    for(edk::uint32 i=0u;i<this->vboWireCount;i++){
                        buffer.set(dest,this->vertexBufferWire.get(source));
                        buffer.set(dest+1u,this->vertexBufferWire.get(source+1u));

                        buffer.set(dest+2u,this->vertexBufferWire.get(source+2u));
                        buffer.set(dest+3u,this->vertexBufferWire.get(source+3u));
                        buffer.set(dest+4u,this->vertexBufferWire.get(source+4u));

                        source+=vboSizeofMesh3D[this->vboWireType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy:
                {
                    //edk::GU::vbo_XY_RGB -> edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy
                    for(edk::uint32 i=0u;i<this->vboWireCount;i++){
                        buffer.set(dest,this->vertexBufferWire.get(source));
                        buffer.set(dest+1u,this->vertexBufferWire.get(source+1u));

                        buffer.set(dest+2u,this->vertexBufferWire.get(source+2u));
                        buffer.set(dest+3u,this->vertexBufferWire.get(source+3u));
                        buffer.set(dest+4u,this->vertexBufferWire.get(source+4u));

                        source+=vboSizeofMesh3D[this->vboWireType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ:
                {
                    //edk::GU::vbo_XY_RGB -> edk::GU::vbo_XYZ
                    for(edk::uint32 i=0u;i<this->vboWireCount;i++){
                        buffer.set(dest,this->vertexBufferWire.get(source));
                        buffer.set(dest+1u,this->vertexBufferWire.get(source+1u));

                        source+=vboSizeofMesh3D[this->vboWireType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_NxNyNz:
                {
                    //edk::GU::vbo_XY_RGB -> edk::GU::vbo_XYZ_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboWireCount;i++){
                        buffer.set(dest,this->vertexBufferWire.get(source));
                        buffer.set(dest+1u,this->vertexBufferWire.get(source+1u));

                        source+=vboSizeofMesh3D[this->vboWireType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGB:
                {
                    //edk::GU::vbo_XY_RGB -> edk::GU::vbo_XYZ_RGB
                    for(edk::uint32 i=0u;i<this->vboWireCount;i++){
                        buffer.set(dest,this->vertexBufferWire.get(source));
                        buffer.set(dest+1u,this->vertexBufferWire.get(source+1u));

                        buffer.set(dest+3u,this->vertexBufferWire.get(source+2u));
                        buffer.set(dest+4u,this->vertexBufferWire.get(source+3u));
                        buffer.set(dest+5u,this->vertexBufferWire.get(source+4u));

                        source+=vboSizeofMesh3D[this->vboWireType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGBA:
                {
                    //edk::GU::vbo_XY_RGB -> edk::GU::vbo_XYZ_RGBA
                    for(edk::uint32 i=0u;i<this->vboWireCount;i++){
                        buffer.set(dest,this->vertexBufferWire.get(source));
                        buffer.set(dest+1u,this->vertexBufferWire.get(source+1u));

                        buffer.set(dest+3u,this->vertexBufferWire.get(source+2u));
                        buffer.set(dest+4u,this->vertexBufferWire.get(source+3u));
                        buffer.set(dest+5u,this->vertexBufferWire.get(source+4u));

                        source+=vboSizeofMesh3D[this->vboWireType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGB_NxNyNz:
                {
                    //edk::GU::vbo_XY_RGB -> edk::GU::vbo_XYZ_RGB_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboWireCount;i++){
                        buffer.set(dest,this->vertexBufferWire.get(source));
                        buffer.set(dest+1u,this->vertexBufferWire.get(source+1u));

                        buffer.set(dest+3u,this->vertexBufferWire.get(source+2u));
                        buffer.set(dest+4u,this->vertexBufferWire.get(source+3u));
                        buffer.set(dest+5u,this->vertexBufferWire.get(source+4u));

                        source+=vboSizeofMesh3D[this->vboWireType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGBA_NxNyNz:
                {
                    //edk::GU::vbo_XY_RGB -> edk::GU::vbo_XYZ_RGBA_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboWireCount;i++){
                        buffer.set(dest,this->vertexBufferWire.get(source));
                        buffer.set(dest+1u,this->vertexBufferWire.get(source+1u));

                        buffer.set(dest+3u,this->vertexBufferWire.get(source+2u));
                        buffer.set(dest+4u,this->vertexBufferWire.get(source+3u));
                        buffer.set(dest+5u,this->vertexBufferWire.get(source+4u));

                        source+=vboSizeofMesh3D[this->vboWireType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGB_NxNyNz_UVxUVy:
                {
                    //edk::GU::vbo_XY_RGB -> edk::GU::vbo_XYZ_RGB_NxNyNz_UVxUVy
                    for(edk::uint32 i=0u;i<this->vboWireCount;i++){
                        buffer.set(dest,this->vertexBufferWire.get(source));
                        buffer.set(dest+1u,this->vertexBufferWire.get(source+1u));

                        buffer.set(dest+3u,this->vertexBufferWire.get(source+2u));
                        buffer.set(dest+4u,this->vertexBufferWire.get(source+3u));
                        buffer.set(dest+5u,this->vertexBufferWire.get(source+4u));

                        source+=vboSizeofMesh3D[this->vboWireType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy:
                {
                    //edk::GU::vbo_XY_RGB -> edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy
                    for(edk::uint32 i=0u;i<this->vboWireCount;i++){
                        buffer.set(dest,this->vertexBufferWire.get(source));
                        buffer.set(dest+1u,this->vertexBufferWire.get(source+1u));

                        buffer.set(dest+3u,this->vertexBufferWire.get(source+2u));
                        buffer.set(dest+4u,this->vertexBufferWire.get(source+3u));
                        buffer.set(dest+5u,this->vertexBufferWire.get(source+4u));

                        source+=vboSizeofMesh3D[this->vboWireType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                default:
                    break;
                }
            }
                break;
            case edk::GU::vbo_XY_RGBA:
            {
                switch(type){
                case edk::GU::vbo_XY:
                {
                    //edk::GU::vbo_XY_RGBA -> edk::GU::vbo_XY
                    for(edk::uint32 i=0u;i<this->vboWireCount;i++){
                        buffer.set(dest,this->vertexBufferWire.get(source));
                        buffer.set(dest+1u,this->vertexBufferWire.get(source+1u));

                        source+=vboSizeofMesh3D[this->vboWireType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_NxNyNz:
                {
                    //edk::GU::vbo_XY_RGBA -> edk::GU::vbo_XY_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboWireCount;i++){
                        buffer.set(dest,this->vertexBufferWire.get(source));
                        buffer.set(dest+1u,this->vertexBufferWire.get(source+1u));

                        source+=vboSizeofMesh3D[this->vboWireType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGB:
                {
                    //edk::GU::vbo_XY_RGBA -> edk::GU::vbo_XY_RGB
                    for(edk::uint32 i=0u;i<this->vboWireCount;i++){
                        buffer.set(dest,this->vertexBufferWire.get(source));
                        buffer.set(dest+1u,this->vertexBufferWire.get(source+1u));

                        source+=vboSizeofMesh3D[this->vboWireType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGB_NxNyNz:
                {
                    //edk::GU::vbo_XY_RGBA -> edk::GU::vbo_XY_RGB_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboWireCount;i++){
                        buffer.set(dest,this->vertexBufferWire.get(source));
                        buffer.set(dest+1u,this->vertexBufferWire.get(source+1u));

                        source+=vboSizeofMesh3D[this->vboWireType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGBA_NxNyNz:
                {
                    //edk::GU::vbo_XY_RGBA -> edk::GU::vbo_XY_RGBA_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboWireCount;i++){
                        buffer.set(dest,this->vertexBufferWire.get(source));
                        buffer.set(dest+1u,this->vertexBufferWire.get(source+1u));

                        buffer.set(dest+2u,this->vertexBufferWire.get(source+2u));
                        buffer.set(dest+3u,this->vertexBufferWire.get(source+3u));
                        buffer.set(dest+4u,this->vertexBufferWire.get(source+4u));
                        buffer.set(dest+5u,this->vertexBufferWire.get(source+5u));

                        source+=vboSizeofMesh3D[this->vboWireType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGB_NxNyNz_UVxUVy:
                {
                    //edk::GU::vbo_XY_RGBA -> edk::GU::vbo_XY_RGB_NxNyNz_UVxUVy
                    for(edk::uint32 i=0u;i<this->vboWireCount;i++){
                        buffer.set(dest,this->vertexBufferWire.get(source));
                        buffer.set(dest+1u,this->vertexBufferWire.get(source+1u));

                        buffer.set(dest+2u,this->vertexBufferWire.get(source+2u));
                        buffer.set(dest+3u,this->vertexBufferWire.get(source+3u));
                        buffer.set(dest+4u,this->vertexBufferWire.get(source+4u));

                        source+=vboSizeofMesh3D[this->vboWireType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy:
                {
                    //edk::GU::vbo_XY_RGBA -> edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy
                    for(edk::uint32 i=0u;i<this->vboWireCount;i++){
                        buffer.set(dest,this->vertexBufferWire.get(source));
                        buffer.set(dest+1u,this->vertexBufferWire.get(source+1u));

                        buffer.set(dest+2u,this->vertexBufferWire.get(source+2u));
                        buffer.set(dest+3u,this->vertexBufferWire.get(source+3u));
                        buffer.set(dest+4u,this->vertexBufferWire.get(source+4u));
                        buffer.set(dest+5u,this->vertexBufferWire.get(source+5u));

                        source+=vboSizeofMesh3D[this->vboWireType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ:
                {
                    //edk::GU::vbo_XY_RGBA -> edk::GU::vbo_XYZ
                    for(edk::uint32 i=0u;i<this->vboWireCount;i++){
                        buffer.set(dest,this->vertexBufferWire.get(source));
                        buffer.set(dest+1u,this->vertexBufferWire.get(source+1u));

                        source+=vboSizeofMesh3D[this->vboWireType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_NxNyNz:
                {
                    //edk::GU::vbo_XY_RGBA -> edk::GU::vbo_XYZ_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboWireCount;i++){
                        buffer.set(dest,this->vertexBufferWire.get(source));
                        buffer.set(dest+1u,this->vertexBufferWire.get(source+1u));

                        source+=vboSizeofMesh3D[this->vboWireType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGB:
                {
                    //edk::GU::vbo_XY_RGBA -> edk::GU::vbo_XYZ_RGB
                    for(edk::uint32 i=0u;i<this->vboWireCount;i++){
                        buffer.set(dest,this->vertexBufferWire.get(source));
                        buffer.set(dest+1u,this->vertexBufferWire.get(source+1u));

                        source+=vboSizeofMesh3D[this->vboWireType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGBA:
                {
                    //edk::GU::vbo_XY_RGBA -> edk::GU::vbo_XYZ_RGBA
                    for(edk::uint32 i=0u;i<this->vboWireCount;i++){
                        buffer.set(dest,this->vertexBufferWire.get(source));
                        buffer.set(dest+1u,this->vertexBufferWire.get(source+1u));

                        buffer.set(dest+3u,this->vertexBufferWire.get(source+2u));
                        buffer.set(dest+4u,this->vertexBufferWire.get(source+3u));
                        buffer.set(dest+5u,this->vertexBufferWire.get(source+4u));
                        buffer.set(dest+6u,this->vertexBufferWire.get(source+5u));

                        source+=vboSizeofMesh3D[this->vboWireType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGB_NxNyNz:
                {
                    //edk::GU::vbo_XY_RGBA -> edk::GU::vbo_XYZ_RGB_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboWireCount;i++){
                        buffer.set(dest,this->vertexBufferWire.get(source));
                        buffer.set(dest+1u,this->vertexBufferWire.get(source+1u));

                        buffer.set(dest+3u,this->vertexBufferWire.get(source+2u));
                        buffer.set(dest+4u,this->vertexBufferWire.get(source+3u));
                        buffer.set(dest+5u,this->vertexBufferWire.get(source+4u));

                        source+=vboSizeofMesh3D[this->vboWireType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGBA_NxNyNz:
                {
                    //edk::GU::vbo_XY_RGBA -> edk::GU::vbo_XYZ_RGBA_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboWireCount;i++){
                        buffer.set(dest,this->vertexBufferWire.get(source));
                        buffer.set(dest+1u,this->vertexBufferWire.get(source+1u));

                        buffer.set(dest+3u,this->vertexBufferWire.get(source+2u));
                        buffer.set(dest+4u,this->vertexBufferWire.get(source+3u));
                        buffer.set(dest+5u,this->vertexBufferWire.get(source+4u));
                        buffer.set(dest+6u,this->vertexBufferWire.get(source+5u));

                        source+=vboSizeofMesh3D[this->vboWireType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGB_NxNyNz_UVxUVy:
                {
                    //edk::GU::vbo_XY_RGBA -> edk::GU::vbo_XYZ_RGB_NxNyNz_UVxUVy
                    for(edk::uint32 i=0u;i<this->vboWireCount;i++){
                        buffer.set(dest,this->vertexBufferWire.get(source));
                        buffer.set(dest+1u,this->vertexBufferWire.get(source+1u));

                        buffer.set(dest+3u,this->vertexBufferWire.get(source+2u));
                        buffer.set(dest+4u,this->vertexBufferWire.get(source+3u));
                        buffer.set(dest+5u,this->vertexBufferWire.get(source+4u));

                        source+=vboSizeofMesh3D[this->vboWireType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy:
                {
                    //edk::GU::vbo_XY_RGBA -> edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy
                    for(edk::uint32 i=0u;i<this->vboWireCount;i++){
                        buffer.set(dest,this->vertexBufferWire.get(source));
                        buffer.set(dest+1u,this->vertexBufferWire.get(source+1u));

                        buffer.set(dest+3u,this->vertexBufferWire.get(source+2u));
                        buffer.set(dest+4u,this->vertexBufferWire.get(source+3u));
                        buffer.set(dest+5u,this->vertexBufferWire.get(source+4u));
                        buffer.set(dest+6u,this->vertexBufferWire.get(source+5u));

                        source+=vboSizeofMesh3D[this->vboWireType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                default:
                    break;
                }
            }
                break;
            case edk::GU::vbo_XY_RGB_NxNyNz:
            {
                switch(type){
                case edk::GU::vbo_XY:
                {
                    //edk::GU::vbo_XY_RGB_NxNyNz -> edk::GU::vbo_XY
                    for(edk::uint32 i=0u;i<this->vboWireCount;i++){
                        buffer.set(dest,this->vertexBufferWire.get(source));
                        buffer.set(dest+1u,this->vertexBufferWire.get(source+1u));

                        source+=vboSizeofMesh3D[this->vboWireType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_NxNyNz:
                {
                    //edk::GU::vbo_XY_RGB_NxNyNz -> edk::GU::vbo_XY_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboWireCount;i++){
                        buffer.set(dest,this->vertexBufferWire.get(source));
                        buffer.set(dest+1u,this->vertexBufferWire.get(source+1u));

                        buffer.set(dest+2u,this->vertexBufferWire.get(source+5u));
                        buffer.set(dest+3u,this->vertexBufferWire.get(source+6u));
                        buffer.set(dest+4u,this->vertexBufferWire.get(source+7u));

                        source+=vboSizeofMesh3D[this->vboWireType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGB:
                {
                    //edk::GU::vbo_XY_RGB_NxNyNz -> edk::GU::vbo_XY_RGB
                    for(edk::uint32 i=0u;i<this->vboWireCount;i++){
                        buffer.set(dest,this->vertexBufferWire.get(source));
                        buffer.set(dest+1u,this->vertexBufferWire.get(source+1u));

                        buffer.set(dest+2u,this->vertexBufferWire.get(source+2u));
                        buffer.set(dest+3u,this->vertexBufferWire.get(source+3u));
                        buffer.set(dest+4u,this->vertexBufferWire.get(source+4u));

                        source+=vboSizeofMesh3D[this->vboWireType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGBA:
                {
                    //edk::GU::vbo_XY_RGB_NxNyNz -> edk::GU::vbo_XY_RGBA
                    for(edk::uint32 i=0u;i<this->vboWireCount;i++){
                        buffer.set(dest,this->vertexBufferWire.get(source));
                        buffer.set(dest+1u,this->vertexBufferWire.get(source+1u));

                        buffer.set(dest+2u,this->vertexBufferWire.get(source+2u));
                        buffer.set(dest+3u,this->vertexBufferWire.get(source+3u));
                        buffer.set(dest+4u,this->vertexBufferWire.get(source+4u));

                        source+=vboSizeofMesh3D[this->vboWireType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGBA_NxNyNz:
                {
                    //edk::GU::vbo_XY_RGB_NxNyNz -> edk::GU::vbo_XY_RGBA_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboWireCount;i++){
                        buffer.set(dest,this->vertexBufferWire.get(source));
                        buffer.set(dest+1u,this->vertexBufferWire.get(source+1u));

                        buffer.set(dest+2u,this->vertexBufferWire.get(source+2u));
                        buffer.set(dest+3u,this->vertexBufferWire.get(source+3u));
                        buffer.set(dest+4u,this->vertexBufferWire.get(source+4u));

                        buffer.set(dest+6u,this->vertexBufferWire.get(source+5u));
                        buffer.set(dest+7u,this->vertexBufferWire.get(source+6u));
                        buffer.set(dest+8u,this->vertexBufferWire.get(source+7u));

                        source+=vboSizeofMesh3D[this->vboWireType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGB_NxNyNz_UVxUVy:
                {
                    //edk::GU::vbo_XY_RGB_NxNyNz -> edk::GU::vbo_XY_RGB_NxNyNz_UVxUVy
                    for(edk::uint32 i=0u;i<this->vboWireCount;i++){
                        buffer.set(dest,this->vertexBufferWire.get(source));
                        buffer.set(dest+1u,this->vertexBufferWire.get(source+1u));

                        buffer.set(dest+2u,this->vertexBufferWire.get(source+2u));
                        buffer.set(dest+3u,this->vertexBufferWire.get(source+3u));
                        buffer.set(dest+4u,this->vertexBufferWire.get(source+4u));

                        buffer.set(dest+5u,this->vertexBufferWire.get(source+5u));
                        buffer.set(dest+6u,this->vertexBufferWire.get(source+6u));
                        buffer.set(dest+7u,this->vertexBufferWire.get(source+7u));

                        source+=vboSizeofMesh3D[this->vboWireType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy:
                {
                    //edk::GU::vbo_XY_RGB_NxNyNz -> edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy
                    for(edk::uint32 i=0u;i<this->vboWireCount;i++){
                        buffer.set(dest,this->vertexBufferWire.get(source));
                        buffer.set(dest+1u,this->vertexBufferWire.get(source+1u));

                        buffer.set(dest+2u,this->vertexBufferWire.get(source+2u));
                        buffer.set(dest+3u,this->vertexBufferWire.get(source+3u));
                        buffer.set(dest+4u,this->vertexBufferWire.get(source+4u));

                        buffer.set(dest+6u,this->vertexBufferWire.get(source+5u));
                        buffer.set(dest+7u,this->vertexBufferWire.get(source+6u));
                        buffer.set(dest+8u,this->vertexBufferWire.get(source+7u));

                        source+=vboSizeofMesh3D[this->vboWireType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ:
                {
                    //edk::GU::vbo_XY_RGB_NxNyNz -> edk::GU::vbo_XYZ
                    for(edk::uint32 i=0u;i<this->vboWireCount;i++){
                        buffer.set(dest,this->vertexBufferWire.get(source));
                        buffer.set(dest+1u,this->vertexBufferWire.get(source+1u));

                        source+=vboSizeofMesh3D[this->vboWireType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_NxNyNz:
                {
                    //edk::GU::vbo_XY_RGB_NxNyNz -> edk::GU::vbo_XYZ_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboWireCount;i++){
                        buffer.set(dest,this->vertexBufferWire.get(source));
                        buffer.set(dest+1u,this->vertexBufferWire.get(source+1u));

                        buffer.set(dest+3u,this->vertexBufferWire.get(source+5u));
                        buffer.set(dest+4u,this->vertexBufferWire.get(source+6u));
                        buffer.set(dest+5u,this->vertexBufferWire.get(source+7u));

                        source+=vboSizeofMesh3D[this->vboWireType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGB:
                {
                    //edk::GU::vbo_XY_RGB_NxNyNz -> edk::GU::vbo_XYZ_RGB
                    for(edk::uint32 i=0u;i<this->vboWireCount;i++){
                        buffer.set(dest,this->vertexBufferWire.get(source));
                        buffer.set(dest+1u,this->vertexBufferWire.get(source+1u));

                        buffer.set(dest+3u,this->vertexBufferWire.get(source+2u));
                        buffer.set(dest+4u,this->vertexBufferWire.get(source+3u));
                        buffer.set(dest+5u,this->vertexBufferWire.get(source+4u));

                        source+=vboSizeofMesh3D[this->vboWireType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGBA:
                {
                    //edk::GU::vbo_XY_RGB_NxNyNz -> edk::GU::vbo_XYZ_RGBA
                    for(edk::uint32 i=0u;i<this->vboWireCount;i++){
                        buffer.set(dest,this->vertexBufferWire.get(source));
                        buffer.set(dest+1u,this->vertexBufferWire.get(source+1u));

                        buffer.set(dest+3u,this->vertexBufferWire.get(source+2u));
                        buffer.set(dest+4u,this->vertexBufferWire.get(source+3u));
                        buffer.set(dest+5u,this->vertexBufferWire.get(source+4u));

                        source+=vboSizeofMesh3D[this->vboWireType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGB_NxNyNz:
                {
                    //edk::GU::vbo_XY_RGB_NxNyNz -> edk::GU::vbo_XYZ_RGB_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboWireCount;i++){
                        buffer.set(dest,this->vertexBufferWire.get(source));
                        buffer.set(dest+1u,this->vertexBufferWire.get(source+1u));

                        buffer.set(dest+3u,this->vertexBufferWire.get(source+2u));
                        buffer.set(dest+4u,this->vertexBufferWire.get(source+3u));
                        buffer.set(dest+5u,this->vertexBufferWire.get(source+4u));

                        buffer.set(dest+6u,this->vertexBufferWire.get(source+5u));
                        buffer.set(dest+7u,this->vertexBufferWire.get(source+6u));
                        buffer.set(dest+8u,this->vertexBufferWire.get(source+7u));

                        source+=vboSizeofMesh3D[this->vboWireType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGBA_NxNyNz:
                {
                    //edk::GU::vbo_XY_RGB_NxNyNz -> edk::GU::vbo_XYZ_RGBA_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboWireCount;i++){
                        buffer.set(dest,this->vertexBufferWire.get(source));
                        buffer.set(dest+1u,this->vertexBufferWire.get(source+1u));

                        buffer.set(dest+3u,this->vertexBufferWire.get(source+2u));
                        buffer.set(dest+4u,this->vertexBufferWire.get(source+3u));
                        buffer.set(dest+5u,this->vertexBufferWire.get(source+4u));

                        buffer.set(dest+7u,this->vertexBufferWire.get(source+5u));
                        buffer.set(dest+8u,this->vertexBufferWire.get(source+6u));
                        buffer.set(dest+9u,this->vertexBufferWire.get(source+7u));

                        source+=vboSizeofMesh3D[this->vboWireType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGB_NxNyNz_UVxUVy:
                {
                    //edk::GU::vbo_XY_RGB_NxNyNz -> edk::GU::vbo_XYZ_RGB_NxNyNz_UVxUVy
                    for(edk::uint32 i=0u;i<this->vboWireCount;i++){
                        buffer.set(dest,this->vertexBufferWire.get(source));
                        buffer.set(dest+1u,this->vertexBufferWire.get(source+1u));

                        buffer.set(dest+3u,this->vertexBufferWire.get(source+2u));
                        buffer.set(dest+4u,this->vertexBufferWire.get(source+3u));
                        buffer.set(dest+5u,this->vertexBufferWire.get(source+4u));

                        buffer.set(dest+6u,this->vertexBufferWire.get(source+5u));
                        buffer.set(dest+7u,this->vertexBufferWire.get(source+6u));
                        buffer.set(dest+8u,this->vertexBufferWire.get(source+7u));

                        source+=vboSizeofMesh3D[this->vboWireType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy:
                {
                    //edk::GU::vbo_XY_RGB_NxNyNz -> edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy
                    for(edk::uint32 i=0u;i<this->vboWireCount;i++){
                        buffer.set(dest,this->vertexBufferWire.get(source));
                        buffer.set(dest+1u,this->vertexBufferWire.get(source+1u));

                        buffer.set(dest+3u,this->vertexBufferWire.get(source+2u));
                        buffer.set(dest+4u,this->vertexBufferWire.get(source+3u));
                        buffer.set(dest+5u,this->vertexBufferWire.get(source+4u));

                        buffer.set(dest+7u,this->vertexBufferWire.get(source+5u));
                        buffer.set(dest+8u,this->vertexBufferWire.get(source+6u));
                        buffer.set(dest+9u,this->vertexBufferWire.get(source+7u));

                        source+=vboSizeofMesh3D[this->vboWireType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                default:
                    break;
                }
            }
                break;
            case edk::GU::vbo_XY_RGBA_NxNyNz:
            {
                switch(type){
                case edk::GU::vbo_XY:
                {
                    //edk::GU::vbo_XY_RGBA_NxNyNz -> edk::GU::vbo_XY
                    for(edk::uint32 i=0u;i<this->vboWireCount;i++){
                        buffer.set(dest,this->vertexBufferWire.get(source));
                        buffer.set(dest+1u,this->vertexBufferWire.get(source+1u));

                        source+=vboSizeofMesh3D[this->vboWireType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_NxNyNz:
                {
                    //edk::GU::vbo_XY_RGBA_NxNyNz -> edk::GU::vbo_XY_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboWireCount;i++){
                        buffer.set(dest,this->vertexBufferWire.get(source));
                        buffer.set(dest+1u,this->vertexBufferWire.get(source+1u));

                        buffer.set(dest+2u,this->vertexBufferWire.get(source+6u));
                        buffer.set(dest+3u,this->vertexBufferWire.get(source+7u));
                        buffer.set(dest+4u,this->vertexBufferWire.get(source+8u));

                        source+=vboSizeofMesh3D[this->vboWireType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGB:
                {
                    //edk::GU::vbo_XY_RGBA_NxNyNz -> edk::GU::vbo_XY_RGB
                    for(edk::uint32 i=0u;i<this->vboWireCount;i++){
                        buffer.set(dest,this->vertexBufferWire.get(source));
                        buffer.set(dest+1u,this->vertexBufferWire.get(source+1u));

                        buffer.set(dest+2u,this->vertexBufferWire.get(source+2u));
                        buffer.set(dest+3u,this->vertexBufferWire.get(source+3u));
                        buffer.set(dest+4u,this->vertexBufferWire.get(source+4u));

                        source+=vboSizeofMesh3D[this->vboWireType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGBA:
                {
                    //edk::GU::vbo_XY_RGBA_NxNyNz -> edk::GU::vbo_XY_RGBA
                    for(edk::uint32 i=0u;i<this->vboWireCount;i++){
                        buffer.set(dest,this->vertexBufferWire.get(source));
                        buffer.set(dest+1u,this->vertexBufferWire.get(source+1u));

                        buffer.set(dest+2u,this->vertexBufferWire.get(source+2u));
                        buffer.set(dest+3u,this->vertexBufferWire.get(source+3u));
                        buffer.set(dest+4u,this->vertexBufferWire.get(source+4u));
                        buffer.set(dest+5u,this->vertexBufferWire.get(source+5u));

                        source+=vboSizeofMesh3D[this->vboWireType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGB_NxNyNz:
                {
                    //edk::GU::vbo_XY_RGBA_NxNyNz -> edk::GU::vbo_XY_RGB_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboWireCount;i++){
                        buffer.set(dest,this->vertexBufferWire.get(source));
                        buffer.set(dest+1u,this->vertexBufferWire.get(source+1u));

                        buffer.set(dest+2u,this->vertexBufferWire.get(source+2u));
                        buffer.set(dest+3u,this->vertexBufferWire.get(source+3u));
                        buffer.set(dest+4u,this->vertexBufferWire.get(source+4u));

                        buffer.set(dest+5u,this->vertexBufferWire.get(source+6u));
                        buffer.set(dest+6u,this->vertexBufferWire.get(source+7u));
                        buffer.set(dest+7u,this->vertexBufferWire.get(source+8u));

                        source+=vboSizeofMesh3D[this->vboWireType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGB_NxNyNz_UVxUVy:
                {
                    //edk::GU::vbo_XY_RGBA_NxNyNz -> edk::GU::vbo_XY_RGB_NxNyNz_UVxUVy
                    for(edk::uint32 i=0u;i<this->vboWireCount;i++){
                        buffer.set(dest,this->vertexBufferWire.get(source));
                        buffer.set(dest+1u,this->vertexBufferWire.get(source+1u));

                        buffer.set(dest+2u,this->vertexBufferWire.get(source+2u));
                        buffer.set(dest+3u,this->vertexBufferWire.get(source+3u));
                        buffer.set(dest+4u,this->vertexBufferWire.get(source+4u));

                        buffer.set(dest+5u,this->vertexBufferWire.get(source+6u));
                        buffer.set(dest+6u,this->vertexBufferWire.get(source+7u));
                        buffer.set(dest+7u,this->vertexBufferWire.get(source+8u));

                        source+=vboSizeofMesh3D[this->vboWireType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy:
                {
                    //edk::GU::vbo_XY_RGBA_NxNyNz -> edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy
                    for(edk::uint32 i=0u;i<this->vboWireCount;i++){
                        buffer.set(dest,this->vertexBufferWire.get(source));
                        buffer.set(dest+1u,this->vertexBufferWire.get(source+1u));

                        buffer.set(dest+2u,this->vertexBufferWire.get(source+2u));
                        buffer.set(dest+3u,this->vertexBufferWire.get(source+3u));
                        buffer.set(dest+4u,this->vertexBufferWire.get(source+4u));
                        buffer.set(dest+5u,this->vertexBufferWire.get(source+5u));

                        buffer.set(dest+6u,this->vertexBufferWire.get(source+6u));
                        buffer.set(dest+7u,this->vertexBufferWire.get(source+7u));
                        buffer.set(dest+8u,this->vertexBufferWire.get(source+8u));

                        source+=vboSizeofMesh3D[this->vboWireType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ:
                {
                    //edk::GU::vbo_XY_RGBA_NxNyNz -> edk::GU::vbo_XYZ
                    for(edk::uint32 i=0u;i<this->vboWireCount;i++){
                        buffer.set(dest,this->vertexBufferWire.get(source));
                        buffer.set(dest+1u,this->vertexBufferWire.get(source+1u));

                        source+=vboSizeofMesh3D[this->vboWireType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_NxNyNz:
                {
                    //edk::GU::vbo_XY_RGBA_NxNyNz -> edk::GU::vbo_XYZ_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboWireCount;i++){
                        buffer.set(dest,this->vertexBufferWire.get(source));
                        buffer.set(dest+1u,this->vertexBufferWire.get(source+1u));

                        buffer.set(dest+3u,this->vertexBufferWire.get(source+6u));
                        buffer.set(dest+4u,this->vertexBufferWire.get(source+7u));
                        buffer.set(dest+5u,this->vertexBufferWire.get(source+8u));

                        source+=vboSizeofMesh3D[this->vboWireType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGB:
                {
                    //edk::GU::vbo_XY_RGBA_NxNyNz -> edk::GU::vbo_XYZ_RGB
                    for(edk::uint32 i=0u;i<this->vboWireCount;i++){
                        buffer.set(dest,this->vertexBufferWire.get(source));
                        buffer.set(dest+1u,this->vertexBufferWire.get(source+1u));

                        buffer.set(dest+3u,this->vertexBufferWire.get(source+2u));
                        buffer.set(dest+4u,this->vertexBufferWire.get(source+3u));
                        buffer.set(dest+5u,this->vertexBufferWire.get(source+4u));

                        source+=vboSizeofMesh3D[this->vboWireType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGBA:
                {
                    //edk::GU::vbo_XY_RGBA_NxNyNz -> edk::GU::vbo_XYZ_RGBA
                    for(edk::uint32 i=0u;i<this->vboWireCount;i++){
                        buffer.set(dest,this->vertexBufferWire.get(source));
                        buffer.set(dest+1u,this->vertexBufferWire.get(source+1u));

                        buffer.set(dest+3u,this->vertexBufferWire.get(source+2u));
                        buffer.set(dest+4u,this->vertexBufferWire.get(source+3u));
                        buffer.set(dest+5u,this->vertexBufferWire.get(source+4u));
                        buffer.set(dest+6u,this->vertexBufferWire.get(source+5u));

                        source+=vboSizeofMesh3D[this->vboWireType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGB_NxNyNz:
                {
                    //edk::GU::vbo_XY_RGBA_NxNyNz -> edk::GU::vbo_XYZ_RGB_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboWireCount;i++){
                        buffer.set(dest,this->vertexBufferWire.get(source));
                        buffer.set(dest+1u,this->vertexBufferWire.get(source+1u));

                        buffer.set(dest+3u,this->vertexBufferWire.get(source+2u));
                        buffer.set(dest+4u,this->vertexBufferWire.get(source+3u));
                        buffer.set(dest+5u,this->vertexBufferWire.get(source+4u));

                        buffer.set(dest+6u,this->vertexBufferWire.get(source+6u));
                        buffer.set(dest+7u,this->vertexBufferWire.get(source+7u));
                        buffer.set(dest+8u,this->vertexBufferWire.get(source+8u));

                        source+=vboSizeofMesh3D[this->vboWireType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGBA_NxNyNz:
                {
                    //edk::GU::vbo_XY_RGBA_NxNyNz -> edk::GU::vbo_XYZ_RGBA_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboWireCount;i++){
                        buffer.set(dest,this->vertexBufferWire.get(source));
                        buffer.set(dest+1u,this->vertexBufferWire.get(source+1u));

                        buffer.set(dest+3u,this->vertexBufferWire.get(source+2u));
                        buffer.set(dest+4u,this->vertexBufferWire.get(source+3u));
                        buffer.set(dest+5u,this->vertexBufferWire.get(source+4u));
                        buffer.set(dest+6u,this->vertexBufferWire.get(source+5u));

                        buffer.set(dest+7u,this->vertexBufferWire.get(source+6u));
                        buffer.set(dest+8u,this->vertexBufferWire.get(source+7u));
                        buffer.set(dest+9u,this->vertexBufferWire.get(source+8u));

                        source+=vboSizeofMesh3D[this->vboWireType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGB_NxNyNz_UVxUVy:
                {
                    //edk::GU::vbo_XY_RGBA_NxNyNz -> edk::GU::vbo_XYZ_RGB_NxNyNz_UVxUVy
                    for(edk::uint32 i=0u;i<this->vboWireCount;i++){
                        buffer.set(dest,this->vertexBufferWire.get(source));
                        buffer.set(dest+1u,this->vertexBufferWire.get(source+1u));

                        buffer.set(dest+3u,this->vertexBufferWire.get(source+2u));
                        buffer.set(dest+4u,this->vertexBufferWire.get(source+3u));
                        buffer.set(dest+5u,this->vertexBufferWire.get(source+4u));

                        buffer.set(dest+6u,this->vertexBufferWire.get(source+6u));
                        buffer.set(dest+7u,this->vertexBufferWire.get(source+7u));
                        buffer.set(dest+8u,this->vertexBufferWire.get(source+8u));

                        source+=vboSizeofMesh3D[this->vboWireType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy:
                {
                    //edk::GU::vbo_XY_RGBA_NxNyNz -> edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy
                    for(edk::uint32 i=0u;i<this->vboWireCount;i++){
                        buffer.set(dest,this->vertexBufferWire.get(source));
                        buffer.set(dest+1u,this->vertexBufferWire.get(source+1u));

                        buffer.set(dest+3u,this->vertexBufferWire.get(source+2u));
                        buffer.set(dest+4u,this->vertexBufferWire.get(source+3u));
                        buffer.set(dest+5u,this->vertexBufferWire.get(source+4u));
                        buffer.set(dest+6u,this->vertexBufferWire.get(source+5u));

                        buffer.set(dest+7u,this->vertexBufferWire.get(source+6u));
                        buffer.set(dest+8u,this->vertexBufferWire.get(source+7u));
                        buffer.set(dest+9u,this->vertexBufferWire.get(source+8u));

                        source+=vboSizeofMesh3D[this->vboWireType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                default:
                    break;
                }
            }
                break;
            case edk::GU::vbo_XY_RGB_NxNyNz_UVxUVy:
            {
                switch(type){
                case edk::GU::vbo_XY:
                {
                    //edk::GU::vbo_XY_RGB_NxNyNz_UVxUVy -> edk::GU::vbo_XY
                    for(edk::uint32 i=0u;i<this->vboWireCount;i++){
                        buffer.set(dest,this->vertexBufferWire.get(source));
                        buffer.set(dest+1u,this->vertexBufferWire.get(source+1u));

                        source+=vboSizeofMesh3D[this->vboWireType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_NxNyNz:
                {
                    //edk::GU::vbo_XY_RGB_NxNyNz_UVxUVy -> edk::GU::vbo_XY_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboWireCount;i++){
                        buffer.set(dest,this->vertexBufferWire.get(source));
                        buffer.set(dest+1u,this->vertexBufferWire.get(source+1u));

                        buffer.set(dest+2u,this->vertexBufferWire.get(source+5u));
                        buffer.set(dest+3u,this->vertexBufferWire.get(source+6u));
                        buffer.set(dest+4u,this->vertexBufferWire.get(source+7u));

                        source+=vboSizeofMesh3D[this->vboWireType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGB:
                {
                    //edk::GU::vbo_XY_RGB_NxNyNz_UVxUVy -> edk::GU::vbo_XY_RGB
                    for(edk::uint32 i=0u;i<this->vboWireCount;i++){
                        buffer.set(dest,this->vertexBufferWire.get(source));
                        buffer.set(dest+1u,this->vertexBufferWire.get(source+1u));

                        buffer.set(dest+2u,this->vertexBufferWire.get(source+2u));
                        buffer.set(dest+3u,this->vertexBufferWire.get(source+3u));
                        buffer.set(dest+4u,this->vertexBufferWire.get(source+4u));

                        source+=vboSizeofMesh3D[this->vboWireType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGBA:
                {
                    //edk::GU::vbo_XY_RGB_NxNyNz_UVxUVy -> edk::GU::vbo_XY_RGBA
                    for(edk::uint32 i=0u;i<this->vboWireCount;i++){
                        buffer.set(dest,this->vertexBufferWire.get(source));
                        buffer.set(dest+1u,this->vertexBufferWire.get(source+1u));

                        buffer.set(dest+2u,this->vertexBufferWire.get(source+2u));
                        buffer.set(dest+3u,this->vertexBufferWire.get(source+3u));
                        buffer.set(dest+4u,this->vertexBufferWire.get(source+4u));

                        source+=vboSizeofMesh3D[this->vboWireType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGB_NxNyNz:
                {
                    //edk::GU::vbo_XY_RGB_NxNyNz_UVxUVy -> edk::GU::vbo_XY_RGB_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboWireCount;i++){
                        buffer.set(dest,this->vertexBufferWire.get(source));
                        buffer.set(dest+1u,this->vertexBufferWire.get(source+1u));

                        buffer.set(dest+2u,this->vertexBufferWire.get(source+2u));
                        buffer.set(dest+3u,this->vertexBufferWire.get(source+3u));
                        buffer.set(dest+4u,this->vertexBufferWire.get(source+4u));

                        buffer.set(dest+5u,this->vertexBufferWire.get(source+5u));
                        buffer.set(dest+6u,this->vertexBufferWire.get(source+6u));
                        buffer.set(dest+7u,this->vertexBufferWire.get(source+7u));

                        source+=vboSizeofMesh3D[this->vboWireType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGBA_NxNyNz:
                {
                    //edk::GU::vbo_XY_RGB_NxNyNz_UVxUVy -> edk::GU::vbo_XY_RGBA_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboWireCount;i++){
                        buffer.set(dest,this->vertexBufferWire.get(source));
                        buffer.set(dest+1u,this->vertexBufferWire.get(source+1u));

                        buffer.set(dest+2u,this->vertexBufferWire.get(source+2u));
                        buffer.set(dest+3u,this->vertexBufferWire.get(source+3u));
                        buffer.set(dest+4u,this->vertexBufferWire.get(source+4u));

                        buffer.set(dest+6u,this->vertexBufferWire.get(source+5u));
                        buffer.set(dest+7u,this->vertexBufferWire.get(source+6u));
                        buffer.set(dest+8u,this->vertexBufferWire.get(source+7u));

                        source+=vboSizeofMesh3D[this->vboWireType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy:
                {
                    //edk::GU::vbo_XY_RGB_NxNyNz_UVxUVy -> edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy
                    for(edk::uint32 i=0u;i<this->vboWireCount;i++){
                        buffer.set(dest,this->vertexBufferWire.get(source));
                        buffer.set(dest+1u,this->vertexBufferWire.get(source+1u));

                        buffer.set(dest+2u,this->vertexBufferWire.get(source+2u));
                        buffer.set(dest+3u,this->vertexBufferWire.get(source+3u));
                        buffer.set(dest+4u,this->vertexBufferWire.get(source+4u));

                        buffer.set(dest+6u,this->vertexBufferWire.get(source+5u));
                        buffer.set(dest+7u,this->vertexBufferWire.get(source+6u));
                        buffer.set(dest+8u,this->vertexBufferWire.get(source+7u));

                        buffer.set(dest+9u,this->vertexBufferWire.get(source+8u));
                        buffer.set(dest+10u,this->vertexBufferWire.get(source+9u));

                        source+=vboSizeofMesh3D[this->vboWireType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ:
                {
                    //edk::GU::vbo_XY_RGB_NxNyNz_UVxUVy -> edk::GU::vbo_XYZ
                    for(edk::uint32 i=0u;i<this->vboWireCount;i++){
                        buffer.set(dest,this->vertexBufferWire.get(source));
                        buffer.set(dest+1u,this->vertexBufferWire.get(source+1u));

                        source+=vboSizeofMesh3D[this->vboWireType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_NxNyNz:
                {
                    //edk::GU::vbo_XY_RGB_NxNyNz_UVxUVy -> edk::GU::vbo_XYZ_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboWireCount;i++){
                        buffer.set(dest,this->vertexBufferWire.get(source));
                        buffer.set(dest+1u,this->vertexBufferWire.get(source+1u));

                        buffer.set(dest+3u,this->vertexBufferWire.get(source+5u));
                        buffer.set(dest+4u,this->vertexBufferWire.get(source+6u));
                        buffer.set(dest+5u,this->vertexBufferWire.get(source+7u));

                        source+=vboSizeofMesh3D[this->vboWireType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGB:
                {
                    //edk::GU::vbo_XY_RGB_NxNyNz_UVxUVy -> edk::GU::vbo_XYZ_RGB
                    for(edk::uint32 i=0u;i<this->vboWireCount;i++){
                        buffer.set(dest,this->vertexBufferWire.get(source));
                        buffer.set(dest+1u,this->vertexBufferWire.get(source+1u));

                        buffer.set(dest+3u,this->vertexBufferWire.get(source+2u));
                        buffer.set(dest+4u,this->vertexBufferWire.get(source+3u));
                        buffer.set(dest+5u,this->vertexBufferWire.get(source+4u));

                        source+=vboSizeofMesh3D[this->vboWireType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGBA:
                {
                    //edk::GU::vbo_XY_RGB_NxNyNz_UVxUVy -> edk::GU::vbo_XYZ_RGBA
                    for(edk::uint32 i=0u;i<this->vboWireCount;i++){
                        buffer.set(dest,this->vertexBufferWire.get(source));
                        buffer.set(dest+1u,this->vertexBufferWire.get(source+1u));

                        buffer.set(dest+3u,this->vertexBufferWire.get(source+2u));
                        buffer.set(dest+4u,this->vertexBufferWire.get(source+3u));
                        buffer.set(dest+5u,this->vertexBufferWire.get(source+4u));

                        source+=vboSizeofMesh3D[this->vboWireType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGB_NxNyNz:
                {
                    //edk::GU::vbo_XY_RGB_NxNyNz_UVxUVy -> edk::GU::vbo_XYZ_RGB_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboWireCount;i++){
                        buffer.set(dest,this->vertexBufferWire.get(source));
                        buffer.set(dest+1u,this->vertexBufferWire.get(source+1u));

                        buffer.set(dest+3u,this->vertexBufferWire.get(source+2u));
                        buffer.set(dest+4u,this->vertexBufferWire.get(source+3u));
                        buffer.set(dest+5u,this->vertexBufferWire.get(source+4u));

                        buffer.set(dest+6u,this->vertexBufferWire.get(source+5u));
                        buffer.set(dest+7u,this->vertexBufferWire.get(source+6u));
                        buffer.set(dest+8u,this->vertexBufferWire.get(source+7u));

                        source+=vboSizeofMesh3D[this->vboWireType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGBA_NxNyNz:
                {
                    //edk::GU::vbo_XY_RGB_NxNyNz_UVxUVy -> edk::GU::vbo_XYZ_RGBA_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboWireCount;i++){
                        buffer.set(dest,this->vertexBufferWire.get(source));
                        buffer.set(dest+1u,this->vertexBufferWire.get(source+1u));

                        buffer.set(dest+3u,this->vertexBufferWire.get(source+2u));
                        buffer.set(dest+4u,this->vertexBufferWire.get(source+3u));
                        buffer.set(dest+5u,this->vertexBufferWire.get(source+4u));

                        buffer.set(dest+7u,this->vertexBufferWire.get(source+5u));
                        buffer.set(dest+8u,this->vertexBufferWire.get(source+6u));
                        buffer.set(dest+9u,this->vertexBufferWire.get(source+7u));

                        source+=vboSizeofMesh3D[this->vboWireType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGB_NxNyNz_UVxUVy:
                {
                    //edk::GU::vbo_XY_RGB_NxNyNz_UVxUVy -> edk::GU::vbo_XYZ_RGB_NxNyNz_UVxUVy
                    for(edk::uint32 i=0u;i<this->vboWireCount;i++){
                        buffer.set(dest,this->vertexBufferWire.get(source));
                        buffer.set(dest+1u,this->vertexBufferWire.get(source+1u));

                        buffer.set(dest+3u,this->vertexBufferWire.get(source+2u));
                        buffer.set(dest+4u,this->vertexBufferWire.get(source+3u));
                        buffer.set(dest+5u,this->vertexBufferWire.get(source+4u));

                        buffer.set(dest+6u,this->vertexBufferWire.get(source+5u));
                        buffer.set(dest+7u,this->vertexBufferWire.get(source+6u));
                        buffer.set(dest+8u,this->vertexBufferWire.get(source+7u));

                        buffer.set(dest+9u,this->vertexBufferWire.get(source+8u));
                        buffer.set(dest+10u,this->vertexBufferWire.get(source+9u));

                        source+=vboSizeofMesh3D[this->vboWireType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy:
                {
                    //edk::GU::vbo_XY_RGB_NxNyNz_UVxUVy -> edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy
                    for(edk::uint32 i=0u;i<this->vboWireCount;i++){
                        buffer.set(dest,this->vertexBufferWire.get(source));
                        buffer.set(dest+1u,this->vertexBufferWire.get(source+1u));

                        buffer.set(dest+3u,this->vertexBufferWire.get(source+2u));
                        buffer.set(dest+4u,this->vertexBufferWire.get(source+3u));
                        buffer.set(dest+5u,this->vertexBufferWire.get(source+4u));

                        buffer.set(dest+7u,this->vertexBufferWire.get(source+5u));
                        buffer.set(dest+8u,this->vertexBufferWire.get(source+6u));
                        buffer.set(dest+9u,this->vertexBufferWire.get(source+7u));

                        buffer.set(dest+10u,this->vertexBufferWire.get(source+8u));
                        buffer.set(dest+11u,this->vertexBufferWire.get(source+9u));

                        source+=vboSizeofMesh3D[this->vboWireType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                default:
                    break;
                }
            }
                break;
            case edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy:
            {
                switch(type){
                case edk::GU::vbo_XY:
                {
                    //edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy -> edk::GU::vbo_XY
                    for(edk::uint32 i=0u;i<this->vboWireCount;i++){
                        buffer.set(dest,this->vertexBufferWire.get(source));
                        buffer.set(dest+1u,this->vertexBufferWire.get(source+1u));

                        source+=vboSizeofMesh3D[this->vboWireType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_NxNyNz:
                {
                    //edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy -> edk::GU::vbo_XY_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboWireCount;i++){
                        buffer.set(dest,this->vertexBufferWire.get(source));
                        buffer.set(dest+1u,this->vertexBufferWire.get(source+1u));

                        buffer.set(dest+2u,this->vertexBufferWire.get(source+6u));
                        buffer.set(dest+3u,this->vertexBufferWire.get(source+7u));
                        buffer.set(dest+4u,this->vertexBufferWire.get(source+8u));

                        source+=vboSizeofMesh3D[this->vboWireType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGB:
                {
                    //edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy -> edk::GU::vbo_XY_RGB
                    for(edk::uint32 i=0u;i<this->vboWireCount;i++){
                        buffer.set(dest,this->vertexBufferWire.get(source));
                        buffer.set(dest+1u,this->vertexBufferWire.get(source+1u));

                        buffer.set(dest+2u,this->vertexBufferWire.get(source+2u));
                        buffer.set(dest+3u,this->vertexBufferWire.get(source+3u));
                        buffer.set(dest+4u,this->vertexBufferWire.get(source+4u));

                        source+=vboSizeofMesh3D[this->vboWireType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGBA:
                {
                    //edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy -> edk::GU::vbo_XY_RGBA
                    for(edk::uint32 i=0u;i<this->vboWireCount;i++){
                        buffer.set(dest,this->vertexBufferWire.get(source));
                        buffer.set(dest+1u,this->vertexBufferWire.get(source+1u));

                        buffer.set(dest+2u,this->vertexBufferWire.get(source+2u));
                        buffer.set(dest+3u,this->vertexBufferWire.get(source+3u));
                        buffer.set(dest+4u,this->vertexBufferWire.get(source+4u));
                        buffer.set(dest+5u,this->vertexBufferWire.get(source+5u));

                        source+=vboSizeofMesh3D[this->vboWireType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGB_NxNyNz:
                {
                    //edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy -> edk::GU::vbo_XY_RGB_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboWireCount;i++){
                        buffer.set(dest,this->vertexBufferWire.get(source));
                        buffer.set(dest+1u,this->vertexBufferWire.get(source+1u));

                        buffer.set(dest+2u,this->vertexBufferWire.get(source+2u));
                        buffer.set(dest+3u,this->vertexBufferWire.get(source+3u));
                        buffer.set(dest+4u,this->vertexBufferWire.get(source+4u));

                        buffer.set(dest+5u,this->vertexBufferWire.get(source+6u));
                        buffer.set(dest+6u,this->vertexBufferWire.get(source+7u));
                        buffer.set(dest+7u,this->vertexBufferWire.get(source+8u));

                        source+=vboSizeofMesh3D[this->vboWireType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGBA_NxNyNz:
                {
                    //edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy -> edk::GU::vbo_XY_RGBA_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboWireCount;i++){
                        buffer.set(dest,this->vertexBufferWire.get(source));
                        buffer.set(dest+1u,this->vertexBufferWire.get(source+1u));

                        buffer.set(dest+2u,this->vertexBufferWire.get(source+2u));
                        buffer.set(dest+3u,this->vertexBufferWire.get(source+3u));
                        buffer.set(dest+4u,this->vertexBufferWire.get(source+4u));
                        buffer.set(dest+5u,this->vertexBufferWire.get(source+5u));

                        buffer.set(dest+6u,this->vertexBufferWire.get(source+6u));
                        buffer.set(dest+7u,this->vertexBufferWire.get(source+7u));
                        buffer.set(dest+8u,this->vertexBufferWire.get(source+8u));

                        source+=vboSizeofMesh3D[this->vboWireType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGB_NxNyNz_UVxUVy:
                {
                    //edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy -> edk::GU::vbo_XY_RGB_NxNyNz_UVxUVy
                    for(edk::uint32 i=0u;i<this->vboWireCount;i++){
                        buffer.set(dest,this->vertexBufferWire.get(source));
                        buffer.set(dest+1u,this->vertexBufferWire.get(source+1u));

                        buffer.set(dest+2u,this->vertexBufferWire.get(source+2u));
                        buffer.set(dest+3u,this->vertexBufferWire.get(source+3u));
                        buffer.set(dest+4u,this->vertexBufferWire.get(source+4u));

                        buffer.set(dest+5u,this->vertexBufferWire.get(source+6u));
                        buffer.set(dest+6u,this->vertexBufferWire.get(source+7u));
                        buffer.set(dest+7u,this->vertexBufferWire.get(source+8u));

                        buffer.set(dest+8u,this->vertexBufferWire.get(source+9u));
                        buffer.set(dest+9u,this->vertexBufferWire.get(source+10u));

                        source+=vboSizeofMesh3D[this->vboWireType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ:
                {
                    //edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy -> edk::GU::vbo_XYZ
                    for(edk::uint32 i=0u;i<this->vboWireCount;i++){
                        buffer.set(dest,this->vertexBufferWire.get(source));
                        buffer.set(dest+1u,this->vertexBufferWire.get(source+1u));

                        source+=vboSizeofMesh3D[this->vboWireType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_NxNyNz:
                {
                    //edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy -> edk::GU::vbo_XYZ_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboWireCount;i++){
                        buffer.set(dest,this->vertexBufferWire.get(source));
                        buffer.set(dest+1u,this->vertexBufferWire.get(source+1u));

                        buffer.set(dest+3u,this->vertexBufferWire.get(source+6u));
                        buffer.set(dest+4u,this->vertexBufferWire.get(source+7u));
                        buffer.set(dest+5u,this->vertexBufferWire.get(source+8u));

                        source+=vboSizeofMesh3D[this->vboWireType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGB:
                {
                    //edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy -> edk::GU::vbo_XYZ_RGB
                    for(edk::uint32 i=0u;i<this->vboWireCount;i++){
                        buffer.set(dest,this->vertexBufferWire.get(source));
                        buffer.set(dest+1u,this->vertexBufferWire.get(source+1u));

                        buffer.set(dest+3u,this->vertexBufferWire.get(source+2u));
                        buffer.set(dest+4u,this->vertexBufferWire.get(source+3u));
                        buffer.set(dest+5u,this->vertexBufferWire.get(source+4u));

                        source+=vboSizeofMesh3D[this->vboWireType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGBA:
                {
                    //edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy -> edk::GU::vbo_XYZ_RGBA
                    for(edk::uint32 i=0u;i<this->vboWireCount;i++){
                        buffer.set(dest,this->vertexBufferWire.get(source));
                        buffer.set(dest+1u,this->vertexBufferWire.get(source+1u));

                        buffer.set(dest+3u,this->vertexBufferWire.get(source+2u));
                        buffer.set(dest+4u,this->vertexBufferWire.get(source+3u));
                        buffer.set(dest+5u,this->vertexBufferWire.get(source+4u));
                        buffer.set(dest+6u,this->vertexBufferWire.get(source+5u));

                        source+=vboSizeofMesh3D[this->vboWireType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGB_NxNyNz:
                {
                    //edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy -> edk::GU::vbo_XYZ_RGB_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboWireCount;i++){
                        buffer.set(dest,this->vertexBufferWire.get(source));
                        buffer.set(dest+1u,this->vertexBufferWire.get(source+1u));

                        buffer.set(dest+3u,this->vertexBufferWire.get(source+2u));
                        buffer.set(dest+4u,this->vertexBufferWire.get(source+3u));
                        buffer.set(dest+5u,this->vertexBufferWire.get(source+4u));

                        buffer.set(dest+6u,this->vertexBufferWire.get(source+6u));
                        buffer.set(dest+7u,this->vertexBufferWire.get(source+7u));
                        buffer.set(dest+8u,this->vertexBufferWire.get(source+8u));

                        source+=vboSizeofMesh3D[this->vboWireType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGBA_NxNyNz:
                {
                    //edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy -> edk::GU::vbo_XYZ_RGBA_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboWireCount;i++){
                        buffer.set(dest,this->vertexBufferWire.get(source));
                        buffer.set(dest+1u,this->vertexBufferWire.get(source+1u));

                        buffer.set(dest+3u,this->vertexBufferWire.get(source+2u));
                        buffer.set(dest+4u,this->vertexBufferWire.get(source+3u));
                        buffer.set(dest+5u,this->vertexBufferWire.get(source+4u));
                        buffer.set(dest+6u,this->vertexBufferWire.get(source+5u));

                        buffer.set(dest+7u,this->vertexBufferWire.get(source+6u));
                        buffer.set(dest+8u,this->vertexBufferWire.get(source+7u));
                        buffer.set(dest+9u,this->vertexBufferWire.get(source+8u));

                        source+=vboSizeofMesh3D[this->vboWireType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGB_NxNyNz_UVxUVy:
                {
                    //edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy -> edk::GU::vbo_XYZ_RGB_NxNyNz_UVxUVy
                    for(edk::uint32 i=0u;i<this->vboWireCount;i++){
                        buffer.set(dest,this->vertexBufferWire.get(source));
                        buffer.set(dest+1u,this->vertexBufferWire.get(source+1u));

                        buffer.set(dest+3u,this->vertexBufferWire.get(source+2u));
                        buffer.set(dest+4u,this->vertexBufferWire.get(source+3u));
                        buffer.set(dest+5u,this->vertexBufferWire.get(source+4u));

                        buffer.set(dest+6u,this->vertexBufferWire.get(source+6u));
                        buffer.set(dest+7u,this->vertexBufferWire.get(source+7u));
                        buffer.set(dest+8u,this->vertexBufferWire.get(source+8u));

                        buffer.set(dest+9u,this->vertexBufferWire.get(source+9u));
                        buffer.set(dest+10u,this->vertexBufferWire.get(source+10u));

                        source+=vboSizeofMesh3D[this->vboWireType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy:
                {
                    //edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy -> edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy
                    for(edk::uint32 i=0u;i<this->vboWireCount;i++){
                        buffer.set(dest,this->vertexBufferWire.get(source));
                        buffer.set(dest+1u,this->vertexBufferWire.get(source+1u));

                        buffer.set(dest+3u,this->vertexBufferWire.get(source+2u));
                        buffer.set(dest+4u,this->vertexBufferWire.get(source+3u));
                        buffer.set(dest+5u,this->vertexBufferWire.get(source+4u));
                        buffer.set(dest+6u,this->vertexBufferWire.get(source+5u));

                        buffer.set(dest+7u,this->vertexBufferWire.get(source+6u));
                        buffer.set(dest+8u,this->vertexBufferWire.get(source+7u));
                        buffer.set(dest+9u,this->vertexBufferWire.get(source+8u));

                        buffer.set(dest+10u,this->vertexBufferWire.get(source+9u));
                        buffer.set(dest+11u,this->vertexBufferWire.get(source+10u));

                        source+=vboSizeofMesh3D[this->vboWireType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                default:
                    break;
                }
            }
                break;
            case edk::GU::vbo_XYZ:
            {
                switch(type){
                case edk::GU::vbo_XY:
                {
                    //edk::GU::vbo_XYZ -> edk::GU::vbo_XY
                    for(edk::uint32 i=0u;i<this->vboWireCount;i++){
                        buffer.set(dest,this->vertexBufferWire.get(source));
                        buffer.set(dest+1u,this->vertexBufferWire.get(source+1u));

                        source+=vboSizeofMesh3D[this->vboWireType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_NxNyNz:
                {
                    //edk::GU::vbo_XYZ -> edk::GU::vbo_XY_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboWireCount;i++){
                        buffer.set(dest,this->vertexBufferWire.get(source));
                        buffer.set(dest+1u,this->vertexBufferWire.get(source+1u));

                        source+=vboSizeofMesh3D[this->vboWireType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGB:
                {
                    //edk::GU::vbo_XYZ -> edk::GU::vbo_XY_RGB
                    for(edk::uint32 i=0u;i<this->vboWireCount;i++){
                        buffer.set(dest,this->vertexBufferWire.get(source));
                        buffer.set(dest+1u,this->vertexBufferWire.get(source+1u));

                        source+=vboSizeofMesh3D[this->vboWireType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGBA:
                {
                    //edk::GU::vbo_XYZ -> edk::GU::vbo_XY_RGBA
                    for(edk::uint32 i=0u;i<this->vboWireCount;i++){
                        buffer.set(dest,this->vertexBufferWire.get(source));
                        buffer.set(dest+1u,this->vertexBufferWire.get(source+1u));

                        source+=vboSizeofMesh3D[this->vboWireType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGB_NxNyNz:
                {
                    //edk::GU::vbo_XYZ -> edk::GU::vbo_XY_RGB_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboWireCount;i++){
                        buffer.set(dest,this->vertexBufferWire.get(source));
                        buffer.set(dest+1u,this->vertexBufferWire.get(source+1u));

                        source+=vboSizeofMesh3D[this->vboWireType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGBA_NxNyNz:
                {
                    //edk::GU::vbo_XYZ -> edk::GU::vbo_XY_RGBA_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboWireCount;i++){
                        buffer.set(dest,this->vertexBufferWire.get(source));
                        buffer.set(dest+1u,this->vertexBufferWire.get(source+1u));


                        source+=vboSizeofMesh3D[this->vboWireType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGB_NxNyNz_UVxUVy:
                {
                    //edk::GU::vbo_XYZ -> edk::GU::vbo_XY_RGB_NxNyNz_UVxUVy
                    for(edk::uint32 i=0u;i<this->vboWireCount;i++){
                        buffer.set(dest,this->vertexBufferWire.get(source));
                        buffer.set(dest+1u,this->vertexBufferWire.get(source+1u));

                        source+=vboSizeofMesh3D[this->vboWireType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy:
                {
                    //edk::GU::vbo_XYZ -> edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy
                    for(edk::uint32 i=0u;i<this->vboWireCount;i++){
                        buffer.set(dest,this->vertexBufferWire.get(source));
                        buffer.set(dest+1u,this->vertexBufferWire.get(source+1u));

                        source+=vboSizeofMesh3D[this->vboWireType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_NxNyNz:
                {
                    //edk::GU::vbo_XYZ -> edk::GU::vbo_XYZ_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboWireCount;i++){
                        buffer.set(dest,this->vertexBufferWire.get(source));
                        buffer.set(dest+1u,this->vertexBufferWire.get(source+1u));
                        buffer.set(dest+2u,this->vertexBufferWire.get(source+2u));

                        source+=vboSizeofMesh3D[this->vboWireType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGB:
                {
                    //edk::GU::vbo_XYZ -> edk::GU::vbo_XYZ_RGB
                    for(edk::uint32 i=0u;i<this->vboWireCount;i++){
                        buffer.set(dest,this->vertexBufferWire.get(source));
                        buffer.set(dest+1u,this->vertexBufferWire.get(source+1u));
                        buffer.set(dest+2u,this->vertexBufferWire.get(source+2u));

                        source+=vboSizeofMesh3D[this->vboWireType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGBA:
                {
                    //edk::GU::vbo_XYZ -> edk::GU::vbo_XYZ_RGBA
                    for(edk::uint32 i=0u;i<this->vboWireCount;i++){
                        buffer.set(dest,this->vertexBufferWire.get(source));
                        buffer.set(dest+1u,this->vertexBufferWire.get(source+1u));
                        buffer.set(dest+2u,this->vertexBufferWire.get(source+2u));

                        source+=vboSizeofMesh3D[this->vboWireType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGB_NxNyNz:
                {
                    //edk::GU::vbo_XYZ -> edk::GU::vbo_XYZ_RGB_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboWireCount;i++){
                        buffer.set(dest,this->vertexBufferWire.get(source));
                        buffer.set(dest+1u,this->vertexBufferWire.get(source+1u));
                        buffer.set(dest+2u,this->vertexBufferWire.get(source+2u));

                        source+=vboSizeofMesh3D[this->vboWireType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGBA_NxNyNz:
                {
                    //edk::GU::vbo_XYZ -> edk::GU::vbo_XYZ_RGBA_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboWireCount;i++){
                        buffer.set(dest,this->vertexBufferWire.get(source));
                        buffer.set(dest+1u,this->vertexBufferWire.get(source+1u));
                        buffer.set(dest+2u,this->vertexBufferWire.get(source+2u));

                        source+=vboSizeofMesh3D[this->vboWireType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGB_NxNyNz_UVxUVy:
                {
                    //edk::GU::vbo_XYZ -> edk::GU::vbo_XYZ_RGB_NxNyNz_UVxUVy
                    for(edk::uint32 i=0u;i<this->vboWireCount;i++){
                        buffer.set(dest,this->vertexBufferWire.get(source));
                        buffer.set(dest+1u,this->vertexBufferWire.get(source+1u));
                        buffer.set(dest+2u,this->vertexBufferWire.get(source+2u));

                        source+=vboSizeofMesh3D[this->vboWireType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy:
                {
                    //edk::GU::vbo_XYZ -> edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy
                    for(edk::uint32 i=0u;i<this->vboWireCount;i++){
                        buffer.set(dest,this->vertexBufferWire.get(source));
                        buffer.set(dest+1u,this->vertexBufferWire.get(source+1u));
                        buffer.set(dest+2u,this->vertexBufferWire.get(source+2u));

                        source+=vboSizeofMesh3D[this->vboWireType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                default:
                    break;
                }
            }
                break;
            case edk::GU::vbo_XYZ_NxNyNz:
            {
                switch(type){
                case edk::GU::vbo_XY:
                {
                    //edk::GU::vbo_XYZ_NxNyNz -> edk::GU::vbo_XY
                    for(edk::uint32 i=0u;i<this->vboWireCount;i++){
                        buffer.set(dest,this->vertexBufferWire.get(source));
                        buffer.set(dest+1u,this->vertexBufferWire.get(source+1u));

                        source+=vboSizeofMesh3D[this->vboWireType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_NxNyNz:
                {
                    //edk::GU::vbo_XYZ_NxNyNz -> edk::GU::vbo_XY_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboWireCount;i++){
                        buffer.set(dest,this->vertexBufferWire.get(source));
                        buffer.set(dest+1u,this->vertexBufferWire.get(source+1u));

                        buffer.set(dest+2u,this->vertexBufferWire.get(source+3u));
                        buffer.set(dest+3u,this->vertexBufferWire.get(source+4u));
                        buffer.set(dest+4u,this->vertexBufferWire.get(source+5u));

                        source+=vboSizeofMesh3D[this->vboWireType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGB:
                {
                    //edk::GU::vbo_XYZ_NxNyNz -> edk::GU::vbo_XY_RGB
                    for(edk::uint32 i=0u;i<this->vboWireCount;i++){
                        buffer.set(dest,this->vertexBufferWire.get(source));
                        buffer.set(dest+1u,this->vertexBufferWire.get(source+1u));

                        source+=vboSizeofMesh3D[this->vboWireType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGBA:
                {
                    //edk::GU::vbo_XYZ_NxNyNz -> edk::GU::vbo_XY_RGBA
                    for(edk::uint32 i=0u;i<this->vboWireCount;i++){
                        buffer.set(dest,this->vertexBufferWire.get(source));
                        buffer.set(dest+1u,this->vertexBufferWire.get(source+1u));

                        source+=vboSizeofMesh3D[this->vboWireType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGB_NxNyNz:
                {
                    //edk::GU::vbo_XYZ_NxNyNz -> edk::GU::vbo_XY_RGB_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboWireCount;i++){
                        buffer.set(dest,this->vertexBufferWire.get(source));
                        buffer.set(dest+1u,this->vertexBufferWire.get(source+1u));

                        buffer.set(dest+5u,this->vertexBufferWire.get(source+3u));
                        buffer.set(dest+6u,this->vertexBufferWire.get(source+4u));
                        buffer.set(dest+7u,this->vertexBufferWire.get(source+5u));

                        source+=vboSizeofMesh3D[this->vboWireType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGBA_NxNyNz:
                {
                    //edk::GU::vbo_XYZ_NxNyNz -> edk::GU::vbo_XY_RGBA_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboWireCount;i++){
                        buffer.set(dest,this->vertexBufferWire.get(source));
                        buffer.set(dest+1u,this->vertexBufferWire.get(source+1u));

                        buffer.set(dest+6u,this->vertexBufferWire.get(source+3u));
                        buffer.set(dest+7u,this->vertexBufferWire.get(source+4u));
                        buffer.set(dest+8u,this->vertexBufferWire.get(source+5u));

                        source+=vboSizeofMesh3D[this->vboWireType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGB_NxNyNz_UVxUVy:
                {
                    //edk::GU::vbo_XYZ_NxNyNz -> edk::GU::vbo_XY_RGB_NxNyNz_UVxUVy
                    for(edk::uint32 i=0u;i<this->vboWireCount;i++){
                        buffer.set(dest,this->vertexBufferWire.get(source));
                        buffer.set(dest+1u,this->vertexBufferWire.get(source+1u));

                        buffer.set(dest+5u,this->vertexBufferWire.get(source+3u));
                        buffer.set(dest+6u,this->vertexBufferWire.get(source+4u));
                        buffer.set(dest+7u,this->vertexBufferWire.get(source+5u));

                        source+=vboSizeofMesh3D[this->vboWireType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy:
                {
                    //edk::GU::vbo_XYZ_NxNyNz -> edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy
                    for(edk::uint32 i=0u;i<this->vboWireCount;i++){
                        buffer.set(dest,this->vertexBufferWire.get(source));
                        buffer.set(dest+1u,this->vertexBufferWire.get(source+1u));

                        buffer.set(dest+6u,this->vertexBufferWire.get(source+3u));
                        buffer.set(dest+7u,this->vertexBufferWire.get(source+4u));
                        buffer.set(dest+8u,this->vertexBufferWire.get(source+5u));

                        source+=vboSizeofMesh3D[this->vboWireType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ:
                {
                    //edk::GU::vbo_XYZ_NxNyNz -> edk::GU::vbo_XYZ
                    for(edk::uint32 i=0u;i<this->vboWireCount;i++){
                        buffer.set(dest,this->vertexBufferWire.get(source));
                        buffer.set(dest+1u,this->vertexBufferWire.get(source+1u));
                        buffer.set(dest+2u,this->vertexBufferWire.get(source+2u));

                        source+=vboSizeofMesh3D[this->vboWireType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGB:
                {
                    //edk::GU::vbo_XYZ_NxNyNz -> edk::GU::vbo_XYZ_RGB
                    for(edk::uint32 i=0u;i<this->vboWireCount;i++){
                        buffer.set(dest,this->vertexBufferWire.get(source));
                        buffer.set(dest+1u,this->vertexBufferWire.get(source+1u));
                        buffer.set(dest+2u,this->vertexBufferWire.get(source+2u));

                        source+=vboSizeofMesh3D[this->vboWireType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGBA:
                {
                    //edk::GU::vbo_XYZ_NxNyNz -> edk::GU::vbo_XYZ_RGBA
                    for(edk::uint32 i=0u;i<this->vboWireCount;i++){
                        buffer.set(dest,this->vertexBufferWire.get(source));
                        buffer.set(dest+1u,this->vertexBufferWire.get(source+1u));
                        buffer.set(dest+2u,this->vertexBufferWire.get(source+2u));

                        source+=vboSizeofMesh3D[this->vboWireType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGB_NxNyNz:
                {
                    //edk::GU::vbo_XYZ_NxNyNz -> edk::GU::vbo_XYZ_RGB_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboWireCount;i++){
                        buffer.set(dest,this->vertexBufferWire.get(source));
                        buffer.set(dest+1u,this->vertexBufferWire.get(source+1u));
                        buffer.set(dest+2u,this->vertexBufferWire.get(source+2u));

                        buffer.set(dest+6u,this->vertexBufferWire.get(source+3u));
                        buffer.set(dest+7u,this->vertexBufferWire.get(source+4u));
                        buffer.set(dest+8u,this->vertexBufferWire.get(source+5u));

                        source+=vboSizeofMesh3D[this->vboWireType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGBA_NxNyNz:
                {
                    //edk::GU::vbo_XYZ_NxNyNz -> edk::GU::vbo_XYZ_RGBA_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboWireCount;i++){
                        buffer.set(dest,this->vertexBufferWire.get(source));
                        buffer.set(dest+1u,this->vertexBufferWire.get(source+1u));
                        buffer.set(dest+2u,this->vertexBufferWire.get(source+2u));

                        buffer.set(dest+7u,this->vertexBufferWire.get(source+3u));
                        buffer.set(dest+8u,this->vertexBufferWire.get(source+4u));
                        buffer.set(dest+9u,this->vertexBufferWire.get(source+5u));

                        source+=vboSizeofMesh3D[this->vboWireType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGB_NxNyNz_UVxUVy:
                {
                    //edk::GU::vbo_XYZ_NxNyNz -> edk::GU::vbo_XYZ_RGB_NxNyNz_UVxUVy
                    for(edk::uint32 i=0u;i<this->vboWireCount;i++){
                        buffer.set(dest,this->vertexBufferWire.get(source));
                        buffer.set(dest+1u,this->vertexBufferWire.get(source+1u));
                        buffer.set(dest+2u,this->vertexBufferWire.get(source+2u));

                        buffer.set(dest+6u,this->vertexBufferWire.get(source+3u));
                        buffer.set(dest+7u,this->vertexBufferWire.get(source+4u));
                        buffer.set(dest+8u,this->vertexBufferWire.get(source+5u));

                        source+=vboSizeofMesh3D[this->vboWireType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy:
                {
                    //edk::GU::vbo_XYZ_NxNyNz -> edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy
                    for(edk::uint32 i=0u;i<this->vboWireCount;i++){
                        buffer.set(dest,this->vertexBufferWire.get(source));
                        buffer.set(dest+1u,this->vertexBufferWire.get(source+1u));
                        buffer.set(dest+2u,this->vertexBufferWire.get(source+2u));

                        buffer.set(dest+7u,this->vertexBufferWire.get(source+3u));
                        buffer.set(dest+8u,this->vertexBufferWire.get(source+4u));
                        buffer.set(dest+9u,this->vertexBufferWire.get(source+5u));

                        source+=vboSizeofMesh3D[this->vboWireType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                default:
                    break;
                }
            }
                break;
            case edk::GU::vbo_XYZ_RGB:
            {
                switch(type){
                case edk::GU::vbo_XY:
                {
                    //edk::GU::vbo_XYZ_RGB -> edk::GU::vbo_XY
                    for(edk::uint32 i=0u;i<this->vboWireCount;i++){
                        buffer.set(dest,this->vertexBufferWire.get(source));
                        buffer.set(dest+1u,this->vertexBufferWire.get(source+1u));

                        source+=vboSizeofMesh3D[this->vboWireType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_NxNyNz:
                {
                    //edk::GU::vbo_XYZ_RGB -> edk::GU::vbo_XY_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboWireCount;i++){
                        buffer.set(dest,this->vertexBufferWire.get(source));
                        buffer.set(dest+1u,this->vertexBufferWire.get(source+1u));

                        source+=vboSizeofMesh3D[this->vboWireType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGB:
                {
                    //edk::GU::vbo_XYZ_RGB -> edk::GU::vbo_XY_RGB
                    for(edk::uint32 i=0u;i<this->vboWireCount;i++){
                        buffer.set(dest,this->vertexBufferWire.get(source));
                        buffer.set(dest+1u,this->vertexBufferWire.get(source+1u));

                        buffer.set(dest+2u,this->vertexBufferWire.get(source+3u));
                        buffer.set(dest+3u,this->vertexBufferWire.get(source+4u));
                        buffer.set(dest+4u,this->vertexBufferWire.get(source+5u));

                        source+=vboSizeofMesh3D[this->vboWireType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGBA:
                {
                    //edk::GU::vbo_XYZ_RGB -> edk::GU::vbo_XY_RGBA
                    for(edk::uint32 i=0u;i<this->vboWireCount;i++){
                        buffer.set(dest,this->vertexBufferWire.get(source));
                        buffer.set(dest+1u,this->vertexBufferWire.get(source+1u));

                        buffer.set(dest+2u,this->vertexBufferWire.get(source+3u));
                        buffer.set(dest+3u,this->vertexBufferWire.get(source+4u));
                        buffer.set(dest+4u,this->vertexBufferWire.get(source+5u));

                        source+=vboSizeofMesh3D[this->vboWireType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGB_NxNyNz:
                {
                    //edk::GU::vbo_XYZ_RGB -> edk::GU::vbo_XY_RGB_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboWireCount;i++){
                        buffer.set(dest,this->vertexBufferWire.get(source));
                        buffer.set(dest+1u,this->vertexBufferWire.get(source+1u));

                        buffer.set(dest+2u,this->vertexBufferWire.get(source+3u));
                        buffer.set(dest+3u,this->vertexBufferWire.get(source+4u));
                        buffer.set(dest+4u,this->vertexBufferWire.get(source+5u));

                        source+=vboSizeofMesh3D[this->vboWireType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGBA_NxNyNz:
                {
                    //edk::GU::vbo_XYZ_RGB -> edk::GU::vbo_XY_RGBA_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboWireCount;i++){
                        buffer.set(dest,this->vertexBufferWire.get(source));
                        buffer.set(dest+1u,this->vertexBufferWire.get(source+1u));

                        buffer.set(dest+2u,this->vertexBufferWire.get(source+3u));
                        buffer.set(dest+3u,this->vertexBufferWire.get(source+4u));
                        buffer.set(dest+4u,this->vertexBufferWire.get(source+5u));

                        source+=vboSizeofMesh3D[this->vboWireType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGB_NxNyNz_UVxUVy:
                {
                    //edk::GU::vbo_XYZ_RGB -> edk::GU::vbo_XY_RGB_NxNyNz_UVxUVy
                    for(edk::uint32 i=0u;i<this->vboWireCount;i++){
                        buffer.set(dest,this->vertexBufferWire.get(source));
                        buffer.set(dest+1u,this->vertexBufferWire.get(source+1u));

                        buffer.set(dest+2u,this->vertexBufferWire.get(source+3u));
                        buffer.set(dest+3u,this->vertexBufferWire.get(source+4u));
                        buffer.set(dest+4u,this->vertexBufferWire.get(source+5u));

                        source+=vboSizeofMesh3D[this->vboWireType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy:
                {
                    //edk::GU::vbo_XYZ_RGB -> edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy
                    for(edk::uint32 i=0u;i<this->vboWireCount;i++){
                        buffer.set(dest,this->vertexBufferWire.get(source));
                        buffer.set(dest+1u,this->vertexBufferWire.get(source+1u));

                        buffer.set(dest+2u,this->vertexBufferWire.get(source+3u));
                        buffer.set(dest+3u,this->vertexBufferWire.get(source+4u));
                        buffer.set(dest+4u,this->vertexBufferWire.get(source+5u));

                        source+=vboSizeofMesh3D[this->vboWireType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ:
                {
                    //edk::GU::vbo_XYZ_RGB -> edk::GU::vbo_XYZ
                    for(edk::uint32 i=0u;i<this->vboWireCount;i++){
                        buffer.set(dest,this->vertexBufferWire.get(source));
                        buffer.set(dest+1u,this->vertexBufferWire.get(source+1u));
                        buffer.set(dest+2u,this->vertexBufferWire.get(source+2u));

                        source+=vboSizeofMesh3D[this->vboWireType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_NxNyNz:
                {
                    //edk::GU::vbo_XYZ_RGB -> edk::GU::vbo_XYZ_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboWireCount;i++){
                        buffer.set(dest,this->vertexBufferWire.get(source));
                        buffer.set(dest+1u,this->vertexBufferWire.get(source+1u));
                        buffer.set(dest+2u,this->vertexBufferWire.get(source+2u));

                        source+=vboSizeofMesh3D[this->vboWireType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGBA:
                {
                    //edk::GU::vbo_XYZ_RGB -> edk::GU::vbo_XYZ_RGBA
                    for(edk::uint32 i=0u;i<this->vboWireCount;i++){
                        buffer.set(dest,this->vertexBufferWire.get(source));
                        buffer.set(dest+1u,this->vertexBufferWire.get(source+1u));
                        buffer.set(dest+2u,this->vertexBufferWire.get(source+2u));

                        buffer.set(dest+3u,this->vertexBufferWire.get(source+3u));
                        buffer.set(dest+4u,this->vertexBufferWire.get(source+4u));
                        buffer.set(dest+5u,this->vertexBufferWire.get(source+5u));

                        source+=vboSizeofMesh3D[this->vboWireType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGB_NxNyNz:
                {
                    //edk::GU::vbo_XYZ_RGB -> edk::GU::vbo_XYZ_RGB_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboWireCount;i++){
                        buffer.set(dest,this->vertexBufferWire.get(source));
                        buffer.set(dest+1u,this->vertexBufferWire.get(source+1u));
                        buffer.set(dest+2u,this->vertexBufferWire.get(source+2u));

                        buffer.set(dest+3u,this->vertexBufferWire.get(source+3u));
                        buffer.set(dest+4u,this->vertexBufferWire.get(source+4u));
                        buffer.set(dest+5u,this->vertexBufferWire.get(source+5u));

                        source+=vboSizeofMesh3D[this->vboWireType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGBA_NxNyNz:
                {
                    //edk::GU::vbo_XYZ_RGB -> edk::GU::vbo_XYZ_RGBA_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboWireCount;i++){
                        buffer.set(dest,this->vertexBufferWire.get(source));
                        buffer.set(dest+1u,this->vertexBufferWire.get(source+1u));
                        buffer.set(dest+2u,this->vertexBufferWire.get(source+2u));

                        buffer.set(dest+3u,this->vertexBufferWire.get(source+3u));
                        buffer.set(dest+4u,this->vertexBufferWire.get(source+4u));
                        buffer.set(dest+5u,this->vertexBufferWire.get(source+5u));


                        source+=vboSizeofMesh3D[this->vboWireType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGB_NxNyNz_UVxUVy:
                {
                    //edk::GU::vbo_XYZ_RGB -> edk::GU::vbo_XYZ_RGB_NxNyNz_UVxUVy
                    for(edk::uint32 i=0u;i<this->vboWireCount;i++){
                        buffer.set(dest,this->vertexBufferWire.get(source));
                        buffer.set(dest+1u,this->vertexBufferWire.get(source+1u));
                        buffer.set(dest+2u,this->vertexBufferWire.get(source+2u));

                        buffer.set(dest+3u,this->vertexBufferWire.get(source+3u));
                        buffer.set(dest+4u,this->vertexBufferWire.get(source+4u));
                        buffer.set(dest+5u,this->vertexBufferWire.get(source+5u));

                        source+=vboSizeofMesh3D[this->vboWireType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy:
                {
                    //edk::GU::vbo_XYZ_RGB -> edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy
                    for(edk::uint32 i=0u;i<this->vboWireCount;i++){
                        buffer.set(dest,this->vertexBufferWire.get(source));
                        buffer.set(dest+1u,this->vertexBufferWire.get(source+1u));
                        buffer.set(dest+2u,this->vertexBufferWire.get(source+2u));

                        buffer.set(dest+3u,this->vertexBufferWire.get(source+3u));
                        buffer.set(dest+4u,this->vertexBufferWire.get(source+4u));
                        buffer.set(dest+5u,this->vertexBufferWire.get(source+5u));

                        source+=vboSizeofMesh3D[this->vboWireType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                default:
                    break;
                }
            }
                break;
            case edk::GU::vbo_XYZ_RGBA:
            {
                switch(type){
                case edk::GU::vbo_XY:
                {
                    //edk::GU::vbo_XYZ_RGBA -> edk::GU::vbo_XY
                    for(edk::uint32 i=0u;i<this->vboWireCount;i++){
                        buffer.set(dest,this->vertexBufferWire.get(source));
                        buffer.set(dest+1u,this->vertexBufferWire.get(source+1u));

                        source+=vboSizeofMesh3D[this->vboWireType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_NxNyNz:
                {
                    //edk::GU::vbo_XYZ_RGBA -> edk::GU::vbo_XY_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboWireCount;i++){
                        buffer.set(dest,this->vertexBufferWire.get(source));
                        buffer.set(dest+1u,this->vertexBufferWire.get(source+1u));

                        source+=vboSizeofMesh3D[this->vboWireType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGB:
                {
                    //edk::GU::vbo_XYZ_RGBA -> edk::GU::vbo_XY_RGB
                    for(edk::uint32 i=0u;i<this->vboWireCount;i++){
                        buffer.set(dest,this->vertexBufferWire.get(source));
                        buffer.set(dest+1u,this->vertexBufferWire.get(source+1u));

                        buffer.set(dest+2u,this->vertexBufferWire.get(source+3u));
                        buffer.set(dest+3u,this->vertexBufferWire.get(source+4u));
                        buffer.set(dest+4u,this->vertexBufferWire.get(source+5u));

                        source+=vboSizeofMesh3D[this->vboWireType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGBA:
                {
                    //edk::GU::vbo_XYZ_RGBA -> edk::GU::vbo_XY_RGBA
                    for(edk::uint32 i=0u;i<this->vboWireCount;i++){
                        buffer.set(dest,this->vertexBufferWire.get(source));
                        buffer.set(dest+1u,this->vertexBufferWire.get(source+1u));

                        buffer.set(dest+2u,this->vertexBufferWire.get(source+3u));
                        buffer.set(dest+3u,this->vertexBufferWire.get(source+4u));
                        buffer.set(dest+4u,this->vertexBufferWire.get(source+5u));
                        buffer.set(dest+5u,this->vertexBufferWire.get(source+6u));

                        source+=vboSizeofMesh3D[this->vboWireType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGB_NxNyNz:
                {
                    //edk::GU::vbo_XYZ_RGBA -> edk::GU::vbo_XY_RGB_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboWireCount;i++){
                        buffer.set(dest,this->vertexBufferWire.get(source));
                        buffer.set(dest+1u,this->vertexBufferWire.get(source+1u));

                        buffer.set(dest+2u,this->vertexBufferWire.get(source+3u));
                        buffer.set(dest+3u,this->vertexBufferWire.get(source+4u));
                        buffer.set(dest+4u,this->vertexBufferWire.get(source+5u));

                        source+=vboSizeofMesh3D[this->vboWireType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGBA_NxNyNz:
                {
                    //edk::GU::vbo_XYZ_RGBA -> edk::GU::vbo_XY_RGBA_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboWireCount;i++){
                        buffer.set(dest,this->vertexBufferWire.get(source));
                        buffer.set(dest+1u,this->vertexBufferWire.get(source+1u));

                        buffer.set(dest+2u,this->vertexBufferWire.get(source+3u));
                        buffer.set(dest+3u,this->vertexBufferWire.get(source+4u));
                        buffer.set(dest+4u,this->vertexBufferWire.get(source+5u));
                        buffer.set(dest+5u,this->vertexBufferWire.get(source+6u));

                        source+=vboSizeofMesh3D[this->vboWireType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGB_NxNyNz_UVxUVy:
                {
                    //edk::GU::vbo_XYZ_RGBA -> edk::GU::vbo_XY_RGB_NxNyNz_UVxUVy
                    for(edk::uint32 i=0u;i<this->vboWireCount;i++){
                        buffer.set(dest,this->vertexBufferWire.get(source));
                        buffer.set(dest+1u,this->vertexBufferWire.get(source+1u));

                        buffer.set(dest+2u,this->vertexBufferWire.get(source+3u));
                        buffer.set(dest+3u,this->vertexBufferWire.get(source+4u));
                        buffer.set(dest+4u,this->vertexBufferWire.get(source+5u));

                        source+=vboSizeofMesh3D[this->vboWireType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy:
                {
                    //edk::GU::vbo_XYZ_RGBA -> edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy
                    for(edk::uint32 i=0u;i<this->vboWireCount;i++){
                        buffer.set(dest,this->vertexBufferWire.get(source));
                        buffer.set(dest+1u,this->vertexBufferWire.get(source+1u));

                        buffer.set(dest+2u,this->vertexBufferWire.get(source+3u));
                        buffer.set(dest+3u,this->vertexBufferWire.get(source+4u));
                        buffer.set(dest+4u,this->vertexBufferWire.get(source+5u));
                        buffer.set(dest+5u,this->vertexBufferWire.get(source+6u));

                        source+=vboSizeofMesh3D[this->vboWireType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ:
                {
                    //edk::GU::vbo_XYZ_RGBA -> edk::GU::vbo_XYZ
                    for(edk::uint32 i=0u;i<this->vboWireCount;i++){
                        buffer.set(dest,this->vertexBufferWire.get(source));
                        buffer.set(dest+1u,this->vertexBufferWire.get(source+1u));
                        buffer.set(dest+2u,this->vertexBufferWire.get(source+2u));

                        source+=vboSizeofMesh3D[this->vboWireType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_NxNyNz:
                {
                    //edk::GU::vbo_XYZ_RGBA -> edk::GU::vbo_XYZ_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboWireCount;i++){
                        buffer.set(dest,this->vertexBufferWire.get(source));
                        buffer.set(dest+1u,this->vertexBufferWire.get(source+1u));
                        buffer.set(dest+2u,this->vertexBufferWire.get(source+2u));

                        source+=vboSizeofMesh3D[this->vboWireType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGB:
                {
                    //edk::GU::vbo_XYZ_RGBA -> edk::GU::vbo_XYZ_RGB
                    for(edk::uint32 i=0u;i<this->vboWireCount;i++){
                        buffer.set(dest,this->vertexBufferWire.get(source));
                        buffer.set(dest+1u,this->vertexBufferWire.get(source+1u));
                        buffer.set(dest+2u,this->vertexBufferWire.get(source+2u));

                        buffer.set(dest+3u,this->vertexBufferWire.get(source+3u));
                        buffer.set(dest+4u,this->vertexBufferWire.get(source+4u));
                        buffer.set(dest+5u,this->vertexBufferWire.get(source+5u));

                        source+=vboSizeofMesh3D[this->vboWireType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGB_NxNyNz:
                {
                    //edk::GU::vbo_XYZ_RGBA -> edk::GU::vbo_XYZ_RGB_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboWireCount;i++){
                        buffer.set(dest,this->vertexBufferWire.get(source));
                        buffer.set(dest+1u,this->vertexBufferWire.get(source+1u));
                        buffer.set(dest+2u,this->vertexBufferWire.get(source+2u));

                        buffer.set(dest+3u,this->vertexBufferWire.get(source+3u));
                        buffer.set(dest+4u,this->vertexBufferWire.get(source+4u));
                        buffer.set(dest+5u,this->vertexBufferWire.get(source+5u));

                        source+=vboSizeofMesh3D[this->vboWireType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGBA_NxNyNz:
                {
                    //edk::GU::vbo_XYZ_RGBA -> edk::GU::vbo_XYZ_RGBA_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboWireCount;i++){
                        buffer.set(dest,this->vertexBufferWire.get(source));
                        buffer.set(dest+1u,this->vertexBufferWire.get(source+1u));
                        buffer.set(dest+2u,this->vertexBufferWire.get(source+2u));

                        buffer.set(dest+3u,this->vertexBufferWire.get(source+3u));
                        buffer.set(dest+4u,this->vertexBufferWire.get(source+4u));
                        buffer.set(dest+5u,this->vertexBufferWire.get(source+5u));
                        buffer.set(dest+6u,this->vertexBufferWire.get(source+6u));

                        source+=vboSizeofMesh3D[this->vboWireType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGB_NxNyNz_UVxUVy:
                {
                    //edk::GU::vbo_XYZ_RGBA -> edk::GU::vbo_XYZ_RGB_NxNyNz_UVxUVy
                    for(edk::uint32 i=0u;i<this->vboWireCount;i++){
                        buffer.set(dest,this->vertexBufferWire.get(source));
                        buffer.set(dest+1u,this->vertexBufferWire.get(source+1u));
                        buffer.set(dest+2u,this->vertexBufferWire.get(source+2u));

                        buffer.set(dest+3u,this->vertexBufferWire.get(source+3u));
                        buffer.set(dest+4u,this->vertexBufferWire.get(source+4u));
                        buffer.set(dest+5u,this->vertexBufferWire.get(source+5u));

                        source+=vboSizeofMesh3D[this->vboWireType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy:
                {
                    //edk::GU::vbo_XYZ_RGBA -> edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy
                    for(edk::uint32 i=0u;i<this->vboWireCount;i++){
                        buffer.set(dest,this->vertexBufferWire.get(source));
                        buffer.set(dest+1u,this->vertexBufferWire.get(source+1u));
                        buffer.set(dest+2u,this->vertexBufferWire.get(source+2u));

                        buffer.set(dest+3u,this->vertexBufferWire.get(source+3u));
                        buffer.set(dest+4u,this->vertexBufferWire.get(source+4u));
                        buffer.set(dest+5u,this->vertexBufferWire.get(source+5u));
                        buffer.set(dest+6u,this->vertexBufferWire.get(source+6u));

                        source+=vboSizeofMesh3D[this->vboWireType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                default:
                    break;
                }
            }
                break;
            case edk::GU::vbo_XYZ_RGB_NxNyNz:
            {
                switch(type){
                case edk::GU::vbo_XY:
                {
                    //edk::GU::vbo_XYZ_RGB_NxNyNz -> edk::GU::vbo_XY
                    for(edk::uint32 i=0u;i<this->vboWireCount;i++){
                        buffer.set(dest,this->vertexBufferWire.get(source));
                        buffer.set(dest+1u,this->vertexBufferWire.get(source+1u));

                        source+=vboSizeofMesh3D[this->vboWireType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_NxNyNz:
                {
                    //edk::GU::vbo_XYZ_RGB_NxNyNz -> edk::GU::vbo_XY_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboWireCount;i++){
                        buffer.set(dest,this->vertexBufferWire.get(source));
                        buffer.set(dest+1u,this->vertexBufferWire.get(source+1u));

                        buffer.set(dest+2u,this->vertexBufferWire.get(source+6u));
                        buffer.set(dest+3u,this->vertexBufferWire.get(source+7u));
                        buffer.set(dest+4u,this->vertexBufferWire.get(source+8u));

                        source+=vboSizeofMesh3D[this->vboWireType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGB:
                {
                    //edk::GU::vbo_XYZ_RGB_NxNyNz -> edk::GU::vbo_XY_RGB
                    for(edk::uint32 i=0u;i<this->vboWireCount;i++){
                        buffer.set(dest,this->vertexBufferWire.get(source));
                        buffer.set(dest+1u,this->vertexBufferWire.get(source+1u));

                        buffer.set(dest+2u,this->vertexBufferWire.get(source+3u));
                        buffer.set(dest+3u,this->vertexBufferWire.get(source+4u));
                        buffer.set(dest+4u,this->vertexBufferWire.get(source+5u));

                        source+=vboSizeofMesh3D[this->vboWireType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGBA:
                {
                    //edk::GU::vbo_XYZ_RGB_NxNyNz -> edk::GU::vbo_XY_RGBA
                    for(edk::uint32 i=0u;i<this->vboWireCount;i++){
                        buffer.set(dest,this->vertexBufferWire.get(source));
                        buffer.set(dest+1u,this->vertexBufferWire.get(source+1u));

                        buffer.set(dest+2u,this->vertexBufferWire.get(source+3u));
                        buffer.set(dest+3u,this->vertexBufferWire.get(source+4u));
                        buffer.set(dest+4u,this->vertexBufferWire.get(source+5u));

                        source+=vboSizeofMesh3D[this->vboWireType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGB_NxNyNz:
                {
                    //edk::GU::vbo_XYZ_RGB_NxNyNz -> edk::GU::vbo_XY_RGB_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboWireCount;i++){
                        buffer.set(dest,this->vertexBufferWire.get(source));
                        buffer.set(dest+1u,this->vertexBufferWire.get(source+1u));

                        buffer.set(dest+2u,this->vertexBufferWire.get(source+3u));
                        buffer.set(dest+3u,this->vertexBufferWire.get(source+4u));
                        buffer.set(dest+4u,this->vertexBufferWire.get(source+5u));

                        buffer.set(dest+5u,this->vertexBufferWire.get(source+6u));
                        buffer.set(dest+6u,this->vertexBufferWire.get(source+7u));
                        buffer.set(dest+7u,this->vertexBufferWire.get(source+8u));

                        source+=vboSizeofMesh3D[this->vboWireType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGBA_NxNyNz:
                {
                    //edk::GU::vbo_XYZ_RGB_NxNyNz -> edk::GU::vbo_XY_RGBA_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboWireCount;i++){
                        buffer.set(dest,this->vertexBufferWire.get(source));
                        buffer.set(dest+1u,this->vertexBufferWire.get(source+1u));

                        buffer.set(dest+2u,this->vertexBufferWire.get(source+3u));
                        buffer.set(dest+3u,this->vertexBufferWire.get(source+4u));
                        buffer.set(dest+4u,this->vertexBufferWire.get(source+5u));

                        buffer.set(dest+6u,this->vertexBufferWire.get(source+6u));
                        buffer.set(dest+7u,this->vertexBufferWire.get(source+7u));
                        buffer.set(dest+8u,this->vertexBufferWire.get(source+8u));

                        source+=vboSizeofMesh3D[this->vboWireType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGB_NxNyNz_UVxUVy:
                {
                    //edk::GU::vbo_XYZ_RGB_NxNyNz -> edk::GU::vbo_XY_RGB_NxNyNz_UVxUVy
                    for(edk::uint32 i=0u;i<this->vboWireCount;i++){
                        buffer.set(dest,this->vertexBufferWire.get(source));
                        buffer.set(dest+1u,this->vertexBufferWire.get(source+1u));

                        buffer.set(dest+2u,this->vertexBufferWire.get(source+3u));
                        buffer.set(dest+3u,this->vertexBufferWire.get(source+4u));
                        buffer.set(dest+4u,this->vertexBufferWire.get(source+5u));

                        buffer.set(dest+5u,this->vertexBufferWire.get(source+6u));
                        buffer.set(dest+6u,this->vertexBufferWire.get(source+7u));
                        buffer.set(dest+7u,this->vertexBufferWire.get(source+8u));

                        source+=vboSizeofMesh3D[this->vboWireType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy:
                {
                    //edk::GU::vbo_XYZ_RGB_NxNyNz -> edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy
                    for(edk::uint32 i=0u;i<this->vboWireCount;i++){
                        buffer.set(dest,this->vertexBufferWire.get(source));
                        buffer.set(dest+1u,this->vertexBufferWire.get(source+1u));

                        buffer.set(dest+2u,this->vertexBufferWire.get(source+3u));
                        buffer.set(dest+3u,this->vertexBufferWire.get(source+4u));
                        buffer.set(dest+4u,this->vertexBufferWire.get(source+5u));

                        buffer.set(dest+6u,this->vertexBufferWire.get(source+6u));
                        buffer.set(dest+7u,this->vertexBufferWire.get(source+7u));
                        buffer.set(dest+8u,this->vertexBufferWire.get(source+8u));

                        source+=vboSizeofMesh3D[this->vboWireType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ:
                {
                    //edk::GU::vbo_XYZ_RGB_NxNyNz -> edk::GU::vbo_XYZ
                    for(edk::uint32 i=0u;i<this->vboWireCount;i++){
                        buffer.set(dest,this->vertexBufferWire.get(source));
                        buffer.set(dest+1u,this->vertexBufferWire.get(source+1u));
                        buffer.set(dest+2u,this->vertexBufferWire.get(source+2u));

                        source+=vboSizeofMesh3D[this->vboWireType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_NxNyNz:
                {
                    //edk::GU::vbo_XYZ_RGB_NxNyNz -> edk::GU::vbo_XYZ_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboWireCount;i++){
                        buffer.set(dest,this->vertexBufferWire.get(source));
                        buffer.set(dest+1u,this->vertexBufferWire.get(source+1u));
                        buffer.set(dest+2u,this->vertexBufferWire.get(source+2u));

                        buffer.set(dest+3u,this->vertexBufferWire.get(source+6u));
                        buffer.set(dest+4u,this->vertexBufferWire.get(source+7u));
                        buffer.set(dest+5u,this->vertexBufferWire.get(source+8u));

                        source+=vboSizeofMesh3D[this->vboWireType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGB:
                {
                    //edk::GU::vbo_XYZ_RGB_NxNyNz -> edk::GU::vbo_XYZ_RGB
                    for(edk::uint32 i=0u;i<this->vboWireCount;i++){
                        buffer.set(dest,this->vertexBufferWire.get(source));
                        buffer.set(dest+1u,this->vertexBufferWire.get(source+1u));
                        buffer.set(dest+2u,this->vertexBufferWire.get(source+2u));

                        buffer.set(dest+3u,this->vertexBufferWire.get(source+3u));
                        buffer.set(dest+4u,this->vertexBufferWire.get(source+4u));
                        buffer.set(dest+5u,this->vertexBufferWire.get(source+5u));

                        source+=vboSizeofMesh3D[this->vboWireType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGBA:
                {
                    //edk::GU::vbo_XYZ_RGB_NxNyNz -> edk::GU::vbo_XYZ_RGBA
                    for(edk::uint32 i=0u;i<this->vboWireCount;i++){
                        buffer.set(dest,this->vertexBufferWire.get(source));
                        buffer.set(dest+1u,this->vertexBufferWire.get(source+1u));
                        buffer.set(dest+2u,this->vertexBufferWire.get(source+2u));

                        buffer.set(dest+3u,this->vertexBufferWire.get(source+3u));
                        buffer.set(dest+4u,this->vertexBufferWire.get(source+4u));
                        buffer.set(dest+5u,this->vertexBufferWire.get(source+5u));

                        source+=vboSizeofMesh3D[this->vboWireType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGBA_NxNyNz:
                {
                    //edk::GU::vbo_XYZ_RGB_NxNyNz -> edk::GU::vbo_XYZ_RGBA_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboWireCount;i++){
                        buffer.set(dest,this->vertexBufferWire.get(source));
                        buffer.set(dest+1u,this->vertexBufferWire.get(source+1u));
                        buffer.set(dest+2u,this->vertexBufferWire.get(source+2u));

                        buffer.set(dest+3u,this->vertexBufferWire.get(source+3u));
                        buffer.set(dest+4u,this->vertexBufferWire.get(source+4u));
                        buffer.set(dest+5u,this->vertexBufferWire.get(source+5u));

                        buffer.set(dest+7u,this->vertexBufferWire.get(source+6u));
                        buffer.set(dest+8u,this->vertexBufferWire.get(source+7u));
                        buffer.set(dest+9u,this->vertexBufferWire.get(source+8u));

                        source+=vboSizeofMesh3D[this->vboWireType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGB_NxNyNz_UVxUVy:
                {
                    //edk::GU::vbo_XYZ_RGB_NxNyNz -> edk::GU::vbo_XYZ_RGB_NxNyNz_UVxUVy
                    for(edk::uint32 i=0u;i<this->vboWireCount;i++){
                        buffer.set(dest,this->vertexBufferWire.get(source));
                        buffer.set(dest+1u,this->vertexBufferWire.get(source+1u));
                        buffer.set(dest+2u,this->vertexBufferWire.get(source+2u));

                        buffer.set(dest+3u,this->vertexBufferWire.get(source+3u));
                        buffer.set(dest+4u,this->vertexBufferWire.get(source+4u));
                        buffer.set(dest+5u,this->vertexBufferWire.get(source+5u));

                        buffer.set(dest+6u,this->vertexBufferWire.get(source+6u));
                        buffer.set(dest+7u,this->vertexBufferWire.get(source+7u));
                        buffer.set(dest+8u,this->vertexBufferWire.get(source+8u));

                        source+=vboSizeofMesh3D[this->vboWireType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy:
                {
                    //edk::GU::vbo_XYZ_RGB_NxNyNz -> edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy
                    for(edk::uint32 i=0u;i<this->vboWireCount;i++){
                        buffer.set(dest,this->vertexBufferWire.get(source));
                        buffer.set(dest+1u,this->vertexBufferWire.get(source+1u));
                        buffer.set(dest+2u,this->vertexBufferWire.get(source+2u));

                        buffer.set(dest+3u,this->vertexBufferWire.get(source+3u));
                        buffer.set(dest+4u,this->vertexBufferWire.get(source+4u));
                        buffer.set(dest+5u,this->vertexBufferWire.get(source+5u));

                        buffer.set(dest+8u,this->vertexBufferWire.get(source+6u));
                        buffer.set(dest+9u,this->vertexBufferWire.get(source+7u));
                        buffer.set(dest+10u,this->vertexBufferWire.get(source+8u));

                        source+=vboSizeofMesh3D[this->vboWireType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                default:
                    break;
                }
            }
                break;
            case edk::GU::vbo_XYZ_RGBA_NxNyNz:
            {
                switch(type){
                case edk::GU::vbo_XY:
                {
                    //edk::GU::vbo_XYZ_RGBA_NxNyNz -> edk::GU::vbo_XY
                    for(edk::uint32 i=0u;i<this->vboWireCount;i++){
                        buffer.set(dest,this->vertexBufferWire.get(source));
                        buffer.set(dest+1u,this->vertexBufferWire.get(source+1u));

                        source+=vboSizeofMesh3D[this->vboWireType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_NxNyNz:
                {
                    //edk::GU::vbo_XYZ_RGBA_NxNyNz -> edk::GU::vbo_XY_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboWireCount;i++){
                        buffer.set(dest,this->vertexBufferWire.get(source));
                        buffer.set(dest+1u,this->vertexBufferWire.get(source+1u));

                        buffer.set(dest+2u,this->vertexBufferWire.get(source+7u));
                        buffer.set(dest+3u,this->vertexBufferWire.get(source+8u));
                        buffer.set(dest+4u,this->vertexBufferWire.get(source+9u));

                        source+=vboSizeofMesh3D[this->vboWireType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGB:
                {
                    //edk::GU::vbo_XYZ_RGBA_NxNyNz -> edk::GU::vbo_XY_RGB
                    for(edk::uint32 i=0u;i<this->vboWireCount;i++){
                        buffer.set(dest,this->vertexBufferWire.get(source));
                        buffer.set(dest+1u,this->vertexBufferWire.get(source+1u));

                        buffer.set(dest+2u,this->vertexBufferWire.get(source+3u));
                        buffer.set(dest+3u,this->vertexBufferWire.get(source+4u));
                        buffer.set(dest+4u,this->vertexBufferWire.get(source+5u));

                        source+=vboSizeofMesh3D[this->vboWireType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGBA:
                {
                    //edk::GU::vbo_XYZ_RGBA_NxNyNz -> edk::GU::vbo_XY_RGBA
                    for(edk::uint32 i=0u;i<this->vboWireCount;i++){
                        buffer.set(dest,this->vertexBufferWire.get(source));
                        buffer.set(dest+1u,this->vertexBufferWire.get(source+1u));

                        buffer.set(dest+2u,this->vertexBufferWire.get(source+3u));
                        buffer.set(dest+3u,this->vertexBufferWire.get(source+4u));
                        buffer.set(dest+4u,this->vertexBufferWire.get(source+5u));
                        buffer.set(dest+5u,this->vertexBufferWire.get(source+6u));

                        source+=vboSizeofMesh3D[this->vboWireType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGB_NxNyNz:
                {
                    //edk::GU::vbo_XYZ_RGBA_NxNyNz -> edk::GU::vbo_XY_RGB_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboWireCount;i++){
                        buffer.set(dest,this->vertexBufferWire.get(source));
                        buffer.set(dest+1u,this->vertexBufferWire.get(source+1u));

                        buffer.set(dest+2u,this->vertexBufferWire.get(source+3u));
                        buffer.set(dest+3u,this->vertexBufferWire.get(source+4u));
                        buffer.set(dest+4u,this->vertexBufferWire.get(source+5u));

                        buffer.set(dest+5u,this->vertexBufferWire.get(source+7u));
                        buffer.set(dest+6u,this->vertexBufferWire.get(source+8u));
                        buffer.set(dest+7u,this->vertexBufferWire.get(source+9u));

                        source+=vboSizeofMesh3D[this->vboWireType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGBA_NxNyNz:
                {
                    //edk::GU::vbo_XYZ_RGBA_NxNyNz -> edk::GU::vbo_XY_RGBA_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboWireCount;i++){
                        buffer.set(dest,this->vertexBufferWire.get(source));
                        buffer.set(dest+1u,this->vertexBufferWire.get(source+1u));

                        buffer.set(dest+2u,this->vertexBufferWire.get(source+3u));
                        buffer.set(dest+3u,this->vertexBufferWire.get(source+4u));
                        buffer.set(dest+4u,this->vertexBufferWire.get(source+5u));
                        buffer.set(dest+5u,this->vertexBufferWire.get(source+6u));

                        buffer.set(dest+6u,this->vertexBufferWire.get(source+7u));
                        buffer.set(dest+7u,this->vertexBufferWire.get(source+8u));
                        buffer.set(dest+8u,this->vertexBufferWire.get(source+9u));

                        source+=vboSizeofMesh3D[this->vboWireType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGB_NxNyNz_UVxUVy:
                {
                    //edk::GU::vbo_XYZ_RGBA_NxNyNz -> edk::GU::vbo_XY_RGB_NxNyNz_UVxUVy
                    for(edk::uint32 i=0u;i<this->vboWireCount;i++){
                        buffer.set(dest,this->vertexBufferWire.get(source));
                        buffer.set(dest+1u,this->vertexBufferWire.get(source+1u));

                        buffer.set(dest+2u,this->vertexBufferWire.get(source+3u));
                        buffer.set(dest+3u,this->vertexBufferWire.get(source+4u));
                        buffer.set(dest+4u,this->vertexBufferWire.get(source+5u));

                        buffer.set(dest+5u,this->vertexBufferWire.get(source+7u));
                        buffer.set(dest+6u,this->vertexBufferWire.get(source+8u));
                        buffer.set(dest+7u,this->vertexBufferWire.get(source+9u));

                        source+=vboSizeofMesh3D[this->vboWireType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy:
                {
                    //edk::GU::vbo_XYZ_RGBA_NxNyNz -> edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy
                    for(edk::uint32 i=0u;i<this->vboWireCount;i++){
                        buffer.set(dest,this->vertexBufferWire.get(source));
                        buffer.set(dest+1u,this->vertexBufferWire.get(source+1u));

                        buffer.set(dest+2u,this->vertexBufferWire.get(source+3u));
                        buffer.set(dest+3u,this->vertexBufferWire.get(source+4u));
                        buffer.set(dest+4u,this->vertexBufferWire.get(source+5u));
                        buffer.set(dest+5u,this->vertexBufferWire.get(source+6u));

                        buffer.set(dest+6u,this->vertexBufferWire.get(source+7u));
                        buffer.set(dest+7u,this->vertexBufferWire.get(source+8u));
                        buffer.set(dest+8u,this->vertexBufferWire.get(source+9u));

                        source+=vboSizeofMesh3D[this->vboWireType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ:
                {
                    //edk::GU::vbo_XYZ_RGBA_NxNyNz -> edk::GU::vbo_XYZ
                    for(edk::uint32 i=0u;i<this->vboWireCount;i++){
                        buffer.set(dest,this->vertexBufferWire.get(source));
                        buffer.set(dest+1u,this->vertexBufferWire.get(source+1u));
                        buffer.set(dest+2u,this->vertexBufferWire.get(source+2u));

                        source+=vboSizeofMesh3D[this->vboWireType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_NxNyNz:
                {
                    //edk::GU::vbo_XYZ_RGBA_NxNyNz -> edk::GU::vbo_XYZ_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboWireCount;i++){
                        buffer.set(dest,this->vertexBufferWire.get(source));
                        buffer.set(dest+1u,this->vertexBufferWire.get(source+1u));
                        buffer.set(dest+2u,this->vertexBufferWire.get(source+2u));

                        buffer.set(dest+3u,this->vertexBufferWire.get(source+7u));
                        buffer.set(dest+4u,this->vertexBufferWire.get(source+8u));
                        buffer.set(dest+5u,this->vertexBufferWire.get(source+9u));

                        source+=vboSizeofMesh3D[this->vboWireType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGB:
                {
                    //edk::GU::vbo_XYZ_RGBA_NxNyNz -> edk::GU::vbo_XYZ_RGB
                    for(edk::uint32 i=0u;i<this->vboWireCount;i++){
                        buffer.set(dest,this->vertexBufferWire.get(source));
                        buffer.set(dest+1u,this->vertexBufferWire.get(source+1u));
                        buffer.set(dest+2u,this->vertexBufferWire.get(source+2u));

                        buffer.set(dest+3u,this->vertexBufferWire.get(source+3u));
                        buffer.set(dest+4u,this->vertexBufferWire.get(source+4u));
                        buffer.set(dest+5u,this->vertexBufferWire.get(source+5u));

                        source+=vboSizeofMesh3D[this->vboWireType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGBA:
                {
                    //edk::GU::vbo_XYZ_RGBA_NxNyNz -> edk::GU::vbo_XYZ_RGBA
                    for(edk::uint32 i=0u;i<this->vboWireCount;i++){
                        buffer.set(dest,this->vertexBufferWire.get(source));
                        buffer.set(dest+1u,this->vertexBufferWire.get(source+1u));
                        buffer.set(dest+2u,this->vertexBufferWire.get(source+2u));

                        buffer.set(dest+3u,this->vertexBufferWire.get(source+3u));
                        buffer.set(dest+4u,this->vertexBufferWire.get(source+4u));
                        buffer.set(dest+5u,this->vertexBufferWire.get(source+5u));
                        buffer.set(dest+6u,this->vertexBufferWire.get(source+6u));

                        source+=vboSizeofMesh3D[this->vboWireType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGB_NxNyNz:
                {
                    //edk::GU::vbo_XYZ_RGBA_NxNyNz -> edk::GU::vbo_XYZ_RGB_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboWireCount;i++){
                        buffer.set(dest,this->vertexBufferWire.get(source));
                        buffer.set(dest+1u,this->vertexBufferWire.get(source+1u));
                        buffer.set(dest+2u,this->vertexBufferWire.get(source+2u));

                        buffer.set(dest+3u,this->vertexBufferWire.get(source+3u));
                        buffer.set(dest+4u,this->vertexBufferWire.get(source+4u));
                        buffer.set(dest+5u,this->vertexBufferWire.get(source+5u));

                        buffer.set(dest+6u,this->vertexBufferWire.get(source+7u));
                        buffer.set(dest+7u,this->vertexBufferWire.get(source+8u));
                        buffer.set(dest+8u,this->vertexBufferWire.get(source+9u));

                        source+=vboSizeofMesh3D[this->vboWireType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGB_NxNyNz_UVxUVy:
                {
                    //edk::GU::vbo_XYZ_RGBA_NxNyNz -> edk::GU::vbo_XYZ_RGB_NxNyNz_UVxUVy
                    for(edk::uint32 i=0u;i<this->vboWireCount;i++){
                        buffer.set(dest,this->vertexBufferWire.get(source));
                        buffer.set(dest+1u,this->vertexBufferWire.get(source+1u));
                        buffer.set(dest+2u,this->vertexBufferWire.get(source+2u));

                        buffer.set(dest+3u,this->vertexBufferWire.get(source+3u));
                        buffer.set(dest+4u,this->vertexBufferWire.get(source+4u));
                        buffer.set(dest+5u,this->vertexBufferWire.get(source+5u));

                        buffer.set(dest+6u,this->vertexBufferWire.get(source+7u));
                        buffer.set(dest+7u,this->vertexBufferWire.get(source+8u));
                        buffer.set(dest+8u,this->vertexBufferWire.get(source+8u));

                        source+=vboSizeofMesh3D[this->vboWireType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy:
                {
                    //edk::GU::vbo_XYZ_RGBA_NxNyNz -> edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy
                    for(edk::uint32 i=0u;i<this->vboWireCount;i++){
                        buffer.set(dest,this->vertexBufferWire.get(source));
                        buffer.set(dest+1u,this->vertexBufferWire.get(source+1u));
                        buffer.set(dest+2u,this->vertexBufferWire.get(source+2u));

                        buffer.set(dest+3u,this->vertexBufferWire.get(source+3u));
                        buffer.set(dest+4u,this->vertexBufferWire.get(source+4u));
                        buffer.set(dest+5u,this->vertexBufferWire.get(source+5u));
                        buffer.set(dest+6u,this->vertexBufferWire.get(source+6u));

                        buffer.set(dest+7u,this->vertexBufferWire.get(source+7u));
                        buffer.set(dest+8u,this->vertexBufferWire.get(source+8u));
                        buffer.set(dest+9u,this->vertexBufferWire.get(source+9u));

                        source+=vboSizeofMesh3D[this->vboWireType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                default:
                    break;
                }
            }
                break;
            case edk::GU::vbo_XYZ_RGB_NxNyNz_UVxUVy:
            {
                switch(type){
                case edk::GU::vbo_XY:
                {
                    //edk::GU::vbo_XYZ_RGB_NxNyNz_UVxUVy -> edk::GU::vbo_XY
                    for(edk::uint32 i=0u;i<this->vboWireCount;i++){
                        buffer.set(dest,this->vertexBufferWire.get(source));
                        buffer.set(dest+1u,this->vertexBufferWire.get(source+1u));

                        source+=vboSizeofMesh3D[this->vboWireType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_NxNyNz:
                {
                    //edk::GU::vbo_XYZ_RGB_NxNyNz_UVxUVy -> edk::GU::vbo_XY_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboWireCount;i++){
                        buffer.set(dest,this->vertexBufferWire.get(source));
                        buffer.set(dest+1u,this->vertexBufferWire.get(source+1u));

                        buffer.set(dest+2u,this->vertexBufferWire.get(source+6u));
                        buffer.set(dest+3u,this->vertexBufferWire.get(source+7u));
                        buffer.set(dest+4u,this->vertexBufferWire.get(source+8u));

                        source+=vboSizeofMesh3D[this->vboWireType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGB:
                {
                    //edk::GU::vbo_XYZ_RGB_NxNyNz_UVxUVy -> edk::GU::vbo_XY_RGB
                    for(edk::uint32 i=0u;i<this->vboWireCount;i++){
                        buffer.set(dest,this->vertexBufferWire.get(source));
                        buffer.set(dest+1u,this->vertexBufferWire.get(source+1u));

                        buffer.set(dest+2u,this->vertexBufferWire.get(source+3u));
                        buffer.set(dest+3u,this->vertexBufferWire.get(source+4u));
                        buffer.set(dest+4u,this->vertexBufferWire.get(source+5u));

                        source+=vboSizeofMesh3D[this->vboWireType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGBA:
                {
                    //edk::GU::vbo_XYZ_RGB_NxNyNz_UVxUVy -> edk::GU::vbo_XY_RGBA
                    for(edk::uint32 i=0u;i<this->vboWireCount;i++){
                        buffer.set(dest,this->vertexBufferWire.get(source));
                        buffer.set(dest+1u,this->vertexBufferWire.get(source+1u));

                        buffer.set(dest+2u,this->vertexBufferWire.get(source+3u));
                        buffer.set(dest+3u,this->vertexBufferWire.get(source+4u));
                        buffer.set(dest+4u,this->vertexBufferWire.get(source+5u));

                        source+=vboSizeofMesh3D[this->vboWireType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGB_NxNyNz:
                {
                    //edk::GU::vbo_XYZ_RGB_NxNyNz_UVxUVy -> edk::GU::vbo_XY_RGB_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboWireCount;i++){
                        buffer.set(dest,this->vertexBufferWire.get(source));
                        buffer.set(dest+1u,this->vertexBufferWire.get(source+1u));

                        buffer.set(dest+2u,this->vertexBufferWire.get(source+3u));
                        buffer.set(dest+3u,this->vertexBufferWire.get(source+4u));
                        buffer.set(dest+4u,this->vertexBufferWire.get(source+5u));

                        buffer.set(dest+5u,this->vertexBufferWire.get(source+6u));
                        buffer.set(dest+6u,this->vertexBufferWire.get(source+7u));
                        buffer.set(dest+7u,this->vertexBufferWire.get(source+8u));

                        source+=vboSizeofMesh3D[this->vboWireType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGBA_NxNyNz:
                {
                    //edk::GU::vbo_XYZ_RGB_NxNyNz_UVxUVy -> edk::GU::vbo_XY_RGBA_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboWireCount;i++){
                        buffer.set(dest,this->vertexBufferWire.get(source));
                        buffer.set(dest+1u,this->vertexBufferWire.get(source+1u));

                        buffer.set(dest+2u,this->vertexBufferWire.get(source+3u));
                        buffer.set(dest+3u,this->vertexBufferWire.get(source+4u));
                        buffer.set(dest+4u,this->vertexBufferWire.get(source+5u));

                        buffer.set(dest+6u,this->vertexBufferWire.get(source+6u));
                        buffer.set(dest+7u,this->vertexBufferWire.get(source+7u));
                        buffer.set(dest+8u,this->vertexBufferWire.get(source+8u));

                        source+=vboSizeofMesh3D[this->vboWireType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGB_NxNyNz_UVxUVy:
                {
                    //edk::GU::vbo_XYZ_RGB_NxNyNz_UVxUVy -> edk::GU::vbo_XY_RGB_NxNyNz_UVxUVy
                    for(edk::uint32 i=0u;i<this->vboWireCount;i++){
                        buffer.set(dest,this->vertexBufferWire.get(source));
                        buffer.set(dest+1u,this->vertexBufferWire.get(source+1u));

                        buffer.set(dest+2u,this->vertexBufferWire.get(source+3u));
                        buffer.set(dest+3u,this->vertexBufferWire.get(source+4u));
                        buffer.set(dest+4u,this->vertexBufferWire.get(source+5u));

                        buffer.set(dest+5u,this->vertexBufferWire.get(source+6u));
                        buffer.set(dest+6u,this->vertexBufferWire.get(source+7u));
                        buffer.set(dest+7u,this->vertexBufferWire.get(source+8u));

                        buffer.set(dest+8u,this->vertexBufferWire.get(source+9u));
                        buffer.set(dest+9u,this->vertexBufferWire.get(source+10u));
                        source+=vboSizeofMesh3D[this->vboWireType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy:
                {
                    //edk::GU::vbo_XYZ_RGB_NxNyNz_UVxUVy -> edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy
                    for(edk::uint32 i=0u;i<this->vboWireCount;i++){
                        buffer.set(dest,this->vertexBufferWire.get(source));
                        buffer.set(dest+1u,this->vertexBufferWire.get(source+1u));

                        buffer.set(dest+2u,this->vertexBufferWire.get(source+3u));
                        buffer.set(dest+3u,this->vertexBufferWire.get(source+4u));
                        buffer.set(dest+4u,this->vertexBufferWire.get(source+5u));

                        buffer.set(dest+6u,this->vertexBufferWire.get(source+6u));
                        buffer.set(dest+7u,this->vertexBufferWire.get(source+7u));
                        buffer.set(dest+8u,this->vertexBufferWire.get(source+8u));

                        buffer.set(dest+9u,this->vertexBufferWire.get(source+9u));
                        buffer.set(dest+10u,this->vertexBufferWire.get(source+10u));

                        source+=vboSizeofMesh3D[this->vboWireType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ:
                {
                    //edk::GU::vbo_XYZ_RGB_NxNyNz_UVxUVy -> edk::GU::vbo_XYZ
                    for(edk::uint32 i=0u;i<this->vboWireCount;i++){
                        buffer.set(dest,this->vertexBufferWire.get(source));
                        buffer.set(dest+1u,this->vertexBufferWire.get(source+1u));
                        buffer.set(dest+2u,this->vertexBufferWire.get(source+2u));

                        source+=vboSizeofMesh3D[this->vboWireType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_NxNyNz:
                {
                    //edk::GU::vbo_XYZ_RGB_NxNyNz_UVxUVy -> edk::GU::vbo_XYZ_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboWireCount;i++){
                        buffer.set(dest,this->vertexBufferWire.get(source));
                        buffer.set(dest+1u,this->vertexBufferWire.get(source+1u));
                        buffer.set(dest+2u,this->vertexBufferWire.get(source+2u));

                        buffer.set(dest+3u,this->vertexBufferWire.get(source+6u));
                        buffer.set(dest+4u,this->vertexBufferWire.get(source+7u));
                        buffer.set(dest+5u,this->vertexBufferWire.get(source+8u));

                        source+=vboSizeofMesh3D[this->vboWireType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGB:
                {
                    //edk::GU::vbo_XYZ_RGB_NxNyNz_UVxUVy -> edk::GU::vbo_XYZ_RGB
                    for(edk::uint32 i=0u;i<this->vboWireCount;i++){
                        buffer.set(dest,this->vertexBufferWire.get(source));
                        buffer.set(dest+1u,this->vertexBufferWire.get(source+1u));
                        buffer.set(dest+2u,this->vertexBufferWire.get(source+2u));

                        buffer.set(dest+3u,this->vertexBufferWire.get(source+3u));
                        buffer.set(dest+4u,this->vertexBufferWire.get(source+4u));
                        buffer.set(dest+5u,this->vertexBufferWire.get(source+5u));

                        source+=vboSizeofMesh3D[this->vboWireType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGBA:
                {
                    //edk::GU::vbo_XYZ_RGB_NxNyNz_UVxUVy -> edk::GU::vbo_XYZ_RGBA
                    for(edk::uint32 i=0u;i<this->vboWireCount;i++){
                        buffer.set(dest,this->vertexBufferWire.get(source));
                        buffer.set(dest+1u,this->vertexBufferWire.get(source+1u));
                        buffer.set(dest+2u,this->vertexBufferWire.get(source+2u));

                        buffer.set(dest+3u,this->vertexBufferWire.get(source+3u));
                        buffer.set(dest+4u,this->vertexBufferWire.get(source+4u));
                        buffer.set(dest+5u,this->vertexBufferWire.get(source+5u));

                        source+=vboSizeofMesh3D[this->vboWireType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGB_NxNyNz:
                {
                    //edk::GU::vbo_XYZ_RGB_NxNyNz_UVxUVy -> edk::GU::vbo_XYZ_RGB_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboWireCount;i++){
                        buffer.set(dest,this->vertexBufferWire.get(source));
                        buffer.set(dest+1u,this->vertexBufferWire.get(source+1u));
                        buffer.set(dest+2u,this->vertexBufferWire.get(source+2u));

                        buffer.set(dest+3u,this->vertexBufferWire.get(source+3u));
                        buffer.set(dest+4u,this->vertexBufferWire.get(source+4u));
                        buffer.set(dest+5u,this->vertexBufferWire.get(source+5u));

                        buffer.set(dest+6u,this->vertexBufferWire.get(source+6u));
                        buffer.set(dest+7u,this->vertexBufferWire.get(source+7u));
                        buffer.set(dest+8u,this->vertexBufferWire.get(source+8u));

                        source+=vboSizeofMesh3D[this->vboWireType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGBA_NxNyNz:
                {
                    //edk::GU::vbo_XYZ_RGB_NxNyNz_UVxUVy -> edk::GU::vbo_XYZ_RGBA_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboWireCount;i++){
                        buffer.set(dest,this->vertexBufferWire.get(source));
                        buffer.set(dest+1u,this->vertexBufferWire.get(source+1u));
                        buffer.set(dest+2u,this->vertexBufferWire.get(source+2u));

                        buffer.set(dest+3u,this->vertexBufferWire.get(source+3u));
                        buffer.set(dest+4u,this->vertexBufferWire.get(source+4u));
                        buffer.set(dest+5u,this->vertexBufferWire.get(source+5u));

                        buffer.set(dest+7u,this->vertexBufferWire.get(source+6u));
                        buffer.set(dest+8u,this->vertexBufferWire.get(source+7u));
                        buffer.set(dest+9u,this->vertexBufferWire.get(source+8u));

                        source+=vboSizeofMesh3D[this->vboWireType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy:
                {
                    //edk::GU::vbo_XYZ_RGB_NxNyNz_UVxUVy -> edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy
                    for(edk::uint32 i=0u;i<this->vboWireCount;i++){
                        buffer.set(dest,this->vertexBufferWire.get(source));
                        buffer.set(dest+1u,this->vertexBufferWire.get(source+1u));
                        buffer.set(dest+2u,this->vertexBufferWire.get(source+2u));

                        buffer.set(dest+3u,this->vertexBufferWire.get(source+3u));
                        buffer.set(dest+4u,this->vertexBufferWire.get(source+4u));
                        buffer.set(dest+5u,this->vertexBufferWire.get(source+5u));

                        buffer.set(dest+7u,this->vertexBufferWire.get(source+6u));
                        buffer.set(dest+8u,this->vertexBufferWire.get(source+7u));
                        buffer.set(dest+9u,this->vertexBufferWire.get(source+8u));

                        buffer.set(dest+10u,this->vertexBufferWire.get(source+9u));
                        buffer.set(dest+11u,this->vertexBufferWire.get(source+10u));

                        source+=vboSizeofMesh3D[this->vboWireType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                default:
                    break;
                }
            }
                break;
            case edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy:
            {
                switch(type){
                case edk::GU::vbo_XY:
                {
                    //edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy -> edk::GU::vbo_XY
                    for(edk::uint32 i=0u;i<this->vboWireCount;i++){
                        buffer.set(dest,this->vertexBufferWire.get(source));
                        buffer.set(dest+1u,this->vertexBufferWire.get(source+1u));

                        source+=vboSizeofMesh3D[this->vboWireType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_NxNyNz:
                {
                    //edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy -> edk::GU::vbo_XY_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboWireCount;i++){
                        buffer.set(dest,this->vertexBufferWire.get(source));
                        buffer.set(dest+1u,this->vertexBufferWire.get(source+1u));

                        buffer.set(dest+2u,this->vertexBufferWire.get(source+7u));
                        buffer.set(dest+3u,this->vertexBufferWire.get(source+8u));
                        buffer.set(dest+4u,this->vertexBufferWire.get(source+9u));

                        source+=vboSizeofMesh3D[this->vboWireType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGB:
                {
                    //edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy -> edk::GU::vbo_XY_RGB
                    for(edk::uint32 i=0u;i<this->vboWireCount;i++){
                        buffer.set(dest,this->vertexBufferWire.get(source));
                        buffer.set(dest+1u,this->vertexBufferWire.get(source+1u));

                        buffer.set(dest+2u,this->vertexBufferWire.get(source+3u));
                        buffer.set(dest+3u,this->vertexBufferWire.get(source+4u));
                        buffer.set(dest+4u,this->vertexBufferWire.get(source+5u));

                        source+=vboSizeofMesh3D[this->vboWireType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGBA:
                {
                    //edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy -> edk::GU::vbo_XY_RGBA
                    for(edk::uint32 i=0u;i<this->vboWireCount;i++){
                        buffer.set(dest,this->vertexBufferWire.get(source));
                        buffer.set(dest+1u,this->vertexBufferWire.get(source+1u));

                        buffer.set(dest+2u,this->vertexBufferWire.get(source+3u));
                        buffer.set(dest+3u,this->vertexBufferWire.get(source+4u));
                        buffer.set(dest+4u,this->vertexBufferWire.get(source+5u));
                        buffer.set(dest+5u,this->vertexBufferWire.get(source+6u));

                        source+=vboSizeofMesh3D[this->vboWireType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGB_NxNyNz:
                {
                    //edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy -> edk::GU::vbo_XY_RGB_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboWireCount;i++){
                        buffer.set(dest,this->vertexBufferWire.get(source));
                        buffer.set(dest+1u,this->vertexBufferWire.get(source+1u));

                        buffer.set(dest+2u,this->vertexBufferWire.get(source+3u));
                        buffer.set(dest+3u,this->vertexBufferWire.get(source+4u));
                        buffer.set(dest+4u,this->vertexBufferWire.get(source+5u));

                        buffer.set(dest+5u,this->vertexBufferWire.get(source+7u));
                        buffer.set(dest+6u,this->vertexBufferWire.get(source+8u));
                        buffer.set(dest+7u,this->vertexBufferWire.get(source+9u));

                        source+=vboSizeofMesh3D[this->vboWireType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGBA_NxNyNz:
                {
                    //edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy -> edk::GU::vbo_XY_RGBA_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboWireCount;i++){
                        buffer.set(dest,this->vertexBufferWire.get(source));
                        buffer.set(dest+1u,this->vertexBufferWire.get(source+1u));

                        buffer.set(dest+2u,this->vertexBufferWire.get(source+3u));
                        buffer.set(dest+3u,this->vertexBufferWire.get(source+4u));
                        buffer.set(dest+4u,this->vertexBufferWire.get(source+5u));
                        buffer.set(dest+5u,this->vertexBufferWire.get(source+6u));

                        buffer.set(dest+6u,this->vertexBufferWire.get(source+7u));
                        buffer.set(dest+7u,this->vertexBufferWire.get(source+8u));
                        buffer.set(dest+8u,this->vertexBufferWire.get(source+9u));

                        source+=vboSizeofMesh3D[this->vboWireType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGB_NxNyNz_UVxUVy:
                {
                    //edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy -> edk::GU::vbo_XY_RGB_NxNyNz_UVxUVy
                    for(edk::uint32 i=0u;i<this->vboWireCount;i++){
                        buffer.set(dest,this->vertexBufferWire.get(source));
                        buffer.set(dest+1u,this->vertexBufferWire.get(source+1u));

                        buffer.set(dest+2u,this->vertexBufferWire.get(source+3u));
                        buffer.set(dest+3u,this->vertexBufferWire.get(source+4u));
                        buffer.set(dest+4u,this->vertexBufferWire.get(source+5u));

                        buffer.set(dest+5u,this->vertexBufferWire.get(source+7u));
                        buffer.set(dest+6u,this->vertexBufferWire.get(source+8u));
                        buffer.set(dest+7u,this->vertexBufferWire.get(source+9u));

                        buffer.set(dest+8u,this->vertexBufferWire.get(source+10u));
                        buffer.set(dest+9u,this->vertexBufferWire.get(source+11u));

                        source+=vboSizeofMesh3D[this->vboWireType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy:
                {
                    //edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy -> edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy
                    for(edk::uint32 i=0u;i<this->vboWireCount;i++){
                        buffer.set(dest,this->vertexBufferWire.get(source));
                        buffer.set(dest+1u,this->vertexBufferWire.get(source+1u));

                        buffer.set(dest+2u,this->vertexBufferWire.get(source+3u));
                        buffer.set(dest+3u,this->vertexBufferWire.get(source+4u));
                        buffer.set(dest+4u,this->vertexBufferWire.get(source+5u));
                        buffer.set(dest+5u,this->vertexBufferWire.get(source+6u));

                        buffer.set(dest+6u,this->vertexBufferWire.get(source+7u));
                        buffer.set(dest+7u,this->vertexBufferWire.get(source+8u));
                        buffer.set(dest+8u,this->vertexBufferWire.get(source+9u));

                        buffer.set(dest+9u,this->vertexBufferWire.get(source+10u));
                        buffer.set(dest+10u,this->vertexBufferWire.get(source+11u));

                        source+=vboSizeofMesh3D[this->vboWireType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ:
                {
                    //edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy -> edk::GU::vbo_XYZ
                    for(edk::uint32 i=0u;i<this->vboWireCount;i++){
                        buffer.set(dest,this->vertexBufferWire.get(source));
                        buffer.set(dest+1u,this->vertexBufferWire.get(source+1u));
                        buffer.set(dest+2u,this->vertexBufferWire.get(source+2u));

                        source+=vboSizeofMesh3D[this->vboWireType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_NxNyNz:
                {
                    //edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy -> edk::GU::vbo_XYZ_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboWireCount;i++){
                        buffer.set(dest,this->vertexBufferWire.get(source));
                        buffer.set(dest+1u,this->vertexBufferWire.get(source+1u));
                        buffer.set(dest+2u,this->vertexBufferWire.get(source+2u));

                        buffer.set(dest+3u,this->vertexBufferWire.get(source+7u));
                        buffer.set(dest+4u,this->vertexBufferWire.get(source+8u));
                        buffer.set(dest+5u,this->vertexBufferWire.get(source+9u));

                        source+=vboSizeofMesh3D[this->vboWireType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGB:
                {
                    //edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy -> edk::GU::vbo_XYZ_RGB
                    for(edk::uint32 i=0u;i<this->vboWireCount;i++){
                        buffer.set(dest,this->vertexBufferWire.get(source));
                        buffer.set(dest+1u,this->vertexBufferWire.get(source+1u));
                        buffer.set(dest+2u,this->vertexBufferWire.get(source+2u));

                        buffer.set(dest+3u,this->vertexBufferWire.get(source+3u));
                        buffer.set(dest+4u,this->vertexBufferWire.get(source+4u));
                        buffer.set(dest+5u,this->vertexBufferWire.get(source+5u));

                        source+=vboSizeofMesh3D[this->vboWireType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGBA:
                {
                    //edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy -> edk::GU::vbo_XYZ_RGBA
                    for(edk::uint32 i=0u;i<this->vboWireCount;i++){
                        buffer.set(dest,this->vertexBufferWire.get(source));
                        buffer.set(dest+1u,this->vertexBufferWire.get(source+1u));
                        buffer.set(dest+2u,this->vertexBufferWire.get(source+2u));

                        buffer.set(dest+3u,this->vertexBufferWire.get(source+3u));
                        buffer.set(dest+4u,this->vertexBufferWire.get(source+4u));
                        buffer.set(dest+5u,this->vertexBufferWire.get(source+5u));
                        buffer.set(dest+6u,this->vertexBufferWire.get(source+6u));

                        source+=vboSizeofMesh3D[this->vboWireType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGB_NxNyNz:
                {
                    //edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy -> edk::GU::vbo_XYZ_RGB_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboWireCount;i++){
                        buffer.set(dest,this->vertexBufferWire.get(source));
                        buffer.set(dest+1u,this->vertexBufferWire.get(source+1u));
                        buffer.set(dest+2u,this->vertexBufferWire.get(source+2u));

                        buffer.set(dest+3u,this->vertexBufferWire.get(source+3u));
                        buffer.set(dest+4u,this->vertexBufferWire.get(source+4u));
                        buffer.set(dest+5u,this->vertexBufferWire.get(source+5u));

                        buffer.set(dest+6u,this->vertexBufferWire.get(source+7u));
                        buffer.set(dest+7u,this->vertexBufferWire.get(source+8u));
                        buffer.set(dest+8u,this->vertexBufferWire.get(source+9u));

                        source+=vboSizeofMesh3D[this->vboWireType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGBA_NxNyNz:
                {
                    //edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy -> edk::GU::vbo_XYZ_RGBA_NxNyNz
                    for(edk::uint32 i=0u;i<this->vboWireCount;i++){
                        buffer.set(dest,this->vertexBufferWire.get(source));
                        buffer.set(dest+1u,this->vertexBufferWire.get(source+1u));
                        buffer.set(dest+2u,this->vertexBufferWire.get(source+2u));

                        buffer.set(dest+3u,this->vertexBufferWire.get(source+3u));
                        buffer.set(dest+4u,this->vertexBufferWire.get(source+4u));
                        buffer.set(dest+5u,this->vertexBufferWire.get(source+5u));
                        buffer.set(dest+6u,this->vertexBufferWire.get(source+6u));

                        buffer.set(dest+7u,this->vertexBufferWire.get(source+7u));
                        buffer.set(dest+8u,this->vertexBufferWire.get(source+8u));
                        buffer.set(dest+9u,this->vertexBufferWire.get(source+9u));

                        source+=vboSizeofMesh3D[this->vboWireType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                case edk::GU::vbo_XYZ_RGB_NxNyNz_UVxUVy:
                {
                    //edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy -> edk::GU::vbo_XYZ_RGB_NxNyNz_UVxUVy
                    for(edk::uint32 i=0u;i<this->vboWireCount;i++){
                        buffer.set(dest,this->vertexBufferWire.get(source));
                        buffer.set(dest+1u,this->vertexBufferWire.get(source+1u));
                        buffer.set(dest+2u,this->vertexBufferWire.get(source+2u));

                        buffer.set(dest+3u,this->vertexBufferWire.get(source+3u));
                        buffer.set(dest+4u,this->vertexBufferWire.get(source+4u));
                        buffer.set(dest+5u,this->vertexBufferWire.get(source+5u));

                        buffer.set(dest+6u,this->vertexBufferWire.get(source+7u));
                        buffer.set(dest+7u,this->vertexBufferWire.get(source+8u));
                        buffer.set(dest+8u,this->vertexBufferWire.get(source+9u));

                        buffer.set(dest+9u,this->vertexBufferWire.get(source+10u));
                        buffer.set(dest+10u,this->vertexBufferWire.get(source+11u));

                        source+=vboSizeofMesh3D[this->vboWireType];
                        dest+=vboSizeofMesh3D[type];
                    }
                }
                    break;
                default:
                    break;
                }
            }
                break;
            default:
                break;
            }
            //clone the buffer
            this->vertexBufferWire.cloneFrom(&buffer);
            this->vboWireType = type;
            //set the update funtions
            this->updateVBOWireFunctions();
            return true;
        }
    }
    return false;
}
void edk::shape::Polygon3DList::deleteVBO(){
    if(this->vbo){
        edk::GU_GLSL::guDeleteBuffer(this->vbo);
        this->vbo=0u;
    }
    if(this->vertexBuffer.size()){
        this->vertexBuffer.deleteArray();
    }
    this->vboType = edk::GU::vbo_NULL;
    this->vboCount=0u;
}
void edk::shape::Polygon3DList::deleteVBOWithMatrix(){
    if(this->vboWithMatrix){
        edk::GU_GLSL::guDeleteBuffer(this->vboWithMatrix);
        this->vboWithMatrix=0u;
    }
    if(this->vertexBufferWithMatrix.size()){
        this->vertexBufferWithMatrix.deleteArray();
    }
    this->vboWithMatrixType = edk::GU::vbo_NULL;
    this->vboWithMatrixCount=0u;
}
void edk::shape::Polygon3DList::deleteVBOWire(){
    if(this->vboWire){
        edk::GU_GLSL::guDeleteBuffer(this->vboWire);
        this->vboWire=0u;
    }
    if(this->vertexBufferWire.size()){
        this->vertexBufferWire.deleteArray();
    }
    this->vboWireType = edk::GU::vbo_NULL;
    this->vboWireCount=0u;
}
bool edk::shape::Polygon3DList::haveVBO(){
    return (bool)(this->canUseVBO && this->vbo);
}
bool edk::shape::Polygon3DList::haveVBOWithMatrix(){
    return (bool)(this->canUseVBO && this->vboWithMatrix);
}
bool edk::shape::Polygon3DList::haveVBOWire(){
    return (bool)(this->canUseVBO && this->vboWire);
}
//set the vboFunction pointers
bool edk::shape::Polygon3DList::updateVBOFunctions(){
    if(this->haveVBO()){
        switch(this->vboType){
        case edk::GU::vbo_XY:
            this->vboPrint = &edk::shape::Polygon3DList::print_XY;
            this->vboDraw = &edk::shape::Polygon3DList::drawUpdate_XY;
            break;
        case edk::GU::vbo_XY_NxNyNz:
            this->vboPrint = &edk::shape::Polygon3DList::print_XY_NxNyNz;
            this->vboDraw = &edk::shape::Polygon3DList::drawUpdate_XY_NxNyNz;
            break;
        case edk::GU::vbo_XY_RGB:
            this->vboPrint = &edk::shape::Polygon3DList::print_XY_RGB;
            this->vboDraw = &edk::shape::Polygon3DList::drawUpdate_XY_RGB;
            break;
        case edk::GU::vbo_XY_RGBA:
            this->vboPrint = &edk::shape::Polygon3DList::print_XY_RGBA;
            this->vboDraw = &edk::shape::Polygon3DList::drawUpdate_XY_RGBA;
            break;
        case edk::GU::vbo_XY_RGB_NxNyNz:
            this->vboPrint = &edk::shape::Polygon3DList::print_XY_RGB_NxNyNz;
            this->vboDraw = &edk::shape::Polygon3DList::drawUpdate_XY_RGB_NxNyNz;
            break;
        case edk::GU::vbo_XY_RGBA_NxNyNz:
            this->vboPrint = &edk::shape::Polygon3DList::print_XY_RGBA_NxNyNz;
            this->vboDraw = &edk::shape::Polygon3DList::drawUpdate_XY_RGBA_NxNyNz;
            break;
        case edk::GU::vbo_XY_RGB_NxNyNz_UVxUVy:
            this->vboPrint = &edk::shape::Polygon3DList::print_XY_RGB_NxNyNz_UVxUVy;
            this->vboDraw = &edk::shape::Polygon3DList::drawUpdate_XY_RGB_NxNyNz_UVxUVy;
            break;
        case edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy:
            this->vboPrint = &edk::shape::Polygon3DList::print_XY_RGBA_NxNyNz_UVxUVy;
            this->vboDraw = &edk::shape::Polygon3DList::drawUpdate_XY_RGBA_NxNyNz_UVxUVy;
            break;
        case edk::GU::vbo_XYZ:
            this->vboPrint = &edk::shape::Polygon3DList::print_XYZ;
            this->vboDraw = &edk::shape::Polygon3DList::drawUpdate_XYZ;
            break;
        case edk::GU::vbo_XYZ_NxNyNz:
            this->vboPrint = &edk::shape::Polygon3DList::print_XYZ_NxNyNz;
            this->vboDraw = &edk::shape::Polygon3DList::drawUpdate_XYZ_NxNyNz;
            break;
        case edk::GU::vbo_XYZ_RGB:
            this->vboPrint = &edk::shape::Polygon3DList::print_XYZ_RGB;
            this->vboDraw = &edk::shape::Polygon3DList::drawUpdate_XYZ_RGB;
            break;
        case edk::GU::vbo_XYZ_RGBA:
            this->vboPrint = &edk::shape::Polygon3DList::print_XYZ_RGBA;
            this->vboDraw = &edk::shape::Polygon3DList::drawUpdate_XYZ_RGBA;
            break;
        case edk::GU::vbo_XYZ_RGB_NxNyNz:
            this->vboPrint = &edk::shape::Polygon3DList::print_XYZ_RGB_NxNyNz;
            this->vboDraw = &edk::shape::Polygon3DList::drawUpdate_XYZ_RGB_NxNyNz;
            break;
        case edk::GU::vbo_XYZ_RGBA_NxNyNz:
            this->vboPrint = &edk::shape::Polygon3DList::print_XYZ_RGBA_NxNyNz;
            this->vboDraw = &edk::shape::Polygon3DList::drawUpdate_XYZ_RGBA_NxNyNz;
            break;
        case edk::GU::vbo_XYZ_RGB_NxNyNz_UVxUVy:
            this->vboPrint = &edk::shape::Polygon3DList::print_XYZ_RGB_NxNyNz_UVxUVy;
            this->vboDraw = &edk::shape::Polygon3DList::drawUpdate_XYZ_RGB_NxNyNz_UVxUVy;
            break;
        case edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy:
            this->vboPrint = &edk::shape::Polygon3DList::print_XYZ_RGBA_NxNyNz_UVxUVy;
            this->vboDraw = &edk::shape::Polygon3DList::drawUpdate_XYZ_RGBA_NxNyNz_UVxUVy;
            break;
        default:
            this->vboPrint = &edk::shape::Polygon3DList::print_NULL;
            this->vboDraw = &edk::shape::Polygon3DList::drawUpdate_NULL;
            break;
        }
        return true;
    }
    this->setVBOFunctionUpdateNULL();
    return false;
}
bool edk::shape::Polygon3DList::updateVBOFunctionsWithMatrix(){
    if(this->haveVBO()){
        switch(this->vboWithMatrixType){
        case edk::GU::vbo_XY:
            this->vboPrint = &edk::shape::Polygon3DList::print_XY;
            this->vboDrawWithMatrix = &edk::shape::Polygon3DList::drawUpdateWithMatrix_XY;
            break;
        case edk::GU::vbo_XY_NxNyNz:
            this->vboPrint = &edk::shape::Polygon3DList::print_XY_NxNyNz;
            this->vboDrawWithMatrix = &edk::shape::Polygon3DList::drawUpdateWithMatrix_XY_NxNyNz;
            break;
        case edk::GU::vbo_XY_RGB:
            this->vboPrint = &edk::shape::Polygon3DList::print_XY_RGB;
            this->vboDrawWithMatrix = &edk::shape::Polygon3DList::drawUpdateWithMatrix_XY_RGB;
            break;
        case edk::GU::vbo_XY_RGBA:
            this->vboPrint = &edk::shape::Polygon3DList::print_XY_RGBA;
            this->vboDrawWithMatrix = &edk::shape::Polygon3DList::drawUpdateWithMatrix_XY_RGBA;
            break;
        case edk::GU::vbo_XY_RGB_NxNyNz:
            this->vboPrint = &edk::shape::Polygon3DList::print_XY_RGB_NxNyNz;
            this->vboDrawWithMatrix = &edk::shape::Polygon3DList::drawUpdateWithMatrix_XY_RGB_NxNyNz;
            break;
        case edk::GU::vbo_XY_RGBA_NxNyNz:
            this->vboPrint = &edk::shape::Polygon3DList::print_XY_RGBA_NxNyNz;
            this->vboDrawWithMatrix = &edk::shape::Polygon3DList::drawUpdateWithMatrix_XY_RGBA_NxNyNz;
            break;
        case edk::GU::vbo_XY_RGB_NxNyNz_UVxUVy:
            this->vboPrint = &edk::shape::Polygon3DList::print_XY_RGB_NxNyNz_UVxUVy;
            this->vboDrawWithMatrix = &edk::shape::Polygon3DList::drawUpdateWithMatrix_XY_RGB_NxNyNz_UVxUVy;
            break;
        case edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy:
            this->vboPrint = &edk::shape::Polygon3DList::print_XY_RGBA_NxNyNz_UVxUVy;
            this->vboDrawWithMatrix = &edk::shape::Polygon3DList::drawUpdateWithMatrix_XY_RGBA_NxNyNz_UVxUVy;
            break;
        case edk::GU::vbo_XYZ:
            this->vboPrint = &edk::shape::Polygon3DList::print_XYZ;
            this->vboDrawWithMatrix = &edk::shape::Polygon3DList::drawUpdateWithMatrix_XYZ;
            break;
        case edk::GU::vbo_XYZ_NxNyNz:
            this->vboPrint = &edk::shape::Polygon3DList::print_XYZ_NxNyNz;
            this->vboDrawWithMatrix = &edk::shape::Polygon3DList::drawUpdateWithMatrix_XYZ_NxNyNz;
            break;
        case edk::GU::vbo_XYZ_RGB:
            this->vboPrint = &edk::shape::Polygon3DList::print_XYZ_RGB;
            this->vboDrawWithMatrix = &edk::shape::Polygon3DList::drawUpdateWithMatrix_XYZ_RGB;
            break;
        case edk::GU::vbo_XYZ_RGBA:
            this->vboPrint = &edk::shape::Polygon3DList::print_XYZ_RGBA;
            this->vboDrawWithMatrix = &edk::shape::Polygon3DList::drawUpdateWithMatrix_XYZ_RGBA;
            break;
        case edk::GU::vbo_XYZ_RGB_NxNyNz:
            this->vboPrint = &edk::shape::Polygon3DList::print_XYZ_RGB_NxNyNz;
            this->vboDrawWithMatrix = &edk::shape::Polygon3DList::drawUpdateWithMatrix_XYZ_RGB_NxNyNz;
            break;
        case edk::GU::vbo_XYZ_RGBA_NxNyNz:
            this->vboPrint = &edk::shape::Polygon3DList::print_XYZ_RGBA_NxNyNz;
            this->vboDrawWithMatrix = &edk::shape::Polygon3DList::drawUpdateWithMatrix_XYZ_RGBA_NxNyNz;
            break;
        case edk::GU::vbo_XYZ_RGB_NxNyNz_UVxUVy:
            this->vboPrint = &edk::shape::Polygon3DList::print_XYZ_RGB_NxNyNz_UVxUVy;
            this->vboDrawWithMatrix = &edk::shape::Polygon3DList::drawUpdateWithMatrix_XYZ_RGB_NxNyNz_UVxUVy;
            break;
        case edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy:
            this->vboPrint = &edk::shape::Polygon3DList::print_XYZ_RGBA_NxNyNz_UVxUVy;
            this->vboDrawWithMatrix = &edk::shape::Polygon3DList::drawUpdateWithMatrix_XYZ_RGBA_NxNyNz_UVxUVy;
            break;
        default:
            this->vboPrint = &edk::shape::Polygon3DList::print_NULL;
            this->vboDrawWithMatrix = &edk::shape::Polygon3DList::drawUpdateWithMatrix_NULL;
            break;
        }
        return true;
    }
    this->setVBOWithMatrixFunctionUpdateNULL();
    return false;
}
bool edk::shape::Polygon3DList::updateVBOWireFunctions(){
    if(this->haveVBO()){
        switch(this->vboWireType){
        case edk::GU::vbo_XY:
            this->vboDrawWire = &edk::shape::Polygon3DList::drawWireUpdate_XY;
            break;
        case edk::GU::vbo_XY_NxNyNz:
            this->vboDrawWire = &edk::shape::Polygon3DList::drawWireUpdate_XY_NxNyNz;
            break;
        case edk::GU::vbo_XY_RGB:
            this->vboDrawWire = &edk::shape::Polygon3DList::drawWireUpdate_XY_RGB;
            break;
        case edk::GU::vbo_XY_RGBA:
            this->vboDrawWire = &edk::shape::Polygon3DList::drawWireUpdate_XY_RGBA;
            break;
        case edk::GU::vbo_XY_RGB_NxNyNz:
            this->vboDrawWire = &edk::shape::Polygon3DList::drawWireUpdate_XY_RGB_NxNyNz;
            break;
        case edk::GU::vbo_XY_RGBA_NxNyNz:
            this->vboDrawWire = &edk::shape::Polygon3DList::drawWireUpdate_XY_RGBA_NxNyNz;
            break;
        case edk::GU::vbo_XY_RGB_NxNyNz_UVxUVy:
            this->vboDrawWire = &edk::shape::Polygon3DList::drawWireUpdate_XY_RGB_NxNyNz_UVxUVy;
            break;
        case edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy:
            this->vboDrawWire = &edk::shape::Polygon3DList::drawWireUpdate_XY_RGBA_NxNyNz_UVxUVy;
            break;
        case edk::GU::vbo_XYZ:
            this->vboDrawWire = &edk::shape::Polygon3DList::drawWireUpdate_XYZ;
            break;
        case edk::GU::vbo_XYZ_NxNyNz:
            this->vboDrawWire = &edk::shape::Polygon3DList::drawWireUpdate_XYZ_NxNyNz;
            break;
        case edk::GU::vbo_XYZ_RGB:
            this->vboDrawWire = &edk::shape::Polygon3DList::drawWireUpdate_XYZ_RGB;
            break;
        case edk::GU::vbo_XYZ_RGBA:
            this->vboDrawWire = &edk::shape::Polygon3DList::drawWireUpdate_XYZ_RGBA;
            break;
        case edk::GU::vbo_XYZ_RGB_NxNyNz:
            this->vboDrawWire = &edk::shape::Polygon3DList::drawWireUpdate_XYZ_RGB_NxNyNz;
            break;
        case edk::GU::vbo_XYZ_RGBA_NxNyNz:
            this->vboDrawWire = &edk::shape::Polygon3DList::drawWireUpdate_XYZ_RGBA_NxNyNz;
            break;
        case edk::GU::vbo_XYZ_RGB_NxNyNz_UVxUVy:
            this->vboDrawWire = &edk::shape::Polygon3DList::drawWireUpdate_XYZ_RGB_NxNyNz_UVxUVy;
            break;
        case edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy:
            this->vboDrawWire = &edk::shape::Polygon3DList::drawWireUpdate_XYZ_RGBA_NxNyNz_UVxUVy;
            break;
        default:
            this->vboDrawWire = &edk::shape::Polygon3DList::drawWireUpdate_NULL;
            break;
        }
        return true;
    }
    this->setVBOWireFunctionUpdateNULL();
    return false;
}
bool edk::shape::Polygon3DList::setAutomaticallyVBOFunctions(){
    if(this->haveVBO()){
        switch(this->vboType){
        case edk::GU::vbo_XY:
            this->vboPrint = &edk::shape::Polygon3DList::print_XY;
            this->vboDraw = &edk::shape::Polygon3DList::draw_XY;
            break;
        case edk::GU::vbo_XY_NxNyNz:
            this->vboPrint = &edk::shape::Polygon3DList::print_XY_NxNyNz;
            this->vboDraw = &edk::shape::Polygon3DList::draw_XY_NxNyNz;
            break;
        case edk::GU::vbo_XY_RGB:
            this->vboPrint = &edk::shape::Polygon3DList::print_XY_RGB;
            this->vboDraw = &edk::shape::Polygon3DList::draw_XY_RGB;
            break;
        case edk::GU::vbo_XY_RGBA:
            this->vboPrint = &edk::shape::Polygon3DList::print_XY_RGBA;
            this->vboDraw = &edk::shape::Polygon3DList::draw_XY_RGBA;
            break;
        case edk::GU::vbo_XY_RGB_NxNyNz:
            this->vboPrint = &edk::shape::Polygon3DList::print_XY_RGB_NxNyNz;
            this->vboDraw = &edk::shape::Polygon3DList::draw_XY_RGB_NxNyNz;
            break;
        case edk::GU::vbo_XY_RGBA_NxNyNz:
            this->vboPrint = &edk::shape::Polygon3DList::print_XY_RGBA_NxNyNz;
            this->vboDraw = &edk::shape::Polygon3DList::draw_XY_RGBA_NxNyNz;
            break;
        case edk::GU::vbo_XY_RGB_NxNyNz_UVxUVy:
            this->vboPrint = &edk::shape::Polygon3DList::print_XY_RGB_NxNyNz_UVxUVy;
            this->vboDraw = &edk::shape::Polygon3DList::draw_XY_RGB_NxNyNz_UVxUVy;
            break;
        case edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy:
            this->vboPrint = &edk::shape::Polygon3DList::print_XY_RGBA_NxNyNz_UVxUVy;
            this->vboDraw = &edk::shape::Polygon3DList::draw_XY_RGBA_NxNyNz_UVxUVy;
            break;
        case edk::GU::vbo_XYZ:
            this->vboPrint = &edk::shape::Polygon3DList::print_XYZ;
            this->vboDraw = &edk::shape::Polygon3DList::draw_XYZ;
            break;
        case edk::GU::vbo_XYZ_NxNyNz:
            this->vboPrint = &edk::shape::Polygon3DList::print_XYZ_NxNyNz;
            this->vboDraw = &edk::shape::Polygon3DList::draw_XYZ_NxNyNz;
            break;
        case edk::GU::vbo_XYZ_RGB:
            this->vboPrint = &edk::shape::Polygon3DList::print_XYZ_RGB;
            this->vboDraw = &edk::shape::Polygon3DList::draw_XYZ_RGB;
            break;
        case edk::GU::vbo_XYZ_RGBA:
            this->vboPrint = &edk::shape::Polygon3DList::print_XYZ_RGBA;
            this->vboDraw = &edk::shape::Polygon3DList::draw_XYZ_RGBA;
            break;
        case edk::GU::vbo_XYZ_RGB_NxNyNz:
            this->vboPrint = &edk::shape::Polygon3DList::print_XYZ_RGB_NxNyNz;
            this->vboDraw = &edk::shape::Polygon3DList::draw_XYZ_RGB_NxNyNz;
            break;
        case edk::GU::vbo_XYZ_RGBA_NxNyNz:
            this->vboPrint = &edk::shape::Polygon3DList::print_XYZ_RGBA_NxNyNz;
            this->vboDraw = &edk::shape::Polygon3DList::draw_XYZ_RGBA_NxNyNz;
            break;
        case edk::GU::vbo_XYZ_RGB_NxNyNz_UVxUVy:
            this->vboPrint = &edk::shape::Polygon3DList::print_XYZ_RGB_NxNyNz_UVxUVy;
            this->vboDraw = &edk::shape::Polygon3DList::draw_XYZ_RGB_NxNyNz_UVxUVy;
            break;
        case edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy:
            this->vboPrint = &edk::shape::Polygon3DList::print_XYZ_RGBA_NxNyNz_UVxUVy;
            this->vboDraw = &edk::shape::Polygon3DList::draw_XYZ_RGBA_NxNyNz_UVxUVy;
            break;
        default:
            this->vboPrint = &edk::shape::Polygon3DList::print_NULL;
            this->vboDraw = &edk::shape::Polygon3DList::draw_NULL;
            break;
        }
        return true;
    }
    this->setVBOFunctionUpdateNULL();
    return false;
}
bool edk::shape::Polygon3DList::setAutomaticallyVBOFunctionsWithMatrix(){
    if(this->haveVBO()){
        switch(this->vboWithMatrixType){
        case edk::GU::vbo_XY:
            this->vboDrawWithMatrix = &edk::shape::Polygon3DList::drawWithMatrix_XY;
            break;
        case edk::GU::vbo_XY_NxNyNz:
            this->vboDrawWithMatrix = &edk::shape::Polygon3DList::drawWithMatrix_XY_NxNyNz;
            break;
        case edk::GU::vbo_XY_RGB:
            this->vboDrawWithMatrix = &edk::shape::Polygon3DList::drawWithMatrix_XY_RGB;
            break;
        case edk::GU::vbo_XY_RGBA:
            this->vboDrawWithMatrix = &edk::shape::Polygon3DList::drawWithMatrix_XY_RGBA;
            break;
        case edk::GU::vbo_XY_RGB_NxNyNz:
            this->vboDrawWithMatrix = &edk::shape::Polygon3DList::drawWithMatrix_XY_RGB_NxNyNz;
            break;
        case edk::GU::vbo_XY_RGBA_NxNyNz:
            this->vboDrawWithMatrix = &edk::shape::Polygon3DList::drawWithMatrix_XY_RGBA_NxNyNz;
            break;
        case edk::GU::vbo_XY_RGB_NxNyNz_UVxUVy:
            this->vboDrawWithMatrix = &edk::shape::Polygon3DList::drawWithMatrix_XY_RGB_NxNyNz_UVxUVy;
            break;
        case edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy:
            this->vboDrawWithMatrix = &edk::shape::Polygon3DList::drawWithMatrix_XY_RGBA_NxNyNz_UVxUVy;
            break;
        case edk::GU::vbo_XYZ:
            this->vboDrawWithMatrix = &edk::shape::Polygon3DList::drawWithMatrix_XYZ;
            break;
        case edk::GU::vbo_XYZ_NxNyNz:
            this->vboDrawWithMatrix = &edk::shape::Polygon3DList::drawWithMatrix_XYZ_NxNyNz;
            break;
        case edk::GU::vbo_XYZ_RGB:
            this->vboDrawWithMatrix = &edk::shape::Polygon3DList::drawWithMatrix_XYZ_RGB;
            break;
        case edk::GU::vbo_XYZ_RGBA:
            this->vboDrawWithMatrix = &edk::shape::Polygon3DList::drawWithMatrix_XYZ_RGBA;
            break;
        case edk::GU::vbo_XYZ_RGB_NxNyNz:
            this->vboDrawWithMatrix = &edk::shape::Polygon3DList::drawWithMatrix_XYZ_RGB_NxNyNz;
            break;
        case edk::GU::vbo_XYZ_RGBA_NxNyNz:
            this->vboDrawWithMatrix = &edk::shape::Polygon3DList::drawWithMatrix_XYZ_RGBA_NxNyNz;
            break;
        case edk::GU::vbo_XYZ_RGB_NxNyNz_UVxUVy:
            this->vboDrawWithMatrix = &edk::shape::Polygon3DList::drawWithMatrix_XYZ_RGB_NxNyNz_UVxUVy;
            break;
        case edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy:
            this->vboDrawWithMatrix = &edk::shape::Polygon3DList::drawWithMatrix_XYZ_RGBA_NxNyNz_UVxUVy;
            break;
        default:
            this->vboDrawWithMatrix = &edk::shape::Polygon3DList::drawWithMatrix_NULL;
            break;
        }
        return true;
    }
    this->setVBOWithMatrixFunctionUpdateNULL();
    return false;
}
bool edk::shape::Polygon3DList::setAutomaticallyVBOWireFunctions(){
    if(this->haveVBO()){
        switch(this->vboWireType){
        case edk::GU::vbo_XY:
            this->vboDrawWire = &edk::shape::Polygon3DList::drawWire_XY;
            break;
        case edk::GU::vbo_XY_NxNyNz:
            this->vboDrawWire = &edk::shape::Polygon3DList::drawWire_XY_NxNyNz;
            break;
        case edk::GU::vbo_XY_RGB:
            this->vboDrawWire = &edk::shape::Polygon3DList::drawWire_XY_RGB;
            break;
        case edk::GU::vbo_XY_RGBA:
            this->vboDrawWire = &edk::shape::Polygon3DList::drawWire_XY_RGBA;
            break;
        case edk::GU::vbo_XY_RGB_NxNyNz:
            this->vboDrawWire = &edk::shape::Polygon3DList::drawWire_XY_RGB_NxNyNz;
            break;
        case edk::GU::vbo_XY_RGBA_NxNyNz:
            this->vboDrawWire = &edk::shape::Polygon3DList::drawWire_XY_RGBA_NxNyNz;
            break;
        case edk::GU::vbo_XY_RGB_NxNyNz_UVxUVy:
            this->vboDrawWire = &edk::shape::Polygon3DList::drawWire_XY_RGB_NxNyNz_UVxUVy;
            break;
        case edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy:
            this->vboDrawWire = &edk::shape::Polygon3DList::drawWire_XY_RGBA_NxNyNz_UVxUVy;
            break;
        case edk::GU::vbo_XYZ:
            this->vboDrawWire = &edk::shape::Polygon3DList::drawWire_XYZ;
            break;
        case edk::GU::vbo_XYZ_NxNyNz:
            this->vboDrawWire = &edk::shape::Polygon3DList::drawWire_XYZ_NxNyNz;
            break;
        case edk::GU::vbo_XYZ_RGB:
            this->vboDrawWire = &edk::shape::Polygon3DList::drawWire_XYZ_RGB;
            break;
        case edk::GU::vbo_XYZ_RGBA:
            this->vboDrawWire = &edk::shape::Polygon3DList::drawWire_XYZ_RGBA;
            break;
        case edk::GU::vbo_XYZ_RGB_NxNyNz:
            this->vboDrawWire = &edk::shape::Polygon3DList::drawWire_XYZ_RGB_NxNyNz;
            break;
        case edk::GU::vbo_XYZ_RGBA_NxNyNz:
            this->vboDrawWire = &edk::shape::Polygon3DList::drawWire_XYZ_RGBA_NxNyNz;
            break;
        case edk::GU::vbo_XYZ_RGB_NxNyNz_UVxUVy:
            this->vboDrawWire = &edk::shape::Polygon3DList::drawWire_XYZ_RGB_NxNyNz_UVxUVy;
            break;
        case edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy:
            this->vboDrawWire = &edk::shape::Polygon3DList::drawWire_XYZ_RGBA_NxNyNz_UVxUVy;
            break;
        default:
            this->vboDrawWire = &edk::shape::Polygon3DList::drawWire_NULL;
            break;
        }
        return true;
    }
    this->setVBOWireFunctionUpdateNULL();
    return false;
}
void edk::shape::Polygon3DList::setVBOFunctionUpdateNULL(){
    this->vboPrint = &edk::shape::Polygon3DList::print_NULL;
    this->vboDraw = &edk::shape::Polygon3DList::drawUpdate_NULL;
    this->vboDrawWithMatrix = &edk::shape::Polygon3DList::drawUpdateWithMatrix_NULL;
    this->vboDrawWire = &edk::shape::Polygon3DList::drawWireUpdate_NULL;
}
void edk::shape::Polygon3DList::setVBOWithMatrixFunctionUpdateNULL(){
    this->vboPrint = &edk::shape::Polygon3DList::print_NULL;
    this->vboDraw = &edk::shape::Polygon3DList::drawUpdate_NULL;
    this->vboDrawWithMatrix = &edk::shape::Polygon3DList::drawUpdateWithMatrix_NULL;
    this->vboDrawWire = &edk::shape::Polygon3DList::drawWireUpdate_NULL;
}
void edk::shape::Polygon3DList::setVBOWireFunctionUpdateNULL(){
    this->vboPrint = &edk::shape::Polygon3DList::print_NULL;
    this->vboDraw = &edk::shape::Polygon3DList::drawUpdate_NULL;
    this->vboDrawWithMatrix = &edk::shape::Polygon3DList::drawUpdateWithMatrix_NULL;
    this->vboDrawWire = &edk::shape::Polygon3DList::drawWireUpdate_NULL;
}
void edk::shape::Polygon3DList::setVBOFunctionNULL(){
    this->vboPrint = &edk::shape::Polygon3DList::print_NULL;
    this->vboDraw = &edk::shape::Polygon3DList::draw_NULL;
    this->vboDrawWithMatrix = &edk::shape::Polygon3DList::drawWithMatrix_NULL;
    this->vboDrawWire = &edk::shape::Polygon3DList::drawWire_NULL;
}
void edk::shape::Polygon3DList::setVBOWithMatrixFunctionNULL(){
    this->vboPrint = &edk::shape::Polygon3DList::print_NULL;
    this->vboDraw = &edk::shape::Polygon3DList::draw_NULL;
    this->vboDrawWithMatrix = &edk::shape::Polygon3DList::drawWithMatrix_NULL;
    this->vboDrawWire = &edk::shape::Polygon3DList::drawWire_NULL;
}
void edk::shape::Polygon3DList::setVBOWireFunctionNULL(){
    this->vboPrint = &edk::shape::Polygon3DList::print_NULL;
    this->vboDraw = &edk::shape::Polygon3DList::draw_NULL;
    this->vboDrawWithMatrix = &edk::shape::Polygon3DList::drawWithMatrix_NULL;
    this->vboDrawWire = &edk::shape::Polygon3DList::drawWire_NULL;
}
//setters to VBO
bool edk::shape::Polygon3DList::setVBOVertexPosition(edk::uint32 vertex,edk::vec3f32 position){
    //set the vertex position in vertexBuffer
    if(this->haveVBO() && this->vertexBuffer.haveArray()){
        //calculate the vertex position
        vertex *= vboSizeofMesh3D[this->vboType];
        //switch(this->vboType){
        //case edk::GU::vbo_XY:
        //    break;
        //case edk::GU::vbo_XY_NxNyNz:
        //    break;
        //case edk::GU::vbo_XY_RGB:
        //    break;
        //case edk::GU::vbo_XY_RGBA:
        //    break;
        //case edk::GU::vbo_XY_RGB_NxNyNz:
        //    break;
        //case edk::GU::vbo_XY_RGBA_NxNyNz:
        //    break;
        //case edk::GU::vbo_XY_RGB_NxNyNz_UVxUVy:
        //    break;
        //case edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy:
        //    break;
        //case edk::GU::vbo_XYZ:
        //    break;
        //case edk::GU::vbo_XYZ_NxNyNz:
        //    break;
        //case edk::GU::vbo_XYZ_RGB:
        //    break;
        //case edk::GU::vbo_XYZ_RGBA:
        //    break;
        //case edk::GU::vbo_XYZ_RGB_NxNy:
        //    break;
        //case edk::GU::vbo_XYZ_RGBA_NxNy:
        //    break;
        //case edk::GU::vbo_XYZ_RGB_NxNyNz_UVxUVy:
        //    break;
        //case edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy:
        //    break;
        //default:
        //    break;
        //}
        //set the position
        this->vertexBuffer.set(vertex,position.x);
        vertex++;
        this->vertexBuffer.set(vertex,position.y);
        vertex++;
        this->vertexBuffer.set(vertex,position.z);

        //update the VBO
        this->updateVBOFunctions();

        return true;
    }
    return false;
}
bool edk::shape::Polygon3DList::setVBOVertexPositionX(edk::uint32 vertex,edk::float32 x){
    //set the vertex position in vertexBuffer
    if(this->haveVBO() && this->vertexBuffer.haveArray()){
        //calculate the vertex position
        vertex *= vboSizeofMesh3D[this->vboType];
        //switch(this->vboType){
        //case edk::GU::vbo_XY:
        //    break;
        //case edk::GU::vbo_XY_NxNyNz:
        //    break;
        //case edk::GU::vbo_XY_RGB:
        //    break;
        //case edk::GU::vbo_XY_RGBA:
        //    break;
        //case edk::GU::vbo_XY_RGB_NxNyNz:
        //    break;
        //case edk::GU::vbo_XY_RGBA_NxNyNz:
        //    break;
        //case edk::GU::vbo_XY_RGB_NxNyNz_UVxUVy:
        //    break;
        //case edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy:
        //    break;
        //case edk::GU::vbo_XYZ:
        //    break;
        //case edk::GU::vbo_XYZ_NxNyNz:
        //    break;
        //case edk::GU::vbo_XYZ_RGB:
        //    break;
        //case edk::GU::vbo_XYZ_RGBA:
        //    break;
        //case edk::GU::vbo_XYZ_RGB_NxNy:
        //    break;
        //case edk::GU::vbo_XYZ_RGBA_NxNy:
        //    break;
        //case edk::GU::vbo_XYZ_RGB_NxNyNz_UVxUVy:
        //    break;
        //case edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy:
        //    break;
        //default:
        //    break;
        //}
        //set the position
        this->vertexBuffer.set(vertex,x);

        //update the VBO
        this->updateVBOFunctions();

        return true;
    }
    return false;
}
bool edk::shape::Polygon3DList::setVBOVertexPositionY(edk::uint32 vertex,edk::float32 y){
    //set the vertex position in vertexBuffer
    if(this->haveVBO() && this->vertexBuffer.haveArray()){
        //calculate the vertex position
        vertex *= vboSizeofMesh3D[this->vboType];
        //switch(this->vboType){
        //case edk::GU::vbo_XY:
        //    break;
        //case edk::GU::vbo_XY_NxNyNz:
        //    break;
        //case edk::GU::vbo_XY_RGB:
        //    break;
        //case edk::GU::vbo_XY_RGBA:
        //    break;
        //case edk::GU::vbo_XY_RGB_NxNyNz:
        //    break;
        //case edk::GU::vbo_XY_RGBA_NxNyNz:
        //    break;
        //case edk::GU::vbo_XY_RGB_NxNyNz_UVxUVy:
        //    break;
        //case edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy:
        //    break;
        //case edk::GU::vbo_XYZ:
        //    break;
        //case edk::GU::vbo_XYZ_NxNyNz:
        //    break;
        //case edk::GU::vbo_XYZ_RGB:
        //    break;
        //case edk::GU::vbo_XYZ_RGBA:
        //    break;
        //case edk::GU::vbo_XYZ_RGB_NxNy:
        //    break;
        //case edk::GU::vbo_XYZ_RGBA_NxNy:
        //    break;
        //case edk::GU::vbo_XYZ_RGB_NxNyNz_UVxUVy:
        //    break;
        //case edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy:
        //    break;
        //default:
        //    break;
        //}
        //set the position
        vertex++;
        this->vertexBuffer.set(vertex,y);

        //update the VBO
        this->updateVBOFunctions();

        return true;
    }
    return false;
}
bool edk::shape::Polygon3DList::setVBOVertexPositionZ(edk::uint32 vertex,edk::float32 z){
    //set the vertex position in vertexBuffer
    if(this->haveVBO() && this->vertexBuffer.haveArray()){
        //calculate the vertex position
        vertex *= vboSizeofMesh3D[this->vboType];
        //switch(this->vboType){
        //case edk::GU::vbo_XY:
        //    break;
        //case edk::GU::vbo_XY_NxNyNz:
        //    break;
        //case edk::GU::vbo_XY_RGB:
        //    break;
        //case edk::GU::vbo_XY_RGBA:
        //    break;
        //case edk::GU::vbo_XY_RGB_NxNyNz:
        //    break;
        //case edk::GU::vbo_XY_RGBA_NxNyNz:
        //    break;
        //case edk::GU::vbo_XY_RGB_NxNyNz_UVxUVy:
        //    break;
        //case edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy:
        //    break;
        //case edk::GU::vbo_XYZ:
        //    break;
        //case edk::GU::vbo_XYZ_NxNyNz:
        //    break;
        //case edk::GU::vbo_XYZ_RGB:
        //    break;
        //case edk::GU::vbo_XYZ_RGBA:
        //    break;
        //case edk::GU::vbo_XYZ_RGB_NxNy:
        //    break;
        //case edk::GU::vbo_XYZ_RGBA_NxNy:
        //    break;
        //case edk::GU::vbo_XYZ_RGB_NxNyNz_UVxUVy:
        //    break;
        //case edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy:
        //    break;
        //default:
        //    break;
        //}
        //set the position
        vertex++;
        vertex++;
        this->vertexBuffer.set(vertex,z);

        //update the VBO
        this->updateVBOFunctions();

        return true;
    }
    return false;
}
bool edk::shape::Polygon3DList::setVBOVertexNormal(edk::uint32 vertex,edk::vec3f32 normal){
    //set the vertex position in vertexBuffer
    if(this->haveVBO() && this->vertexBuffer.haveArray()){
        //test if need change the buffer
        switch(this->vboType){
        case edk::GU::vbo_XY:
            //change the vertexBuffer
            this->changeVBO(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboType]) + 7u;
            break;
        case edk::GU::vbo_XY_NxNyNz:
            //change the vertexBuffer
            this->changeVBO(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboType]) + 7u;
            break;
        case edk::GU::vbo_XY_RGB:
            //change the vertexBuffer
            this->changeVBO(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboType]) + 7u;
            break;
        case edk::GU::vbo_XY_RGBA:
            //change the vertexBuffer
            this->changeVBO(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboType]) + 7u;
            break;
        case edk::GU::vbo_XY_RGB_NxNyNz:
            //change the vertexBuffer
            this->changeVBO(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboType]) + 7u;
            break;
        case edk::GU::vbo_XY_RGBA_NxNyNz:
            //change the vertexBuffer
            this->changeVBO(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboType]) + 7u;
            break;
        case edk::GU::vbo_XY_RGB_NxNyNz_UVxUVy:
            //change the vertexBuffer
            this->changeVBO(edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy);
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboType]) + 7u;
            break;
        case edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy:
            //change the vertexBuffer
            this->changeVBO(edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy);
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboType]) + 7u;
            break;
        case edk::GU::vbo_XYZ:
            //change the vertexBuffer
            this->changeVBO(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboType]) + 7u;
            break;
        case edk::GU::vbo_XYZ_NxNyNz:
            //change the vertexBuffer
            this->changeVBO(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboType]) + 7u;
            break;
        case edk::GU::vbo_XYZ_RGB:
            //change the vertexBuffer
            this->changeVBO(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboType]) + 7u;
            break;
        case edk::GU::vbo_XYZ_RGBA:
            //change the vertexBuffer
            this->changeVBO(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboType]) + 7u;
            break;
        case edk::GU::vbo_XYZ_RGB_NxNyNz:
            //change the vertexBuffer
            this->changeVBO(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboType]) + 7u;
            break;
        case edk::GU::vbo_XYZ_RGBA_NxNyNz:
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboType]) + 7u;
            break;
        case edk::GU::vbo_XYZ_RGB_NxNyNz_UVxUVy:
            //change the vertexBuffer
            this->changeVBO(edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy);
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboType]) + 7u;
            break;
        case edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy:
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboType]) + 7u;
            break;
        default:
            break;
        }

        //set the position
        this->vertexBuffer.set(vertex,normal.x);
        vertex++;
        this->vertexBuffer.set(vertex,normal.y);
        vertex++;
        this->vertexBuffer.set(vertex,normal.z);

        //update the VBO
        this->updateVBOFunctions();

        return true;
    }
    return false;
}
bool edk::shape::Polygon3DList::setVBOVertexNormalX(edk::uint32 vertex,edk::float32 x){
    //set the vertex position in vertexBuffer
    if(this->haveVBO() && this->vertexBuffer.haveArray()){
        //test if need change the buffer
        switch(this->vboType){
        case edk::GU::vbo_XY:
            //change the vertexBuffer
            this->changeVBO(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboType]) + 7u;
            break;
        case edk::GU::vbo_XY_NxNyNz:
            //change the vertexBuffer
            this->changeVBO(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboType]) + 7u;
            break;
        case edk::GU::vbo_XY_RGB:
            //change the vertexBuffer
            this->changeVBO(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboType]) + 7u;
            break;
        case edk::GU::vbo_XY_RGBA:
            //change the vertexBuffer
            this->changeVBO(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboType]) + 7u;
            break;
        case edk::GU::vbo_XY_RGB_NxNyNz:
            //change the vertexBuffer
            this->changeVBO(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboType]) + 7u;
            break;
        case edk::GU::vbo_XY_RGBA_NxNyNz:
            //change the vertexBuffer
            this->changeVBO(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboType]) + 7u;
            break;
        case edk::GU::vbo_XY_RGB_NxNyNz_UVxUVy:
            //change the vertexBuffer
            this->changeVBO(edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy);
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboType]) + 7u;
            break;
        case edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy:
            //change the vertexBuffer
            this->changeVBO(edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy);
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboType]) + 7u;
            break;
        case edk::GU::vbo_XYZ:
            //change the vertexBuffer
            this->changeVBO(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboType]) + 7u;
            break;
        case edk::GU::vbo_XYZ_NxNyNz:
            //change the vertexBuffer
            this->changeVBO(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboType]) + 7u;
            break;
        case edk::GU::vbo_XYZ_RGB:
            //change the vertexBuffer
            this->changeVBO(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboType]) + 7u;
            break;
        case edk::GU::vbo_XYZ_RGBA:
            //change the vertexBuffer
            this->changeVBO(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboType]) + 7u;
            break;
        case edk::GU::vbo_XYZ_RGB_NxNyNz:
            //change the vertexBuffer
            this->changeVBO(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboType]) + 7u;
            break;
        case edk::GU::vbo_XYZ_RGBA_NxNyNz:
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboType]) + 7u;
            break;
        case edk::GU::vbo_XYZ_RGB_NxNyNz_UVxUVy:
            //change the vertexBuffer
            this->changeVBO(edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy);
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboType]) + 7u;
            break;
        case edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy:
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboType]) + 7u;
            break;
        default:
            break;
        }

        //set the position
        this->vertexBuffer.set(vertex,x);

        //update the VBO
        this->updateVBOFunctions();

        return true;
    }
    return false;
}
bool edk::shape::Polygon3DList::setVBOVertexNormalY(edk::uint32 vertex,edk::float32 y){
    //set the vertex position in vertexBuffer
    if(this->haveVBO() && this->vertexBuffer.haveArray()){
        //test if need change the buffer
        switch(this->vboType){
        case edk::GU::vbo_XY:
            //change the vertexBuffer
            this->changeVBO(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboType]) + 7u;
            break;
        case edk::GU::vbo_XY_NxNyNz:
            //change the vertexBuffer
            this->changeVBO(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboType]) + 7u;
            break;
        case edk::GU::vbo_XY_RGB:
            //change the vertexBuffer
            this->changeVBO(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboType]) + 7u;
            break;
        case edk::GU::vbo_XY_RGBA:
            //change the vertexBuffer
            this->changeVBO(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboType]) + 7u;
            break;
        case edk::GU::vbo_XY_RGB_NxNyNz:
            //change the vertexBuffer
            this->changeVBO(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboType]) + 7u;
            break;
        case edk::GU::vbo_XY_RGBA_NxNyNz:
            //change the vertexBuffer
            this->changeVBO(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboType]) + 7u;
            break;
        case edk::GU::vbo_XY_RGB_NxNyNz_UVxUVy:
            //change the vertexBuffer
            this->changeVBO(edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy);
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboType]) + 7u;
            break;
        case edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy:
            //change the vertexBuffer
            this->changeVBO(edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy);
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboType]) + 7u;
            break;
        case edk::GU::vbo_XYZ:
            //change the vertexBuffer
            this->changeVBO(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboType]) + 7u;
            break;
        case edk::GU::vbo_XYZ_NxNyNz:
            //change the vertexBuffer
            this->changeVBO(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboType]) + 7u;
            break;
        case edk::GU::vbo_XYZ_RGB:
            //change the vertexBuffer
            this->changeVBO(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboType]) + 7u;
            break;
        case edk::GU::vbo_XYZ_RGBA:
            //change the vertexBuffer
            this->changeVBO(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboType]) + 7u;
            break;
        case edk::GU::vbo_XYZ_RGB_NxNyNz:
            //change the vertexBuffer
            this->changeVBO(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboType]) + 7u;
            break;
        case edk::GU::vbo_XYZ_RGBA_NxNyNz:
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboType]) + 7u;
            break;
        case edk::GU::vbo_XYZ_RGB_NxNyNz_UVxUVy:
            //change the vertexBuffer
            this->changeVBO(edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy);
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboType]) + 7u;
            break;
        case edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy:
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboType]) + 7u;
            break;
        default:
            break;
        }

        //set the position
        vertex++;
        this->vertexBuffer.set(vertex,y);

        //update the VBO
        this->updateVBOFunctions();

        return true;
    }
    return false;
}
bool edk::shape::Polygon3DList::setVBOVertexNormalZ(edk::uint32 vertex,edk::float32 z){
    //set the vertex position in vertexBuffer
    if(this->haveVBO() && this->vertexBuffer.haveArray()){
        //test if need change the buffer
        switch(this->vboType){
        case edk::GU::vbo_XY:
            //change the vertexBuffer
            this->changeVBO(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboType]) + 7u;
            break;
        case edk::GU::vbo_XY_NxNyNz:
            //change the vertexBuffer
            this->changeVBO(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboType]) + 7u;
            break;
        case edk::GU::vbo_XY_RGB:
            //change the vertexBuffer
            this->changeVBO(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboType]) + 7u;
            break;
        case edk::GU::vbo_XY_RGBA:
            //change the vertexBuffer
            this->changeVBO(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboType]) + 7u;
            break;
        case edk::GU::vbo_XY_RGB_NxNyNz:
            //change the vertexBuffer
            this->changeVBO(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboType]) + 7u;
            break;
        case edk::GU::vbo_XY_RGBA_NxNyNz:
            //change the vertexBuffer
            this->changeVBO(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboType]) + 7u;
            break;
        case edk::GU::vbo_XY_RGB_NxNyNz_UVxUVy:
            //change the vertexBuffer
            this->changeVBO(edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy);
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboType]) + 7u;
            break;
        case edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy:
            //change the vertexBuffer
            this->changeVBO(edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy);
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboType]) + 7u;
            break;
        case edk::GU::vbo_XYZ:
            //change the vertexBuffer
            this->changeVBO(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboType]) + 7u;
            break;
        case edk::GU::vbo_XYZ_NxNyNz:
            //change the vertexBuffer
            this->changeVBO(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboType]) + 7u;
            break;
        case edk::GU::vbo_XYZ_RGB:
            //change the vertexBuffer
            this->changeVBO(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboType]) + 7u;
            break;
        case edk::GU::vbo_XYZ_RGBA:
            //change the vertexBuffer
            this->changeVBO(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboType]) + 7u;
            break;
        case edk::GU::vbo_XYZ_RGB_NxNyNz:
            //change the vertexBuffer
            this->changeVBO(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboType]) + 7u;
            break;
        case edk::GU::vbo_XYZ_RGBA_NxNyNz:
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboType]) + 7u;
            break;
        case edk::GU::vbo_XYZ_RGB_NxNyNz_UVxUVy:
            //change the vertexBuffer
            this->changeVBO(edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy);
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboType]) + 7u;
            break;
        case edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy:
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboType]) + 7u;
            break;
        default:
            break;
        }

        //set the position
        vertex++;
        vertex++;
        this->vertexBuffer.set(vertex,z);

        //update the VBO
        this->updateVBOFunctions();

        return true;
    }
    return false;
}
bool edk::shape::Polygon3DList::setVBOVertexColor(edk::uint32 vertex,edk::color4f32 color){
    //set the vertex position in vertexBuffer
    if(this->haveVBO() && this->vertexBuffer.haveArray()){
        //test if need change the buffer
        switch(this->vboType){
        case edk::GU::vbo_XY:
            //change the vertexBuffer
            this->changeVBO(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboType]) + 3u;
            break;
        case edk::GU::vbo_XY_NxNyNz:
            //change the vertexBuffer
            this->changeVBO(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboType]) + 3u;
            break;
        case edk::GU::vbo_XY_RGB:
            //change the vertexBuffer
            this->changeVBO(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboType]) + 3u;
            break;
        case edk::GU::vbo_XY_RGBA:
            //change the vertexBuffer
            this->changeVBO(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboType]) + 3u;
            break;
        case edk::GU::vbo_XY_RGB_NxNyNz:
            //change the vertexBuffer
            this->changeVBO(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboType]) + 3u;
            break;
        case edk::GU::vbo_XY_RGBA_NxNyNz:
            //change the vertexBuffer
            this->changeVBO(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboType]) + 3u;
            break;
        case edk::GU::vbo_XY_RGB_NxNyNz_UVxUVy:
            //change the vertexBuffer
            this->changeVBO(edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy);
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboType]) + 3u;
            break;
        case edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy:
            //change the vertexBuffer
            this->changeVBO(edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy);
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboType]) + 3u;
            break;
        case edk::GU::vbo_XYZ:
            //change the vertexBuffer
            this->changeVBO(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboType]) + 3u;
            break;
        case edk::GU::vbo_XYZ_NxNyNz:
            //change the vertexBuffer
            this->changeVBO(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboType]) + 3u;
            break;
        case edk::GU::vbo_XYZ_RGB:
            //change the vertexBuffer
            this->changeVBO(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboType]) + 3u;
            break;
        case edk::GU::vbo_XYZ_RGBA:
            //change the vertexBuffer
            this->changeVBO(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboType]) + 3u;
            break;
        case edk::GU::vbo_XYZ_RGB_NxNyNz:
            //change the vertexBuffer
            this->changeVBO(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboType]) + 3u;
            break;
        case edk::GU::vbo_XYZ_RGBA_NxNyNz:
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboType]) + 3u;
            break;
        case edk::GU::vbo_XYZ_RGB_NxNyNz_UVxUVy:
            //change the vertexBuffer
            this->changeVBO(edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy);
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboType]) + 3u;
            break;
        case edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy:
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboType]) + 3u;
            break;
        default:
            break;
        }

        //set the position
        this->vertexBuffer.set(vertex,color.r);
        vertex++;
        this->vertexBuffer.set(vertex,color.g);
        vertex++;
        this->vertexBuffer.set(vertex,color.b);
        vertex++;
        this->vertexBuffer.set(vertex,color.a);

        //update the VBO
        this->updateVBOFunctions();

        return true;
    }
    return false;
}
bool edk::shape::Polygon3DList::setVBOPolygonColor(edk::color4f32 color){
    //update the VBO
    if(this->haveVBO() && this->vertexBuffer.haveArray()){
        //test if need change the buffer
        edk::uint8 position;
        //test if need change the buffer
        switch(this->vboType){
        case edk::GU::vbo_XY:
            //change the vertexBuffer
            this->changeVBO(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            position = 3u;
            break;
        case edk::GU::vbo_XY_NxNyNz:
            //change the vertexBuffer
            this->changeVBO(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            position = 3u;
            break;
        case edk::GU::vbo_XY_RGB:
            //change the vertexBuffer
            this->changeVBO(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            position = 3u;
            break;
        case edk::GU::vbo_XY_RGBA:
            //change the vertexBuffer
            this->changeVBO(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            position = 3u;
            break;
        case edk::GU::vbo_XY_RGB_NxNyNz:
            //change the vertexBuffer
            this->changeVBO(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            position = 3u;
            break;
        case edk::GU::vbo_XY_RGBA_NxNyNz:
            //change the vertexBuffer
            this->changeVBO(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            position = 3u;
            break;
        case edk::GU::vbo_XY_RGB_NxNyNz_UVxUVy:
            //change the vertexBuffer
            this->changeVBO(edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy);
            //calculate the vertex position
            position = 3u;
            break;
        case edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy:
            //change the vertexBuffer
            this->changeVBO(edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy);
            //calculate the vertex position
            position = 3u;
            break;
        case edk::GU::vbo_XYZ:
            //change the vertexBuffer
            this->changeVBO(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            position = 3u;
            break;
        case edk::GU::vbo_XYZ_NxNyNz:
            //change the vertexBuffer
            this->changeVBO(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            position = 3u;
            break;
        case edk::GU::vbo_XYZ_RGB:
            //change the vertexBuffer
            this->changeVBO(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            position = 3u;
            break;
        case edk::GU::vbo_XYZ_RGBA:
            //change the vertexBuffer
            this->changeVBO(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            position = 3u;
            break;
        case edk::GU::vbo_XYZ_RGB_NxNyNz:
            //change the vertexBuffer
            this->changeVBO(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            position = 3u;
            break;
        case edk::GU::vbo_XYZ_RGBA_NxNyNz:
            //calculate the vertex position
            position = 3u;
            break;
        case edk::GU::vbo_XYZ_RGB_NxNyNz_UVxUVy:
            //change the vertexBuffer
            this->changeVBO(edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy);
            //calculate the vertex position
            position = 3u;
            break;
        case edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy:
            //calculate the vertex position
            position = 3u;
            break;
        default:
            break;
        }
        edk::uint8 increment = vboSizeofMesh3D[this->vboType];
        //set the color of the vertexPolygons
        for(edk::uint32 i=0u;i<this->vboCount;i++){
            //set the color
            this->vertexBuffer.setNoIF(position,color.r);
            this->vertexBuffer.setNoIF(position+1u,color.g);
            this->vertexBuffer.setNoIF(position+2u,color.b);
            this->vertexBuffer.setNoIF(position+3u,color.a);
            position+=increment;
        }

        //update the VBO
        this->updateVBOFunctions();

        return true;
    }
    return false;
}
bool edk::shape::Polygon3DList::setVBOPolygonNormal(edk::vec3f32 normal){
    //update the VBO
    if(this->haveVBO() && this->vertexBuffer.haveArray()){
        //test if need change the buffer
        edk::uint8 position;
        //test if need change the buffer
        switch(this->vboType){
        case edk::GU::vbo_XY:
            //change the vertexBuffer
            this->changeVBO(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            position = 7u;
            break;
        case edk::GU::vbo_XY_NxNyNz:
            //change the vertexBuffer
            this->changeVBO(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            position = 7u;
            break;
        case edk::GU::vbo_XY_RGB:
            //change the vertexBuffer
            this->changeVBO(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            position = 7u;
            break;
        case edk::GU::vbo_XY_RGBA:
            //change the vertexBuffer
            this->changeVBO(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            position = 7u;
            break;
        case edk::GU::vbo_XY_RGB_NxNyNz:
            //change the vertexBuffer
            this->changeVBO(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            position = 7u;
            break;
        case edk::GU::vbo_XY_RGBA_NxNyNz:
            //change the vertexBuffer
            this->changeVBO(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            position = 7u;
            break;
        case edk::GU::vbo_XY_RGB_NxNyNz_UVxUVy:
            //change the vertexBuffer
            this->changeVBO(edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy);
            //calculate the vertex position
            position = 7u;
            break;
        case edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy:
            //change the vertexBuffer
            this->changeVBO(edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy);
            //calculate the vertex position
            position = 7u;
            break;
        case edk::GU::vbo_XYZ:
            //change the vertexBuffer
            this->changeVBO(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            position = 7u;
            break;
        case edk::GU::vbo_XYZ_NxNyNz:
            //change the vertexBuffer
            this->changeVBO(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            position = 7u;
            break;
        case edk::GU::vbo_XYZ_RGB:
            //change the vertexBuffer
            this->changeVBO(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            position = 7u;
            break;
        case edk::GU::vbo_XYZ_RGBA:
            //change the vertexBuffer
            this->changeVBO(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            position = 7u;
            break;
        case edk::GU::vbo_XYZ_RGB_NxNyNz:
            //change the vertexBuffer
            this->changeVBO(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            position = 7u;
            break;
        case edk::GU::vbo_XYZ_RGBA_NxNyNz:
            //calculate the vertex position
            position = 7u;
            break;
        case edk::GU::vbo_XYZ_RGB_NxNyNz_UVxUVy:
            //change the vertexBuffer
            this->changeVBO(edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy);
            //calculate the vertex position
            position = 7u;
            break;
        case edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy:
            //calculate the vertex position
            position = 7u;
            break;
        default:
            break;
        }
        edk::uint8 increment = vboSizeofMesh3D[this->vboType];
        //set the color of the vertexPolygons
        for(edk::uint32 i=0u;i<this->vboCount;i++){
            //set the color
            this->vertexBuffer.setNoIF(position,normal.x);
            this->vertexBuffer.setNoIF(position+1u,normal.y);
            this->vertexBuffer.setNoIF(position+2u,normal.z);
            position+=increment;
        }

        //update the VBO
        this->updateVBOFunctions();

        return true;
    }
    return false;
}
bool edk::shape::Polygon3DList::setVBOPolygonColorR(edk::float32 r){
    if(this->haveVBO() && this->vertexBuffer.haveArray()){
        //test if need change the buffer
        edk::uint8 position;
        //test if need change the buffer
        switch(this->vboType){
        case edk::GU::vbo_XY:
            //change the vertexBuffer
            this->changeVBO(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            position = 3u;
            break;
        case edk::GU::vbo_XY_NxNyNz:
            //change the vertexBuffer
            this->changeVBO(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            position = 3u;
            break;
        case edk::GU::vbo_XY_RGB:
            //change the vertexBuffer
            this->changeVBO(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            position = 3u;
            break;
        case edk::GU::vbo_XY_RGBA:
            //change the vertexBuffer
            this->changeVBO(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            position = 3u;
            break;
        case edk::GU::vbo_XY_RGB_NxNyNz:
            //change the vertexBuffer
            this->changeVBO(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            position = 3u;
            break;
        case edk::GU::vbo_XY_RGBA_NxNyNz:
            //change the vertexBuffer
            this->changeVBO(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            position = 3u;
            break;
        case edk::GU::vbo_XY_RGB_NxNyNz_UVxUVy:
            //change the vertexBuffer
            this->changeVBO(edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy);
            //calculate the vertex position
            position = 3u;
            break;
        case edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy:
            //change the vertexBuffer
            this->changeVBO(edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy);
            //calculate the vertex position
            position = 3u;
            break;
        case edk::GU::vbo_XYZ:
            //change the vertexBuffer
            this->changeVBO(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            position = 3u;
            break;
        case edk::GU::vbo_XYZ_NxNyNz:
            //change the vertexBuffer
            this->changeVBO(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            position = 3u;
            break;
        case edk::GU::vbo_XYZ_RGB:
            //change the vertexBuffer
            this->changeVBO(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            position = 3u;
            break;
        case edk::GU::vbo_XYZ_RGBA:
            //change the vertexBuffer
            this->changeVBO(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            position = 3u;
            break;
        case edk::GU::vbo_XYZ_RGB_NxNyNz:
            //change the vertexBuffer
            this->changeVBO(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            position = 3u;
            break;
        case edk::GU::vbo_XYZ_RGBA_NxNyNz:
            //calculate the vertex position
            position = 3u;
            break;
        case edk::GU::vbo_XYZ_RGB_NxNyNz_UVxUVy:
            //change the vertexBuffer
            this->changeVBO(edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy);
            //calculate the vertex position
            position = 3u;
            break;
        case edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy:
            //calculate the vertex position
            position = 3u;
            break;
        default:
            break;
        }
        edk::uint8 increment = vboSizeofMesh3D[this->vboType];
        //set the color of the vertexPolygons
        for(edk::uint32 i=0u;i<this->vboCount;i++){
            //set the color
            this->vertexBuffer.setNoIF(position,r);
            position+=increment;
        }

        //update the VBO
        this->updateVBOFunctions();

        return true;
    }
    return false;
}
bool edk::shape::Polygon3DList::setVBOPolygonColorG(edk::float32 g){
    if(this->haveVBO() && this->vertexBuffer.haveArray()){
        //test if need change the buffer
        edk::uint8 position;
        //test if need change the buffer
        switch(this->vboType){
        case edk::GU::vbo_XY:
            //change the vertexBuffer
            this->changeVBO(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            position = 3u;
            break;
        case edk::GU::vbo_XY_NxNyNz:
            //change the vertexBuffer
            this->changeVBO(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            position = 3u;
            break;
        case edk::GU::vbo_XY_RGB:
            //change the vertexBuffer
            this->changeVBO(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            position = 3u;
            break;
        case edk::GU::vbo_XY_RGBA:
            //change the vertexBuffer
            this->changeVBO(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            position = 3u;
            break;
        case edk::GU::vbo_XY_RGB_NxNyNz:
            //change the vertexBuffer
            this->changeVBO(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            position = 3u;
            break;
        case edk::GU::vbo_XY_RGBA_NxNyNz:
            //change the vertexBuffer
            this->changeVBO(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            position = 3u;
            break;
        case edk::GU::vbo_XY_RGB_NxNyNz_UVxUVy:
            //change the vertexBuffer
            this->changeVBO(edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy);
            //calculate the vertex position
            position = 3u;
            break;
        case edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy:
            //change the vertexBuffer
            this->changeVBO(edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy);
            //calculate the vertex position
            position = 3u;
            break;
        case edk::GU::vbo_XYZ:
            //change the vertexBuffer
            this->changeVBO(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            position = 3u;
            break;
        case edk::GU::vbo_XYZ_NxNyNz:
            //change the vertexBuffer
            this->changeVBO(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            position = 3u;
            break;
        case edk::GU::vbo_XYZ_RGB:
            //change the vertexBuffer
            this->changeVBO(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            position = 3u;
            break;
        case edk::GU::vbo_XYZ_RGBA:
            //change the vertexBuffer
            this->changeVBO(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            position = 3u;
            break;
        case edk::GU::vbo_XYZ_RGB_NxNyNz:
            //change the vertexBuffer
            this->changeVBO(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            position = 3u;
            break;
        case edk::GU::vbo_XYZ_RGBA_NxNyNz:
            //calculate the vertex position
            position = 3u;
            break;
        case edk::GU::vbo_XYZ_RGB_NxNyNz_UVxUVy:
            //change the vertexBuffer
            this->changeVBO(edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy);
            //calculate the vertex position
            position = 3u;
            break;
        case edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy:
            //calculate the vertex position
            position = 3u;
            break;
        default:
            break;
        }
        edk::uint8 increment = vboSizeofMesh3D[this->vboType];
        position++;
        //set the color of the vertexPolygons
        for(edk::uint32 i=0u;i<this->vboCount;i++){
            //set the color
            this->vertexBuffer.setNoIF(position,g);
            position+=increment;
        }

        //update the VBO
        this->updateVBOFunctions();

        return true;
    }
    return false;
}
bool edk::shape::Polygon3DList::setVBOPolygonColorB(edk::float32 b){
    if(this->haveVBO() && this->vertexBuffer.haveArray()){
        //test if need change the buffer
        edk::uint8 position;
        //test if need change the buffer
        switch(this->vboType){
        case edk::GU::vbo_XY:
            //change the vertexBuffer
            this->changeVBO(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            position = 3u;
            break;
        case edk::GU::vbo_XY_NxNyNz:
            //change the vertexBuffer
            this->changeVBO(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            position = 3u;
            break;
        case edk::GU::vbo_XY_RGB:
            //change the vertexBuffer
            this->changeVBO(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            position = 3u;
            break;
        case edk::GU::vbo_XY_RGBA:
            //change the vertexBuffer
            this->changeVBO(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            position = 3u;
            break;
        case edk::GU::vbo_XY_RGB_NxNyNz:
            //change the vertexBuffer
            this->changeVBO(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            position = 3u;
            break;
        case edk::GU::vbo_XY_RGBA_NxNyNz:
            //change the vertexBuffer
            this->changeVBO(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            position = 3u;
            break;
        case edk::GU::vbo_XY_RGB_NxNyNz_UVxUVy:
            //change the vertexBuffer
            this->changeVBO(edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy);
            //calculate the vertex position
            position = 3u;
            break;
        case edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy:
            //change the vertexBuffer
            this->changeVBO(edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy);
            //calculate the vertex position
            position = 3u;
            break;
        case edk::GU::vbo_XYZ:
            //change the vertexBuffer
            this->changeVBO(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            position = 3u;
            break;
        case edk::GU::vbo_XYZ_NxNyNz:
            //change the vertexBuffer
            this->changeVBO(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            position = 3u;
            break;
        case edk::GU::vbo_XYZ_RGB:
            //change the vertexBuffer
            this->changeVBO(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            position = 3u;
            break;
        case edk::GU::vbo_XYZ_RGBA:
            //change the vertexBuffer
            this->changeVBO(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            position = 3u;
            break;
        case edk::GU::vbo_XYZ_RGB_NxNyNz:
            //change the vertexBuffer
            this->changeVBO(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            position = 3u;
            break;
        case edk::GU::vbo_XYZ_RGBA_NxNyNz:
            //calculate the vertex position
            position = 3u;
            break;
        case edk::GU::vbo_XYZ_RGB_NxNyNz_UVxUVy:
            //change the vertexBuffer
            this->changeVBO(edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy);
            //calculate the vertex position
            position = 3u;
            break;
        case edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy:
            //calculate the vertex position
            position = 3u;
            break;
        default:
            break;
        }
        edk::uint8 increment = vboSizeofMesh3D[this->vboType];
        position+=2u;
        //set the color of the vertexPolygons
        for(edk::uint32 i=0u;i<this->vboCount;i++){
            //set the color
            this->vertexBuffer.setNoIF(position,b);
            position+=increment;
        }

        //update the VBO
        this->updateVBOFunctions();

        return true;
    }
    return false;
}
bool edk::shape::Polygon3DList::setVBOPolygonColorA(edk::float32 a){
    if(this->haveVBO() && this->vertexBuffer.haveArray()){
        //test if need change the buffer
        edk::uint8 position;
        //test if need change the buffer
        switch(this->vboType){
        case edk::GU::vbo_XY:
            //change the vertexBuffer
            this->changeVBO(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            position = 3u;
            break;
        case edk::GU::vbo_XY_NxNyNz:
            //change the vertexBuffer
            this->changeVBO(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            position = 3u;
            break;
        case edk::GU::vbo_XY_RGB:
            //change the vertexBuffer
            this->changeVBO(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            position = 3u;
            break;
        case edk::GU::vbo_XY_RGBA:
            //change the vertexBuffer
            this->changeVBO(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            position = 3u;
            break;
        case edk::GU::vbo_XY_RGB_NxNyNz:
            //change the vertexBuffer
            this->changeVBO(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            position = 3u;
            break;
        case edk::GU::vbo_XY_RGBA_NxNyNz:
            //change the vertexBuffer
            this->changeVBO(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            position = 3u;
            break;
        case edk::GU::vbo_XY_RGB_NxNyNz_UVxUVy:
            //change the vertexBuffer
            this->changeVBO(edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy);
            //calculate the vertex position
            position = 3u;
            break;
        case edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy:
            //change the vertexBuffer
            this->changeVBO(edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy);
            //calculate the vertex position
            position = 3u;
            break;
        case edk::GU::vbo_XYZ:
            //change the vertexBuffer
            this->changeVBO(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            position = 3u;
            break;
        case edk::GU::vbo_XYZ_NxNyNz:
            //change the vertexBuffer
            this->changeVBO(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            position = 3u;
            break;
        case edk::GU::vbo_XYZ_RGB:
            //change the vertexBuffer
            this->changeVBO(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            position = 3u;
            break;
        case edk::GU::vbo_XYZ_RGBA:
            //change the vertexBuffer
            this->changeVBO(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            position = 3u;
            break;
        case edk::GU::vbo_XYZ_RGB_NxNyNz:
            //change the vertexBuffer
            this->changeVBO(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            position = 3u;
            break;
        case edk::GU::vbo_XYZ_RGBA_NxNyNz:
            //calculate the vertex position
            position = 3u;
            break;
        case edk::GU::vbo_XYZ_RGB_NxNyNz_UVxUVy:
            //change the vertexBuffer
            this->changeVBO(edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy);
            //calculate the vertex position
            position = 3u;
            break;
        case edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy:
            //calculate the vertex position
            position = 3u;
            break;
        default:
            break;
        }
        edk::uint8 increment = vboSizeofMesh3D[this->vboType];
        position+=3u;
        //set the color of the vertexPolygons
        for(edk::uint32 i=0u;i<this->vboCount;i++){
            //set the color
            this->vertexBuffer.setNoIF(position,a);
            position+=increment;
        }

        //update the VBO
        this->updateVBOFunctions();

        return true;
    }
    return false;
}
bool edk::shape::Polygon3DList::setVBOVertexUV(edk::uint32 vertex,edk::vec2f32 uv){
    //set the vertex position in vertexBuffer
    if(this->haveVBO() && this->vertexBuffer.haveArray()){
        //test if need change the buffer
        switch(this->vboType){
        case edk::GU::vbo_XY:
            //change the vertexBuffer
            this->changeVBO(edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy);
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboType]) + 9u;
            break;
        case edk::GU::vbo_XY_NxNyNz:
            //change the vertexBuffer
            this->changeVBO(edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy);
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboType]) + 9u;
            break;
        case edk::GU::vbo_XY_RGB:
            //change the vertexBuffer
            this->changeVBO(edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy);
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboType]) + 9u;
            break;
        case edk::GU::vbo_XY_RGBA:
            //change the vertexBuffer
            this->changeVBO(edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy);
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboType]) + 9u;
            break;
        case edk::GU::vbo_XY_RGB_NxNyNz:
            //change the vertexBuffer
            this->changeVBO(edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy);
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboType]) + 9u;
            break;
        case edk::GU::vbo_XY_RGBA_NxNyNz:
            //change the vertexBuffer
            this->changeVBO(edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy);
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboType]) + 9u;
            break;
        case edk::GU::vbo_XY_RGB_NxNyNz_UVxUVy:
            //change the vertexBuffer
            this->changeVBO(edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy);
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboType]) + 9u;
            break;
        case edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy:
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboType]) + 9u;
            break;
        case edk::GU::vbo_XYZ:
            //change the vertexBuffer
            this->changeVBO(edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy);
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboType]) + 10u;
            break;
        case edk::GU::vbo_XYZ_NxNyNz:
            //change the vertexBuffer
            this->changeVBO(edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy);
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboType]) + 10u;
            break;
        case edk::GU::vbo_XYZ_RGB:
            //change the vertexBuffer
            this->changeVBO(edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy);
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboType]) + 10u;
            break;
        case edk::GU::vbo_XYZ_RGBA:
            //change the vertexBuffer
            this->changeVBO(edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy);
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboType]) + 10u;
            break;
        case edk::GU::vbo_XYZ_RGB_NxNyNz:
            //change the vertexBuffer
            this->changeVBO(edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy);
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboType]) + 10u;
            break;
        case edk::GU::vbo_XYZ_RGBA_NxNyNz:
            //change the vertexBuffer
            this->changeVBO(edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy);
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboType]) + 10u;
            break;
        case edk::GU::vbo_XYZ_RGB_NxNyNz_UVxUVy:
            //change the vertexBuffer
            this->changeVBO(edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy);
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboType]) + 10u;
            break;
        case edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy:
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboType]) + 10u;
            break;
        default:
            break;
        }

        //set the position
        this->vertexBuffer.set(vertex,uv.x);
        vertex++;
        this->vertexBuffer.set(vertex,uv.y);

        //update the VBO
        this->updateVBOFunctions();

        return true;
    }
    return false;
}
bool edk::shape::Polygon3DList::setVBOVertexU(edk::uint32 vertex,edk::float32 u){
    //set the vertex position in vertexBuffer
    if(this->haveVBO() && this->vertexBuffer.haveArray()){
        //test if need change the buffer
        switch(this->vboType){
        case edk::GU::vbo_XY:
            //change the vertexBuffer
            this->changeVBO(edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy);
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboType]) + 9u;
            break;
        case edk::GU::vbo_XY_NxNyNz:
            //change the vertexBuffer
            this->changeVBO(edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy);
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboType]) + 9u;
            break;
        case edk::GU::vbo_XY_RGB:
            //change the vertexBuffer
            this->changeVBO(edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy);
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboType]) + 9u;
            break;
        case edk::GU::vbo_XY_RGBA:
            //change the vertexBuffer
            this->changeVBO(edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy);
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboType]) + 9u;
            break;
        case edk::GU::vbo_XY_RGB_NxNyNz:
            //change the vertexBuffer
            this->changeVBO(edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy);
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboType]) + 9u;
            break;
        case edk::GU::vbo_XY_RGBA_NxNyNz:
            //change the vertexBuffer
            this->changeVBO(edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy);
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboType]) + 9u;
            break;
        case edk::GU::vbo_XY_RGB_NxNyNz_UVxUVy:
            //change the vertexBuffer
            this->changeVBO(edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy);
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboType]) + 9u;
            break;
        case edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy:
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboType]) + 9u;
            break;
        case edk::GU::vbo_XYZ:
            //change the vertexBuffer
            this->changeVBO(edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy);
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboType]) + 10u;
            break;
        case edk::GU::vbo_XYZ_NxNyNz:
            //change the vertexBuffer
            this->changeVBO(edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy);
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboType]) + 10u;
            break;
        case edk::GU::vbo_XYZ_RGB:
            //change the vertexBuffer
            this->changeVBO(edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy);
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboType]) + 10u;
            break;
        case edk::GU::vbo_XYZ_RGBA:
            //change the vertexBuffer
            this->changeVBO(edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy);
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboType]) + 10u;
            break;
        case edk::GU::vbo_XYZ_RGB_NxNyNz:
            //change the vertexBuffer
            this->changeVBO(edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy);
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboType]) + 10u;
            break;
        case edk::GU::vbo_XYZ_RGBA_NxNyNz:
            //change the vertexBuffer
            this->changeVBO(edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy);
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboType]) + 10u;
            break;
        case edk::GU::vbo_XYZ_RGB_NxNyNz_UVxUVy:
            //change the vertexBuffer
            this->changeVBO(edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy);
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboType]) + 10u;
            break;
        case edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy:
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboType]) + 10u;
            break;
        default:
            break;
        }

        //set the position
        this->vertexBuffer.set(vertex,u);
        //update the VBO
        this->updateVBOFunctions();

        return true;
    }
    return false;
}
bool edk::shape::Polygon3DList::setVBOVertexV(edk::uint32 vertex,edk::float32 v){
    //set the vertex position in vertexBuffer
    if(this->haveVBO() && this->vertexBuffer.haveArray()){
        //test if need change the buffer
        switch(this->vboType){
        case edk::GU::vbo_XY:
            //change the vertexBuffer
            this->changeVBO(edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy);
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboType]) + 9u;
            break;
        case edk::GU::vbo_XY_NxNyNz:
            //change the vertexBuffer
            this->changeVBO(edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy);
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboType]) + 9u;
            break;
        case edk::GU::vbo_XY_RGB:
            //change the vertexBuffer
            this->changeVBO(edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy);
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboType]) + 9u;
            break;
        case edk::GU::vbo_XY_RGBA:
            //change the vertexBuffer
            this->changeVBO(edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy);
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboType]) + 9u;
            break;
        case edk::GU::vbo_XY_RGB_NxNyNz:
            //change the vertexBuffer
            this->changeVBO(edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy);
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboType]) + 9u;
            break;
        case edk::GU::vbo_XY_RGBA_NxNyNz:
            //change the vertexBuffer
            this->changeVBO(edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy);
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboType]) + 9u;
            break;
        case edk::GU::vbo_XY_RGB_NxNyNz_UVxUVy:
            //change the vertexBuffer
            this->changeVBO(edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy);
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboType]) + 9u;
            break;
        case edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy:
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboType]) + 9u;
            break;
        case edk::GU::vbo_XYZ:
            //change the vertexBuffer
            this->changeVBO(edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy);
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboType]) + 10u;
            break;
        case edk::GU::vbo_XYZ_NxNyNz:
            //change the vertexBuffer
            this->changeVBO(edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy);
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboType]) + 10u;
            break;
        case edk::GU::vbo_XYZ_RGB:
            //change the vertexBuffer
            this->changeVBO(edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy);
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboType]) + 10u;
            break;
        case edk::GU::vbo_XYZ_RGBA:
            //change the vertexBuffer
            this->changeVBO(edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy);
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboType]) + 10u;
            break;
        case edk::GU::vbo_XYZ_RGB_NxNyNz:
            //change the vertexBuffer
            this->changeVBO(edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy);
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboType]) + 10u;
            break;
        case edk::GU::vbo_XYZ_RGBA_NxNyNz:
            //change the vertexBuffer
            this->changeVBO(edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy);
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboType]) + 10u;
            break;
        case edk::GU::vbo_XYZ_RGB_NxNyNz_UVxUVy:
            //change the vertexBuffer
            this->changeVBO(edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy);
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboType]) + 10u;
            break;
        case edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy:
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboType]) + 10u;
            break;
        default:
            break;
        }

        //set the position
        vertex++;
        this->vertexBuffer.set(vertex,v);

        //update the VBO
        this->updateVBOFunctions();

        return true;
    }
    return false;
}
//With Matrix
bool edk::shape::Polygon3DList::setVBOVertexPositionWithMatrix(edk::uint32 vertex,edk::vec3f32 position){
    //set the vertex position in vertexBuffer
    if(this->haveVBO() && this->vertexBufferWithMatrix.haveArray()){
        //calculate the vertex position
        vertex *= vboSizeofMesh3D[this->vboWithMatrixType];
        //switch(this->vboWithMatrixType){
        //case edk::GU::vbo_XY:
        //    break;
        //case edk::GU::vbo_XY_NxNyNz:
        //    break;
        //case edk::GU::vbo_XY_RGB:
        //    break;
        //case edk::GU::vbo_XY_RGBA:
        //    break;
        //case edk::GU::vbo_XY_RGB_NxNyNz:
        //    break;
        //case edk::GU::vbo_XY_RGBA_NxNyNz:
        //    break;
        //case edk::GU::vbo_XY_RGB_NxNyNz_UVxUVy:
        //    break;
        //case edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy:
        //    break;
        //case edk::GU::vbo_XYZ:
        //    break;
        //case edk::GU::vbo_XYZ_NxNyNz:
        //    break;
        //case edk::GU::vbo_XYZ_RGB:
        //    break;
        //case edk::GU::vbo_XYZ_RGBA:
        //    break;
        //case edk::GU::vbo_XYZ_RGB_NxNy:
        //    break;
        //case edk::GU::vbo_XYZ_RGBA_NxNy:
        //    break;
        //case edk::GU::vbo_XYZ_RGB_NxNyNz_UVxUVy:
        //    break;
        //case edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy:
        //    break;
        //default:
        //    break;
        //}
        //set the position
        this->vertexBufferWithMatrix.set(vertex,position.x);
        vertex++;
        this->vertexBufferWithMatrix.set(vertex,position.y);
        vertex++;
        this->vertexBufferWithMatrix.set(vertex,position.z);

        //update the VBO
        this->updateVBOFunctionsWithMatrix();

        return true;
    }
    return false;
}
bool edk::shape::Polygon3DList::setVBOVertexPositionXWithMatrix(edk::uint32 vertex,edk::float32 x){
    //set the vertex position in vertexBuffer
    if(this->haveVBO() && this->vertexBufferWithMatrix.haveArray()){
        //calculate the vertex position
        vertex *= vboSizeofMesh3D[this->vboWithMatrixType];
        //switch(this->vboWithMatrixType){
        //case edk::GU::vbo_XY:
        //    break;
        //case edk::GU::vbo_XY_NxNyNz:
        //    break;
        //case edk::GU::vbo_XY_RGB:
        //    break;
        //case edk::GU::vbo_XY_RGBA:
        //    break;
        //case edk::GU::vbo_XY_RGB_NxNyNz:
        //    break;
        //case edk::GU::vbo_XY_RGBA_NxNyNz:
        //    break;
        //case edk::GU::vbo_XY_RGB_NxNyNz_UVxUVy:
        //    break;
        //case edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy:
        //    break;
        //case edk::GU::vbo_XYZ:
        //    break;
        //case edk::GU::vbo_XYZ_NxNyNz:
        //    break;
        //case edk::GU::vbo_XYZ_RGB:
        //    break;
        //case edk::GU::vbo_XYZ_RGBA:
        //    break;
        //case edk::GU::vbo_XYZ_RGB_NxNy:
        //    break;
        //case edk::GU::vbo_XYZ_RGBA_NxNy:
        //    break;
        //case edk::GU::vbo_XYZ_RGB_NxNyNz_UVxUVy:
        //    break;
        //case edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy:
        //    break;
        //default:
        //    break;
        //}
        //set the position
        this->vertexBufferWithMatrix.set(vertex,x);

        //update the VBO
        this->updateVBOFunctionsWithMatrix();

        return true;
    }
    return false;
}
bool edk::shape::Polygon3DList::setVBOVertexPositionYWithMatrix(edk::uint32 vertex,edk::float32 y){
    //set the vertex position in vertexBuffer
    if(this->haveVBO() && this->vertexBufferWithMatrix.haveArray()){
        //calculate the vertex position
        vertex *= vboSizeofMesh3D[this->vboWithMatrixType];
        //switch(this->vboWithMatrixType){
        //case edk::GU::vbo_XY:
        //    break;
        //case edk::GU::vbo_XY_NxNyNz:
        //    break;
        //case edk::GU::vbo_XY_RGB:
        //    break;
        //case edk::GU::vbo_XY_RGBA:
        //    break;
        //case edk::GU::vbo_XY_RGB_NxNyNz:
        //    break;
        //case edk::GU::vbo_XY_RGBA_NxNyNz:
        //    break;
        //case edk::GU::vbo_XY_RGB_NxNyNz_UVxUVy:
        //    break;
        //case edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy:
        //    break;
        //case edk::GU::vbo_XYZ:
        //    break;
        //case edk::GU::vbo_XYZ_NxNyNz:
        //    break;
        //case edk::GU::vbo_XYZ_RGB:
        //    break;
        //case edk::GU::vbo_XYZ_RGBA:
        //    break;
        //case edk::GU::vbo_XYZ_RGB_NxNy:
        //    break;
        //case edk::GU::vbo_XYZ_RGBA_NxNy:
        //    break;
        //case edk::GU::vbo_XYZ_RGB_NxNyNz_UVxUVy:
        //    break;
        //case edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy:
        //    break;
        //default:
        //    break;
        //}
        //set the position
        vertex++;
        this->vertexBufferWithMatrix.set(vertex,y);

        //update the VBO
        this->updateVBOFunctionsWithMatrix();

        return true;
    }
    return false;
}
bool edk::shape::Polygon3DList::setVBOVertexPositionZWithMatrix(edk::uint32 vertex,edk::float32 z){
    //set the vertex position in vertexBuffer
    if(this->haveVBO() && this->vertexBufferWithMatrix.haveArray()){
        //calculate the vertex position
        vertex *= vboSizeofMesh3D[this->vboWithMatrixType];
        //switch(this->vboWithMatrixType){
        //case edk::GU::vbo_XY:
        //    break;
        //case edk::GU::vbo_XY_NxNyNz:
        //    break;
        //case edk::GU::vbo_XY_RGB:
        //    break;
        //case edk::GU::vbo_XY_RGBA:
        //    break;
        //case edk::GU::vbo_XY_RGB_NxNyNz:
        //    break;
        //case edk::GU::vbo_XY_RGBA_NxNyNz:
        //    break;
        //case edk::GU::vbo_XY_RGB_NxNyNz_UVxUVy:
        //    break;
        //case edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy:
        //    break;
        //case edk::GU::vbo_XYZ:
        //    break;
        //case edk::GU::vbo_XYZ_NxNyNz:
        //    break;
        //case edk::GU::vbo_XYZ_RGB:
        //    break;
        //case edk::GU::vbo_XYZ_RGBA:
        //    break;
        //case edk::GU::vbo_XYZ_RGB_NxNy:
        //    break;
        //case edk::GU::vbo_XYZ_RGBA_NxNy:
        //    break;
        //case edk::GU::vbo_XYZ_RGB_NxNyNz_UVxUVy:
        //    break;
        //case edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy:
        //    break;
        //default:
        //    break;
        //}
        //set the position
        vertex++;
        vertex++;
        this->vertexBufferWithMatrix.set(vertex,z);

        //update the VBO
        this->updateVBOFunctionsWithMatrix();

        return true;
    }
    return false;
}
bool edk::shape::Polygon3DList::setVBOVertexNormalWithMatrix(edk::uint32 vertex,edk::vec3f32 normal){
    //set the vertex position in vertexBuffer
    if(this->haveVBO() && this->vertexBufferWithMatrix.haveArray()){
        //test if need change the buffer
        switch(this->vboWithMatrixType){
        case edk::GU::vbo_XY:
            //change the vertexBuffer
            this->changeVBOWithMatrix(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboWithMatrixType]) + 7u;
            break;
        case edk::GU::vbo_XY_NxNyNz:
            //change the vertexBuffer
            this->changeVBOWithMatrix(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboWithMatrixType]) + 7u;
            break;
        case edk::GU::vbo_XY_RGB:
            //change the vertexBuffer
            this->changeVBOWithMatrix(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboWithMatrixType]) + 7u;
            break;
        case edk::GU::vbo_XY_RGBA:
            //change the vertexBuffer
            this->changeVBOWithMatrix(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboWithMatrixType]) + 7u;
            break;
        case edk::GU::vbo_XY_RGB_NxNyNz:
            //change the vertexBuffer
            this->changeVBOWithMatrix(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboWithMatrixType]) + 7u;
            break;
        case edk::GU::vbo_XY_RGBA_NxNyNz:
            //change the vertexBuffer
            this->changeVBOWithMatrix(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboWithMatrixType]) + 7u;
            break;
        case edk::GU::vbo_XY_RGB_NxNyNz_UVxUVy:
            //change the vertexBuffer
            this->changeVBOWithMatrix(edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy);
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboWithMatrixType]) + 7u;
            break;
        case edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy:
            //change the vertexBuffer
            this->changeVBOWithMatrix(edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy);
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboWithMatrixType]) + 7u;
            break;
        case edk::GU::vbo_XYZ:
            //change the vertexBuffer
            this->changeVBOWithMatrix(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboWithMatrixType]) + 7u;
            break;
        case edk::GU::vbo_XYZ_NxNyNz:
            //change the vertexBuffer
            this->changeVBOWithMatrix(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboWithMatrixType]) + 7u;
            break;
        case edk::GU::vbo_XYZ_RGB:
            //change the vertexBuffer
            this->changeVBOWithMatrix(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboWithMatrixType]) + 7u;
            break;
        case edk::GU::vbo_XYZ_RGBA:
            //change the vertexBuffer
            this->changeVBOWithMatrix(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboWithMatrixType]) + 7u;
            break;
        case edk::GU::vbo_XYZ_RGB_NxNyNz:
            //change the vertexBuffer
            this->changeVBOWithMatrix(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboWithMatrixType]) + 7u;
            break;
        case edk::GU::vbo_XYZ_RGBA_NxNyNz:
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboWithMatrixType]) + 7u;
            break;
        case edk::GU::vbo_XYZ_RGB_NxNyNz_UVxUVy:
            //change the vertexBuffer
            this->changeVBOWithMatrix(edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy);
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboWithMatrixType]) + 7u;
            break;
        case edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy:
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboWithMatrixType]) + 7u;
            break;
        default:
            break;
        }

        //set the position
        this->vertexBufferWithMatrix.set(vertex,normal.x);
        vertex++;
        this->vertexBufferWithMatrix.set(vertex,normal.y);
        vertex++;
        this->vertexBufferWithMatrix.set(vertex,normal.z);

        //update the VBO
        this->updateVBOFunctionsWithMatrix();

        return true;
    }
    return false;
}
bool edk::shape::Polygon3DList::setVBOVertexNormalXWithMatrix(edk::uint32 vertex,edk::float32 x){
    //set the vertex position in vertexBuffer
    if(this->haveVBO() && this->vertexBufferWithMatrix.haveArray()){
        //test if need change the buffer
        switch(this->vboWithMatrixType){
        case edk::GU::vbo_XY:
            //change the vertexBuffer
            this->changeVBOWithMatrix(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboWithMatrixType]) + 7u;
            break;
        case edk::GU::vbo_XY_NxNyNz:
            //change the vertexBuffer
            this->changeVBOWithMatrix(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboWithMatrixType]) + 7u;
            break;
        case edk::GU::vbo_XY_RGB:
            //change the vertexBuffer
            this->changeVBOWithMatrix(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboWithMatrixType]) + 7u;
            break;
        case edk::GU::vbo_XY_RGBA:
            //change the vertexBuffer
            this->changeVBOWithMatrix(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboWithMatrixType]) + 7u;
            break;
        case edk::GU::vbo_XY_RGB_NxNyNz:
            //change the vertexBuffer
            this->changeVBOWithMatrix(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboWithMatrixType]) + 7u;
            break;
        case edk::GU::vbo_XY_RGBA_NxNyNz:
            //change the vertexBuffer
            this->changeVBOWithMatrix(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboWithMatrixType]) + 7u;
            break;
        case edk::GU::vbo_XY_RGB_NxNyNz_UVxUVy:
            //change the vertexBuffer
            this->changeVBOWithMatrix(edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy);
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboWithMatrixType]) + 7u;
            break;
        case edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy:
            //change the vertexBuffer
            this->changeVBOWithMatrix(edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy);
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboWithMatrixType]) + 7u;
            break;
        case edk::GU::vbo_XYZ:
            //change the vertexBuffer
            this->changeVBOWithMatrix(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboWithMatrixType]) + 7u;
            break;
        case edk::GU::vbo_XYZ_NxNyNz:
            //change the vertexBuffer
            this->changeVBOWithMatrix(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboWithMatrixType]) + 7u;
            break;
        case edk::GU::vbo_XYZ_RGB:
            //change the vertexBuffer
            this->changeVBOWithMatrix(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboWithMatrixType]) + 7u;
            break;
        case edk::GU::vbo_XYZ_RGBA:
            //change the vertexBuffer
            this->changeVBOWithMatrix(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboWithMatrixType]) + 7u;
            break;
        case edk::GU::vbo_XYZ_RGB_NxNyNz:
            //change the vertexBuffer
            this->changeVBOWithMatrix(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboWithMatrixType]) + 7u;
            break;
        case edk::GU::vbo_XYZ_RGBA_NxNyNz:
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboWithMatrixType]) + 7u;
            break;
        case edk::GU::vbo_XYZ_RGB_NxNyNz_UVxUVy:
            //change the vertexBuffer
            this->changeVBOWithMatrix(edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy);
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboWithMatrixType]) + 7u;
            break;
        case edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy:
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboWithMatrixType]) + 7u;
            break;
        default:
            break;
        }

        //set the position
        this->vertexBufferWithMatrix.set(vertex,x);

        //update the VBO
        this->updateVBOFunctionsWithMatrix();

        return true;
    }
    return false;
}
bool edk::shape::Polygon3DList::setVBOVertexNormalYWithMatrix(edk::uint32 vertex,edk::float32 y){
    //set the vertex position in vertexBuffer
    if(this->haveVBO() && this->vertexBufferWithMatrix.haveArray()){
        //test if need change the buffer
        switch(this->vboWithMatrixType){
        case edk::GU::vbo_XY:
            //change the vertexBuffer
            this->changeVBOWithMatrix(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboWithMatrixType]) + 7u;
            break;
        case edk::GU::vbo_XY_NxNyNz:
            //change the vertexBuffer
            this->changeVBOWithMatrix(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboWithMatrixType]) + 7u;
            break;
        case edk::GU::vbo_XY_RGB:
            //change the vertexBuffer
            this->changeVBOWithMatrix(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboWithMatrixType]) + 7u;
            break;
        case edk::GU::vbo_XY_RGBA:
            //change the vertexBuffer
            this->changeVBOWithMatrix(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboWithMatrixType]) + 7u;
            break;
        case edk::GU::vbo_XY_RGB_NxNyNz:
            //change the vertexBuffer
            this->changeVBOWithMatrix(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboWithMatrixType]) + 7u;
            break;
        case edk::GU::vbo_XY_RGBA_NxNyNz:
            //change the vertexBuffer
            this->changeVBOWithMatrix(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboWithMatrixType]) + 7u;
            break;
        case edk::GU::vbo_XY_RGB_NxNyNz_UVxUVy:
            //change the vertexBuffer
            this->changeVBOWithMatrix(edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy);
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboWithMatrixType]) + 7u;
            break;
        case edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy:
            //change the vertexBuffer
            this->changeVBOWithMatrix(edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy);
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboWithMatrixType]) + 7u;
            break;
        case edk::GU::vbo_XYZ:
            //change the vertexBuffer
            this->changeVBOWithMatrix(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboWithMatrixType]) + 7u;
            break;
        case edk::GU::vbo_XYZ_NxNyNz:
            //change the vertexBuffer
            this->changeVBOWithMatrix(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboWithMatrixType]) + 7u;
            break;
        case edk::GU::vbo_XYZ_RGB:
            //change the vertexBuffer
            this->changeVBOWithMatrix(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboWithMatrixType]) + 7u;
            break;
        case edk::GU::vbo_XYZ_RGBA:
            //change the vertexBuffer
            this->changeVBOWithMatrix(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboWithMatrixType]) + 7u;
            break;
        case edk::GU::vbo_XYZ_RGB_NxNyNz:
            //change the vertexBuffer
            this->changeVBOWithMatrix(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboWithMatrixType]) + 7u;
            break;
        case edk::GU::vbo_XYZ_RGBA_NxNyNz:
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboWithMatrixType]) + 7u;
            break;
        case edk::GU::vbo_XYZ_RGB_NxNyNz_UVxUVy:
            //change the vertexBuffer
            this->changeVBOWithMatrix(edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy);
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboWithMatrixType]) + 7u;
            break;
        case edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy:
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboWithMatrixType]) + 7u;
            break;
        default:
            break;
        }

        //set the position
        vertex++;
        this->vertexBufferWithMatrix.set(vertex,y);

        //update the VBO
        this->updateVBOFunctionsWithMatrix();

        return true;
    }
    return false;
}
bool edk::shape::Polygon3DList::setVBOVertexNormalZWithMatrix(edk::uint32 vertex,edk::float32 z){
    //set the vertex position in vertexBuffer
    if(this->haveVBO() && this->vertexBufferWithMatrix.haveArray()){
        //test if need change the buffer
        switch(this->vboWithMatrixType){
        case edk::GU::vbo_XY:
            //change the vertexBuffer
            this->changeVBOWithMatrix(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboWithMatrixType]) + 7u;
            break;
        case edk::GU::vbo_XY_NxNyNz:
            //change the vertexBuffer
            this->changeVBOWithMatrix(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboWithMatrixType]) + 7u;
            break;
        case edk::GU::vbo_XY_RGB:
            //change the vertexBuffer
            this->changeVBOWithMatrix(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboWithMatrixType]) + 7u;
            break;
        case edk::GU::vbo_XY_RGBA:
            //change the vertexBuffer
            this->changeVBOWithMatrix(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboWithMatrixType]) + 7u;
            break;
        case edk::GU::vbo_XY_RGB_NxNyNz:
            //change the vertexBuffer
            this->changeVBOWithMatrix(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboWithMatrixType]) + 7u;
            break;
        case edk::GU::vbo_XY_RGBA_NxNyNz:
            //change the vertexBuffer
            this->changeVBOWithMatrix(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboWithMatrixType]) + 7u;
            break;
        case edk::GU::vbo_XY_RGB_NxNyNz_UVxUVy:
            //change the vertexBuffer
            this->changeVBOWithMatrix(edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy);
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboWithMatrixType]) + 7u;
            break;
        case edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy:
            //change the vertexBuffer
            this->changeVBOWithMatrix(edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy);
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboWithMatrixType]) + 7u;
            break;
        case edk::GU::vbo_XYZ:
            //change the vertexBuffer
            this->changeVBOWithMatrix(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboWithMatrixType]) + 7u;
            break;
        case edk::GU::vbo_XYZ_NxNyNz:
            //change the vertexBuffer
            this->changeVBOWithMatrix(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboWithMatrixType]) + 7u;
            break;
        case edk::GU::vbo_XYZ_RGB:
            //change the vertexBuffer
            this->changeVBOWithMatrix(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboWithMatrixType]) + 7u;
            break;
        case edk::GU::vbo_XYZ_RGBA:
            //change the vertexBuffer
            this->changeVBOWithMatrix(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboWithMatrixType]) + 7u;
            break;
        case edk::GU::vbo_XYZ_RGB_NxNyNz:
            //change the vertexBuffer
            this->changeVBOWithMatrix(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboWithMatrixType]) + 7u;
            break;
        case edk::GU::vbo_XYZ_RGBA_NxNyNz:
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboWithMatrixType]) + 7u;
            break;
        case edk::GU::vbo_XYZ_RGB_NxNyNz_UVxUVy:
            //change the vertexBuffer
            this->changeVBOWithMatrix(edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy);
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboWithMatrixType]) + 7u;
            break;
        case edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy:
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboWithMatrixType]) + 7u;
            break;
        default:
            break;
        }

        //set the position
        vertex++;
        vertex++;
        this->vertexBufferWithMatrix.set(vertex,z);

        //update the VBO
        this->updateVBOFunctionsWithMatrix();

        return true;
    }
    return false;
}
bool edk::shape::Polygon3DList::setVBOVertexColorWithMatrix(edk::uint32 vertex,edk::color4f32 color){
    //set the vertex position in vertexBuffer
    if(this->haveVBO() && this->vertexBufferWithMatrix.haveArray()){
        //test if need change the buffer
        switch(this->vboWithMatrixType){
        case edk::GU::vbo_XY:
            //change the vertexBuffer
            this->changeVBOWithMatrix(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboWithMatrixType]) + 3u;
            break;
        case edk::GU::vbo_XY_NxNyNz:
            //change the vertexBuffer
            this->changeVBOWithMatrix(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboWithMatrixType]) + 3u;
            break;
        case edk::GU::vbo_XY_RGB:
            //change the vertexBuffer
            this->changeVBOWithMatrix(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboWithMatrixType]) + 3u;
            break;
        case edk::GU::vbo_XY_RGBA:
            //change the vertexBuffer
            this->changeVBOWithMatrix(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboWithMatrixType]) + 3u;
            break;
        case edk::GU::vbo_XY_RGB_NxNyNz:
            //change the vertexBuffer
            this->changeVBOWithMatrix(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboWithMatrixType]) + 3u;
            break;
        case edk::GU::vbo_XY_RGBA_NxNyNz:
            //change the vertexBuffer
            this->changeVBOWithMatrix(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboWithMatrixType]) + 3u;
            break;
        case edk::GU::vbo_XY_RGB_NxNyNz_UVxUVy:
            //change the vertexBuffer
            this->changeVBOWithMatrix(edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy);
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboWithMatrixType]) + 3u;
            break;
        case edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy:
            //change the vertexBuffer
            this->changeVBOWithMatrix(edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy);
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboWithMatrixType]) + 3u;
            break;
        case edk::GU::vbo_XYZ:
            //change the vertexBuffer
            this->changeVBOWithMatrix(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboWithMatrixType]) + 3u;
            break;
        case edk::GU::vbo_XYZ_NxNyNz:
            //change the vertexBuffer
            this->changeVBOWithMatrix(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboWithMatrixType]) + 3u;
            break;
        case edk::GU::vbo_XYZ_RGB:
            //change the vertexBuffer
            this->changeVBOWithMatrix(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboWithMatrixType]) + 3u;
            break;
        case edk::GU::vbo_XYZ_RGBA:
            //change the vertexBuffer
            this->changeVBOWithMatrix(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboWithMatrixType]) + 3u;
            break;
        case edk::GU::vbo_XYZ_RGB_NxNyNz:
            //change the vertexBuffer
            this->changeVBOWithMatrix(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboWithMatrixType]) + 3u;
            break;
        case edk::GU::vbo_XYZ_RGBA_NxNyNz:
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboWithMatrixType]) + 3u;
            break;
        case edk::GU::vbo_XYZ_RGB_NxNyNz_UVxUVy:
            //change the vertexBuffer
            this->changeVBOWithMatrix(edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy);
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboWithMatrixType]) + 3u;
            break;
        case edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy:
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboWithMatrixType]) + 3u;
            break;
        default:
            break;
        }

        //set the position
        this->vertexBufferWithMatrix.set(vertex,color.r);
        vertex++;
        this->vertexBufferWithMatrix.set(vertex,color.g);
        vertex++;
        this->vertexBufferWithMatrix.set(vertex,color.b);
        vertex++;
        this->vertexBufferWithMatrix.set(vertex,color.a);

        //update the VBO
        this->updateVBOFunctionsWithMatrix();

        return true;
    }
    return false;
}
bool edk::shape::Polygon3DList::setVBOPolygonColorWithMatrix(edk::color4f32 color){
    //update the VBO
    if(this->haveVBO() && this->vertexBufferWithMatrix.haveArray()){
        //test if need change the buffer
        edk::uint8 position;
        //test if need change the buffer
        switch(this->vboWithMatrixType){
        case edk::GU::vbo_XY:
            //change the vertexBuffer
            this->changeVBOWithMatrix(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            position = 3u;
            break;
        case edk::GU::vbo_XY_NxNyNz:
            //change the vertexBuffer
            this->changeVBOWithMatrix(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            position = 3u;
            break;
        case edk::GU::vbo_XY_RGB:
            //change the vertexBuffer
            this->changeVBOWithMatrix(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            position = 3u;
            break;
        case edk::GU::vbo_XY_RGBA:
            //change the vertexBuffer
            this->changeVBOWithMatrix(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            position = 3u;
            break;
        case edk::GU::vbo_XY_RGB_NxNyNz:
            //change the vertexBuffer
            this->changeVBOWithMatrix(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            position = 3u;
            break;
        case edk::GU::vbo_XY_RGBA_NxNyNz:
            //change the vertexBuffer
            this->changeVBOWithMatrix(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            position = 3u;
            break;
        case edk::GU::vbo_XY_RGB_NxNyNz_UVxUVy:
            //change the vertexBuffer
            this->changeVBOWithMatrix(edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy);
            //calculate the vertex position
            position = 3u;
            break;
        case edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy:
            //change the vertexBuffer
            this->changeVBOWithMatrix(edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy);
            //calculate the vertex position
            position = 3u;
            break;
        case edk::GU::vbo_XYZ:
            //change the vertexBuffer
            this->changeVBOWithMatrix(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            position = 3u;
            break;
        case edk::GU::vbo_XYZ_NxNyNz:
            //change the vertexBuffer
            this->changeVBOWithMatrix(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            position = 3u;
            break;
        case edk::GU::vbo_XYZ_RGB:
            //change the vertexBuffer
            this->changeVBOWithMatrix(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            position = 3u;
            break;
        case edk::GU::vbo_XYZ_RGBA:
            //change the vertexBuffer
            this->changeVBOWithMatrix(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            position = 3u;
            break;
        case edk::GU::vbo_XYZ_RGB_NxNyNz:
            //change the vertexBuffer
            this->changeVBOWithMatrix(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            position = 3u;
            break;
        case edk::GU::vbo_XYZ_RGBA_NxNyNz:
            //calculate the vertex position
            position = 3u;
            break;
        case edk::GU::vbo_XYZ_RGB_NxNyNz_UVxUVy:
            //change the vertexBuffer
            this->changeVBOWithMatrix(edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy);
            //calculate the vertex position
            position = 3u;
            break;
        case edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy:
            //calculate the vertex position
            position = 3u;
            break;
        default:
            break;
        }
        edk::uint8 increment = vboSizeofMesh3D[this->vboWithMatrixType];
        //set the color of the vertexPolygons
        for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
            //set the color
            this->vertexBufferWithMatrix.setNoIF(position,color.r);
            this->vertexBufferWithMatrix.setNoIF(position+1u,color.g);
            this->vertexBufferWithMatrix.setNoIF(position+2u,color.b);
            this->vertexBufferWithMatrix.setNoIF(position+3u,color.a);
            position+=increment;
        }

        //update the VBO
        this->updateVBOFunctionsWithMatrix();

        return true;
    }
    return false;
}
bool edk::shape::Polygon3DList::setVBOPolygonNormalWithMatrix(edk::vec3f32 normal){
    //update the VBO
    if(this->haveVBO() && this->vertexBufferWithMatrix.haveArray()){
        //test if need change the buffer
        edk::uint8 position;
        //test if need change the buffer
        switch(this->vboWithMatrixType){
        case edk::GU::vbo_XY:
            //change the vertexBuffer
            this->changeVBOWithMatrix(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            position = 7u;
            break;
        case edk::GU::vbo_XY_NxNyNz:
            //change the vertexBuffer
            this->changeVBOWithMatrix(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            position = 7u;
            break;
        case edk::GU::vbo_XY_RGB:
            //change the vertexBuffer
            this->changeVBOWithMatrix(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            position = 7u;
            break;
        case edk::GU::vbo_XY_RGBA:
            //change the vertexBuffer
            this->changeVBOWithMatrix(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            position = 7u;
            break;
        case edk::GU::vbo_XY_RGB_NxNyNz:
            //change the vertexBuffer
            this->changeVBOWithMatrix(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            position = 7u;
            break;
        case edk::GU::vbo_XY_RGBA_NxNyNz:
            //change the vertexBuffer
            this->changeVBOWithMatrix(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            position = 7u;
            break;
        case edk::GU::vbo_XY_RGB_NxNyNz_UVxUVy:
            //change the vertexBuffer
            this->changeVBOWithMatrix(edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy);
            //calculate the vertex position
            position = 7u;
            break;
        case edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy:
            //change the vertexBuffer
            this->changeVBOWithMatrix(edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy);
            //calculate the vertex position
            position = 7u;
            break;
        case edk::GU::vbo_XYZ:
            //change the vertexBuffer
            this->changeVBOWithMatrix(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            position = 7u;
            break;
        case edk::GU::vbo_XYZ_NxNyNz:
            //change the vertexBuffer
            this->changeVBOWithMatrix(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            position = 7u;
            break;
        case edk::GU::vbo_XYZ_RGB:
            //change the vertexBuffer
            this->changeVBOWithMatrix(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            position = 7u;
            break;
        case edk::GU::vbo_XYZ_RGBA:
            //change the vertexBuffer
            this->changeVBOWithMatrix(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            position = 7u;
            break;
        case edk::GU::vbo_XYZ_RGB_NxNyNz:
            //change the vertexBuffer
            this->changeVBOWithMatrix(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            position = 7u;
            break;
        case edk::GU::vbo_XYZ_RGBA_NxNyNz:
            //calculate the vertex position
            position = 7u;
            break;
        case edk::GU::vbo_XYZ_RGB_NxNyNz_UVxUVy:
            //change the vertexBuffer
            this->changeVBOWithMatrix(edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy);
            //calculate the vertex position
            position = 7u;
            break;
        case edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy:
            //calculate the vertex position
            position = 7u;
            break;
        default:
            break;
        }
        edk::uint8 increment = vboSizeofMesh3D[this->vboWithMatrixType];
        //set the color of the vertexPolygons
        for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
            //set the color
            this->vertexBufferWithMatrix.setNoIF(position,normal.x);
            this->vertexBufferWithMatrix.setNoIF(position+1u,normal.y);
            this->vertexBufferWithMatrix.setNoIF(position+2u,normal.z);
            position+=increment;
        }

        //update the VBO
        this->updateVBOFunctionsWithMatrix();

        return true;
    }
    return false;
}
bool edk::shape::Polygon3DList::setVBOPolygonColorRWithMatrix(edk::float32 r){
    if(this->haveVBO() && this->vertexBufferWithMatrix.haveArray()){
        //test if need change the buffer
        edk::uint8 position;
        //test if need change the buffer
        switch(this->vboWithMatrixType){
        case edk::GU::vbo_XY:
            //change the vertexBuffer
            this->changeVBOWithMatrix(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            position = 3u;
            break;
        case edk::GU::vbo_XY_NxNyNz:
            //change the vertexBuffer
            this->changeVBOWithMatrix(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            position = 3u;
            break;
        case edk::GU::vbo_XY_RGB:
            //change the vertexBuffer
            this->changeVBOWithMatrix(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            position = 3u;
            break;
        case edk::GU::vbo_XY_RGBA:
            //change the vertexBuffer
            this->changeVBOWithMatrix(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            position = 3u;
            break;
        case edk::GU::vbo_XY_RGB_NxNyNz:
            //change the vertexBuffer
            this->changeVBOWithMatrix(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            position = 3u;
            break;
        case edk::GU::vbo_XY_RGBA_NxNyNz:
            //change the vertexBuffer
            this->changeVBOWithMatrix(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            position = 3u;
            break;
        case edk::GU::vbo_XY_RGB_NxNyNz_UVxUVy:
            //change the vertexBuffer
            this->changeVBOWithMatrix(edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy);
            //calculate the vertex position
            position = 3u;
            break;
        case edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy:
            //change the vertexBuffer
            this->changeVBOWithMatrix(edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy);
            //calculate the vertex position
            position = 3u;
            break;
        case edk::GU::vbo_XYZ:
            //change the vertexBuffer
            this->changeVBOWithMatrix(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            position = 3u;
            break;
        case edk::GU::vbo_XYZ_NxNyNz:
            //change the vertexBuffer
            this->changeVBOWithMatrix(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            position = 3u;
            break;
        case edk::GU::vbo_XYZ_RGB:
            //change the vertexBuffer
            this->changeVBOWithMatrix(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            position = 3u;
            break;
        case edk::GU::vbo_XYZ_RGBA:
            //change the vertexBuffer
            this->changeVBOWithMatrix(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            position = 3u;
            break;
        case edk::GU::vbo_XYZ_RGB_NxNyNz:
            //change the vertexBuffer
            this->changeVBOWithMatrix(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            position = 3u;
            break;
        case edk::GU::vbo_XYZ_RGBA_NxNyNz:
            //calculate the vertex position
            position = 3u;
            break;
        case edk::GU::vbo_XYZ_RGB_NxNyNz_UVxUVy:
            //change the vertexBuffer
            this->changeVBOWithMatrix(edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy);
            //calculate the vertex position
            position = 3u;
            break;
        case edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy:
            //calculate the vertex position
            position = 3u;
            break;
        default:
            break;
        }
        edk::uint8 increment = vboSizeofMesh3D[this->vboWithMatrixType];
        //set the color of the vertexPolygons
        for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
            //set the color
            this->vertexBufferWithMatrix.setNoIF(position,r);
            position+=increment;
        }

        //update the VBO
        this->updateVBOFunctionsWithMatrix();

        return true;
    }
    return false;
}
bool edk::shape::Polygon3DList::setVBOPolygonColorGWithMatrix(edk::float32 g){
    if(this->haveVBO() && this->vertexBufferWithMatrix.haveArray()){
        //test if need change the buffer
        edk::uint8 position;
        //test if need change the buffer
        switch(this->vboWithMatrixType){
        case edk::GU::vbo_XY:
            //change the vertexBuffer
            this->changeVBOWithMatrix(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            position = 3u;
            break;
        case edk::GU::vbo_XY_NxNyNz:
            //change the vertexBuffer
            this->changeVBOWithMatrix(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            position = 3u;
            break;
        case edk::GU::vbo_XY_RGB:
            //change the vertexBuffer
            this->changeVBOWithMatrix(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            position = 3u;
            break;
        case edk::GU::vbo_XY_RGBA:
            //change the vertexBuffer
            this->changeVBOWithMatrix(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            position = 3u;
            break;
        case edk::GU::vbo_XY_RGB_NxNyNz:
            //change the vertexBuffer
            this->changeVBOWithMatrix(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            position = 3u;
            break;
        case edk::GU::vbo_XY_RGBA_NxNyNz:
            //change the vertexBuffer
            this->changeVBOWithMatrix(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            position = 3u;
            break;
        case edk::GU::vbo_XY_RGB_NxNyNz_UVxUVy:
            //change the vertexBuffer
            this->changeVBOWithMatrix(edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy);
            //calculate the vertex position
            position = 3u;
            break;
        case edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy:
            //change the vertexBuffer
            this->changeVBOWithMatrix(edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy);
            //calculate the vertex position
            position = 3u;
            break;
        case edk::GU::vbo_XYZ:
            //change the vertexBuffer
            this->changeVBOWithMatrix(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            position = 3u;
            break;
        case edk::GU::vbo_XYZ_NxNyNz:
            //change the vertexBuffer
            this->changeVBOWithMatrix(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            position = 3u;
            break;
        case edk::GU::vbo_XYZ_RGB:
            //change the vertexBuffer
            this->changeVBOWithMatrix(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            position = 3u;
            break;
        case edk::GU::vbo_XYZ_RGBA:
            //change the vertexBuffer
            this->changeVBOWithMatrix(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            position = 3u;
            break;
        case edk::GU::vbo_XYZ_RGB_NxNyNz:
            //change the vertexBuffer
            this->changeVBOWithMatrix(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            position = 3u;
            break;
        case edk::GU::vbo_XYZ_RGBA_NxNyNz:
            //calculate the vertex position
            position = 3u;
            break;
        case edk::GU::vbo_XYZ_RGB_NxNyNz_UVxUVy:
            //change the vertexBuffer
            this->changeVBOWithMatrix(edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy);
            //calculate the vertex position
            position = 3u;
            break;
        case edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy:
            //calculate the vertex position
            position = 3u;
            break;
        default:
            break;
        }
        edk::uint8 increment = vboSizeofMesh3D[this->vboWithMatrixType];
        position++;
        //set the color of the vertexPolygons
        for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
            //set the color
            this->vertexBufferWithMatrix.setNoIF(position,g);
            position+=increment;
        }

        //update the VBO
        this->updateVBOFunctionsWithMatrix();

        return true;
    }
    return false;
}
bool edk::shape::Polygon3DList::setVBOPolygonColorBWithMatrix(edk::float32 b){
    if(this->haveVBO() && this->vertexBufferWithMatrix.haveArray()){
        //test if need change the buffer
        edk::uint8 position;
        //test if need change the buffer
        switch(this->vboWithMatrixType){
        case edk::GU::vbo_XY:
            //change the vertexBuffer
            this->changeVBOWithMatrix(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            position = 3u;
            break;
        case edk::GU::vbo_XY_NxNyNz:
            //change the vertexBuffer
            this->changeVBOWithMatrix(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            position = 3u;
            break;
        case edk::GU::vbo_XY_RGB:
            //change the vertexBuffer
            this->changeVBOWithMatrix(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            position = 3u;
            break;
        case edk::GU::vbo_XY_RGBA:
            //change the vertexBuffer
            this->changeVBOWithMatrix(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            position = 3u;
            break;
        case edk::GU::vbo_XY_RGB_NxNyNz:
            //change the vertexBuffer
            this->changeVBOWithMatrix(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            position = 3u;
            break;
        case edk::GU::vbo_XY_RGBA_NxNyNz:
            //change the vertexBuffer
            this->changeVBOWithMatrix(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            position = 3u;
            break;
        case edk::GU::vbo_XY_RGB_NxNyNz_UVxUVy:
            //change the vertexBuffer
            this->changeVBOWithMatrix(edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy);
            //calculate the vertex position
            position = 3u;
            break;
        case edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy:
            //change the vertexBuffer
            this->changeVBOWithMatrix(edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy);
            //calculate the vertex position
            position = 3u;
            break;
        case edk::GU::vbo_XYZ:
            //change the vertexBuffer
            this->changeVBOWithMatrix(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            position = 3u;
            break;
        case edk::GU::vbo_XYZ_NxNyNz:
            //change the vertexBuffer
            this->changeVBOWithMatrix(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            position = 3u;
            break;
        case edk::GU::vbo_XYZ_RGB:
            //change the vertexBuffer
            this->changeVBOWithMatrix(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            position = 3u;
            break;
        case edk::GU::vbo_XYZ_RGBA:
            //change the vertexBuffer
            this->changeVBOWithMatrix(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            position = 3u;
            break;
        case edk::GU::vbo_XYZ_RGB_NxNyNz:
            //change the vertexBuffer
            this->changeVBOWithMatrix(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            position = 3u;
            break;
        case edk::GU::vbo_XYZ_RGBA_NxNyNz:
            //calculate the vertex position
            position = 3u;
            break;
        case edk::GU::vbo_XYZ_RGB_NxNyNz_UVxUVy:
            //change the vertexBuffer
            this->changeVBOWithMatrix(edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy);
            //calculate the vertex position
            position = 3u;
            break;
        case edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy:
            //calculate the vertex position
            position = 3u;
            break;
        default:
            break;
        }
        edk::uint8 increment = vboSizeofMesh3D[this->vboWithMatrixType];
        position+=2u;
        //set the color of the vertexPolygons
        for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
            //set the color
            this->vertexBufferWithMatrix.setNoIF(position,b);
            position+=increment;
        }

        //update the VBO
        this->updateVBOFunctionsWithMatrix();

        return true;
    }
    return false;
}
bool edk::shape::Polygon3DList::setVBOPolygonColorAWithMatrix(edk::float32 a){
    if(this->haveVBO() && this->vertexBufferWithMatrix.haveArray()){
        //test if need change the buffer
        edk::uint8 position;
        //test if need change the buffer
        switch(this->vboWithMatrixType){
        case edk::GU::vbo_XY:
            //change the vertexBuffer
            this->changeVBOWithMatrix(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            position = 3u;
            break;
        case edk::GU::vbo_XY_NxNyNz:
            //change the vertexBuffer
            this->changeVBOWithMatrix(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            position = 3u;
            break;
        case edk::GU::vbo_XY_RGB:
            //change the vertexBuffer
            this->changeVBOWithMatrix(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            position = 3u;
            break;
        case edk::GU::vbo_XY_RGBA:
            //change the vertexBuffer
            this->changeVBOWithMatrix(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            position = 3u;
            break;
        case edk::GU::vbo_XY_RGB_NxNyNz:
            //change the vertexBuffer
            this->changeVBOWithMatrix(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            position = 3u;
            break;
        case edk::GU::vbo_XY_RGBA_NxNyNz:
            //change the vertexBuffer
            this->changeVBOWithMatrix(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            position = 3u;
            break;
        case edk::GU::vbo_XY_RGB_NxNyNz_UVxUVy:
            //change the vertexBuffer
            this->changeVBOWithMatrix(edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy);
            //calculate the vertex position
            position = 3u;
            break;
        case edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy:
            //change the vertexBuffer
            this->changeVBOWithMatrix(edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy);
            //calculate the vertex position
            position = 3u;
            break;
        case edk::GU::vbo_XYZ:
            //change the vertexBuffer
            this->changeVBOWithMatrix(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            position = 3u;
            break;
        case edk::GU::vbo_XYZ_NxNyNz:
            //change the vertexBuffer
            this->changeVBOWithMatrix(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            position = 3u;
            break;
        case edk::GU::vbo_XYZ_RGB:
            //change the vertexBuffer
            this->changeVBOWithMatrix(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            position = 3u;
            break;
        case edk::GU::vbo_XYZ_RGBA:
            //change the vertexBuffer
            this->changeVBOWithMatrix(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            position = 3u;
            break;
        case edk::GU::vbo_XYZ_RGB_NxNyNz:
            //change the vertexBuffer
            this->changeVBOWithMatrix(edk::GU::vbo_XYZ_RGBA_NxNyNz);
            //calculate the vertex position
            position = 3u;
            break;
        case edk::GU::vbo_XYZ_RGBA_NxNyNz:
            //calculate the vertex position
            position = 3u;
            break;
        case edk::GU::vbo_XYZ_RGB_NxNyNz_UVxUVy:
            //change the vertexBuffer
            this->changeVBOWithMatrix(edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy);
            //calculate the vertex position
            position = 3u;
            break;
        case edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy:
            //calculate the vertex position
            position = 3u;
            break;
        default:
            break;
        }
        edk::uint8 increment = vboSizeofMesh3D[this->vboWithMatrixType];
        position+=3u;
        //set the color of the vertexPolygons
        for(edk::uint32 i=0u;i<this->vboWithMatrixCount;i++){
            //set the color
            this->vertexBufferWithMatrix.setNoIF(position,a);
            position+=increment;
        }

        //update the VBO
        this->updateVBOFunctionsWithMatrix();

        return true;
    }
    return false;
}
bool edk::shape::Polygon3DList::setVBOVertexUVWithMatrix(edk::uint32 vertex,edk::vec2f32 uv){
    //set the vertex position in vertexBuffer
    if(this->haveVBO() && this->vertexBufferWithMatrix.haveArray()){
        //test if need change the buffer
        switch(this->vboWithMatrixType){
        case edk::GU::vbo_XY:
            //change the vertexBuffer
            this->changeVBOWithMatrix(edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy);
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboWithMatrixType]) + 9u;
            break;
        case edk::GU::vbo_XY_NxNyNz:
            //change the vertexBuffer
            this->changeVBOWithMatrix(edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy);
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboWithMatrixType]) + 9u;
            break;
        case edk::GU::vbo_XY_RGB:
            //change the vertexBuffer
            this->changeVBOWithMatrix(edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy);
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboWithMatrixType]) + 9u;
            break;
        case edk::GU::vbo_XY_RGBA:
            //change the vertexBuffer
            this->changeVBOWithMatrix(edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy);
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboWithMatrixType]) + 9u;
            break;
        case edk::GU::vbo_XY_RGB_NxNyNz:
            //change the vertexBuffer
            this->changeVBOWithMatrix(edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy);
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboWithMatrixType]) + 9u;
            break;
        case edk::GU::vbo_XY_RGBA_NxNyNz:
            //change the vertexBuffer
            this->changeVBOWithMatrix(edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy);
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboWithMatrixType]) + 9u;
            break;
        case edk::GU::vbo_XY_RGB_NxNyNz_UVxUVy:
            //change the vertexBuffer
            this->changeVBOWithMatrix(edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy);
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboWithMatrixType]) + 9u;
            break;
        case edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy:
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboWithMatrixType]) + 9u;
            break;
        case edk::GU::vbo_XYZ:
            //change the vertexBuffer
            this->changeVBOWithMatrix(edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy);
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboWithMatrixType]) + 10u;
            break;
        case edk::GU::vbo_XYZ_NxNyNz:
            //change the vertexBuffer
            this->changeVBOWithMatrix(edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy);
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboWithMatrixType]) + 10u;
            break;
        case edk::GU::vbo_XYZ_RGB:
            //change the vertexBuffer
            this->changeVBOWithMatrix(edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy);
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboWithMatrixType]) + 10u;
            break;
        case edk::GU::vbo_XYZ_RGBA:
            //change the vertexBuffer
            this->changeVBOWithMatrix(edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy);
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboWithMatrixType]) + 10u;
            break;
        case edk::GU::vbo_XYZ_RGB_NxNyNz:
            //change the vertexBuffer
            this->changeVBOWithMatrix(edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy);
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboWithMatrixType]) + 10u;
            break;
        case edk::GU::vbo_XYZ_RGBA_NxNyNz:
            //change the vertexBuffer
            this->changeVBOWithMatrix(edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy);
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboWithMatrixType]) + 10u;
            break;
        case edk::GU::vbo_XYZ_RGB_NxNyNz_UVxUVy:
            //change the vertexBuffer
            this->changeVBOWithMatrix(edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy);
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboWithMatrixType]) + 10u;
            break;
        case edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy:
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboWithMatrixType]) + 10u;
            break;
        default:
            break;
        }

        //set the position
        this->vertexBufferWithMatrix.set(vertex,uv.x);
        vertex++;
        this->vertexBufferWithMatrix.set(vertex,uv.y);

        //update the VBO
        this->updateVBOFunctionsWithMatrix();

        return true;
    }
    return false;
}
bool edk::shape::Polygon3DList::setVBOVertexUWithMatrix(edk::uint32 vertex,edk::float32 u){
    //set the vertex position in vertexBuffer
    if(this->haveVBO() && this->vertexBufferWithMatrix.haveArray()){
        //test if need change the buffer
        switch(this->vboWithMatrixType){
        case edk::GU::vbo_XY:
            //change the vertexBuffer
            this->changeVBOWithMatrix(edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy);
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboWithMatrixType]) + 9u;
            break;
        case edk::GU::vbo_XY_NxNyNz:
            //change the vertexBuffer
            this->changeVBOWithMatrix(edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy);
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboWithMatrixType]) + 9u;
            break;
        case edk::GU::vbo_XY_RGB:
            //change the vertexBuffer
            this->changeVBOWithMatrix(edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy);
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboWithMatrixType]) + 9u;
            break;
        case edk::GU::vbo_XY_RGBA:
            //change the vertexBuffer
            this->changeVBOWithMatrix(edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy);
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboWithMatrixType]) + 9u;
            break;
        case edk::GU::vbo_XY_RGB_NxNyNz:
            //change the vertexBuffer
            this->changeVBOWithMatrix(edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy);
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboWithMatrixType]) + 9u;
            break;
        case edk::GU::vbo_XY_RGBA_NxNyNz:
            //change the vertexBuffer
            this->changeVBOWithMatrix(edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy);
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboWithMatrixType]) + 9u;
            break;
        case edk::GU::vbo_XY_RGB_NxNyNz_UVxUVy:
            //change the vertexBuffer
            this->changeVBOWithMatrix(edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy);
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboWithMatrixType]) + 9u;
            break;
        case edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy:
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboWithMatrixType]) + 9u;
            break;
        case edk::GU::vbo_XYZ:
            //change the vertexBuffer
            this->changeVBOWithMatrix(edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy);
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboWithMatrixType]) + 10u;
            break;
        case edk::GU::vbo_XYZ_NxNyNz:
            //change the vertexBuffer
            this->changeVBOWithMatrix(edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy);
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboWithMatrixType]) + 10u;
            break;
        case edk::GU::vbo_XYZ_RGB:
            //change the vertexBuffer
            this->changeVBOWithMatrix(edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy);
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboWithMatrixType]) + 10u;
            break;
        case edk::GU::vbo_XYZ_RGBA:
            //change the vertexBuffer
            this->changeVBOWithMatrix(edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy);
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboWithMatrixType]) + 10u;
            break;
        case edk::GU::vbo_XYZ_RGB_NxNyNz:
            //change the vertexBuffer
            this->changeVBOWithMatrix(edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy);
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboWithMatrixType]) + 10u;
            break;
        case edk::GU::vbo_XYZ_RGBA_NxNyNz:
            //change the vertexBuffer
            this->changeVBOWithMatrix(edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy);
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboWithMatrixType]) + 10u;
            break;
        case edk::GU::vbo_XYZ_RGB_NxNyNz_UVxUVy:
            //change the vertexBuffer
            this->changeVBOWithMatrix(edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy);
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboWithMatrixType]) + 10u;
            break;
        case edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy:
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboWithMatrixType]) + 10u;
            break;
        default:
            break;
        }

        //set the position
        this->vertexBufferWithMatrix.set(vertex,u);
        //update the VBO
        this->updateVBOFunctionsWithMatrix();

        return true;
    }
    return false;
}
bool edk::shape::Polygon3DList::setVBOVertexVWithMatrix(edk::uint32 vertex,edk::float32 v){
    //set the vertex position in vertexBuffer
    if(this->haveVBO() && this->vertexBufferWithMatrix.haveArray()){
        //test if need change the buffer
        switch(this->vboWithMatrixType){
        case edk::GU::vbo_XY:
            //change the vertexBuffer
            this->changeVBOWithMatrix(edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy);
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboWithMatrixType]) + 9u;
            break;
        case edk::GU::vbo_XY_NxNyNz:
            //change the vertexBuffer
            this->changeVBOWithMatrix(edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy);
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboWithMatrixType]) + 9u;
            break;
        case edk::GU::vbo_XY_RGB:
            //change the vertexBuffer
            this->changeVBOWithMatrix(edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy);
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboWithMatrixType]) + 9u;
            break;
        case edk::GU::vbo_XY_RGBA:
            //change the vertexBuffer
            this->changeVBOWithMatrix(edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy);
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboWithMatrixType]) + 9u;
            break;
        case edk::GU::vbo_XY_RGB_NxNyNz:
            //change the vertexBuffer
            this->changeVBOWithMatrix(edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy);
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboWithMatrixType]) + 9u;
            break;
        case edk::GU::vbo_XY_RGBA_NxNyNz:
            //change the vertexBuffer
            this->changeVBOWithMatrix(edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy);
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboWithMatrixType]) + 9u;
            break;
        case edk::GU::vbo_XY_RGB_NxNyNz_UVxUVy:
            //change the vertexBuffer
            this->changeVBOWithMatrix(edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy);
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboWithMatrixType]) + 9u;
            break;
        case edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy:
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboWithMatrixType]) + 9u;
            break;
        case edk::GU::vbo_XYZ:
            //change the vertexBuffer
            this->changeVBOWithMatrix(edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy);
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboWithMatrixType]) + 10u;
            break;
        case edk::GU::vbo_XYZ_NxNyNz:
            //change the vertexBuffer
            this->changeVBOWithMatrix(edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy);
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboWithMatrixType]) + 10u;
            break;
        case edk::GU::vbo_XYZ_RGB:
            //change the vertexBuffer
            this->changeVBOWithMatrix(edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy);
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboWithMatrixType]) + 10u;
            break;
        case edk::GU::vbo_XYZ_RGBA:
            //change the vertexBuffer
            this->changeVBOWithMatrix(edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy);
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboWithMatrixType]) + 10u;
            break;
        case edk::GU::vbo_XYZ_RGB_NxNyNz:
            //change the vertexBuffer
            this->changeVBOWithMatrix(edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy);
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboWithMatrixType]) + 10u;
            break;
        case edk::GU::vbo_XYZ_RGBA_NxNyNz:
            //change the vertexBuffer
            this->changeVBOWithMatrix(edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy);
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboWithMatrixType]) + 10u;
            break;
        case edk::GU::vbo_XYZ_RGB_NxNyNz_UVxUVy:
            //change the vertexBuffer
            this->changeVBOWithMatrix(edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy);
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboWithMatrixType]) + 10u;
            break;
        case edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy:
            //calculate the vertex position
            vertex = (vertex * vboSizeofMesh3D[this->vboWithMatrixType]) + 10u;
            break;
        default:
            break;
        }

        //set the position
        vertex++;
        this->vertexBufferWithMatrix.set(vertex,v);

        //update the VBO
        this->updateVBOFunctionsWithMatrix();

        return true;
    }
    return false;
}
//updafe the UV into the VBO
bool edk::shape::Polygon3DList::updateVBOUV(){
    bool ret=false;
    if(this->haveVBO() && this->vertexBuffer.haveArray()){
        edk::uint32 size = this->vertexs.size();
        edk::shape::Vertex3DWithUV* vTemp;
        edk::uint32 vertexUV;
        edk::vec2f32 uv;
        for(edk::uint32 i=0u;i<size;i++){
            vertexUV = i;


            //set the vertex position in vertexBuffer
            //test if need change the buffer
            switch(this->vboWithMatrixType){
            case edk::GU::vbo_XY:
                //change the vertexBuffer
                this->changeVBOWithMatrix(edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy);
                //calculate the vertex position
                vertexUV = (vertexUV * vboSizeofMesh3D[this->vboWithMatrixType]) + 9u;
                break;
            case edk::GU::vbo_XY_NxNyNz:
                //change the vertexBuffer
                this->changeVBOWithMatrix(edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy);
                //calculate the vertex position
                vertexUV = (vertexUV * vboSizeofMesh3D[this->vboWithMatrixType]) + 9u;
                break;
            case edk::GU::vbo_XY_RGB:
                //change the vertexBuffer
                this->changeVBOWithMatrix(edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy);
                //calculate the vertex position
                vertexUV = (vertexUV * vboSizeofMesh3D[this->vboWithMatrixType]) + 9u;
                break;
            case edk::GU::vbo_XY_RGBA:
                //change the vertexBuffer
                this->changeVBOWithMatrix(edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy);
                //calculate the vertex position
                vertexUV = (vertexUV * vboSizeofMesh3D[this->vboWithMatrixType]) + 9u;
                break;
            case edk::GU::vbo_XY_RGB_NxNyNz:
                //change the vertexBuffer
                this->changeVBOWithMatrix(edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy);
                //calculate the vertex position
                vertexUV = (vertexUV * vboSizeofMesh3D[this->vboWithMatrixType]) + 9u;
                break;
            case edk::GU::vbo_XY_RGBA_NxNyNz:
                //change the vertexBuffer
                this->changeVBOWithMatrix(edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy);
                //calculate the vertex position
                vertexUV = (vertexUV * vboSizeofMesh3D[this->vboWithMatrixType]) + 9u;
                break;
            case edk::GU::vbo_XY_RGB_NxNyNz_UVxUVy:
                //change the vertexBuffer
                this->changeVBOWithMatrix(edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy);
                //calculate the vertex position
                vertexUV = (vertexUV * vboSizeofMesh3D[this->vboWithMatrixType]) + 9u;
                break;
            case edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy:
                //calculate the vertex position
                vertexUV = (vertexUV * vboSizeofMesh3D[this->vboWithMatrixType]) + 9u;
                break;
            case edk::GU::vbo_XYZ:
                //change the vertexBuffer
                this->changeVBOWithMatrix(edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy);
                //calculate the vertex position
                vertexUV = (vertexUV * vboSizeofMesh3D[this->vboWithMatrixType]) + 10u;
                break;
            case edk::GU::vbo_XYZ_NxNyNz:
                //change the vertexBuffer
                this->changeVBOWithMatrix(edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy);
                //calculate the vertex position
                vertexUV = (vertexUV * vboSizeofMesh3D[this->vboWithMatrixType]) + 10u;
                break;
            case edk::GU::vbo_XYZ_RGB:
                //change the vertexBuffer
                this->changeVBOWithMatrix(edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy);
                //calculate the vertex position
                vertexUV = (vertexUV * vboSizeofMesh3D[this->vboWithMatrixType]) + 10u;
                break;
            case edk::GU::vbo_XYZ_RGBA:
                //change the vertexBuffer
                this->changeVBOWithMatrix(edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy);
                //calculate the vertex position
                vertexUV = (vertexUV * vboSizeofMesh3D[this->vboWithMatrixType]) + 10u;
                break;
            case edk::GU::vbo_XYZ_RGB_NxNyNz:
                //change the vertexBuffer
                this->changeVBOWithMatrix(edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy);
                //calculate the vertex position
                vertexUV = (vertexUV * vboSizeofMesh3D[this->vboWithMatrixType]) + 10u;
                break;
            case edk::GU::vbo_XYZ_RGBA_NxNyNz:
                //change the vertexBuffer
                this->changeVBOWithMatrix(edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy);
                //calculate the vertex position
                vertexUV = (vertexUV * vboSizeofMesh3D[this->vboWithMatrixType]) + 10u;
                break;
            case edk::GU::vbo_XYZ_RGB_NxNyNz_UVxUVy:
                //change the vertexBuffer
                this->changeVBOWithMatrix(edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy);
                //calculate the vertex position
                vertexUV = (vertexUV * vboSizeofMesh3D[this->vboWithMatrixType]) + 10u;
                break;
            case edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy:
                //calculate the vertex position
                vertexUV = (vertexUV * vboSizeofMesh3D[this->vboWithMatrixType]) + 10u;
                break;
            default:
                break;
            }

            vTemp = (edk::shape::Vertex3DWithUV*)this->vertexs.getNoIF(i);
            if(vTemp->getType() != EDK_SHAPE_NOUV){
                uv = vTemp->getUV();
            }
            else{
                uv = edk::vec2f32(0.f,0.f);
            }

            //set the position
            this->vertexBuffer.set(vertexUV,uv.x);
            vertexUV++;
            this->vertexBuffer.set(vertexUV,uv.y);

            ret=true;
        }
    }
    if(ret){
        //update the VBO
        this->updateVBOFunctionsWithMatrix();
    }
    return ret;
}
bool edk::shape::Polygon3DList::updateVBOUVWithMatrix(){
    bool ret=false;
    if(this->haveVBO() && this->vertexBufferWithMatrix.haveArray()){
        edk::uint32 size = this->vertexs.size();
        edk::shape::Vertex3DWithUV* vTemp;
        edk::uint32 vertexUV;
        edk::vec2f32 uv;
        for(edk::uint32 i=0u;i<size;i++){
            vertexUV = i;


            //set the vertex position in vertexBuffer
            //test if need change the buffer
            switch(this->vboWithMatrixType){
            case edk::GU::vbo_XY:
                //change the vertexBuffer
                this->changeVBO(edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy);
                //calculate the vertex position
                vertexUV = (vertexUV * vboSizeofMesh3D[this->vboWithMatrixType]) + 9u;
                break;
            case edk::GU::vbo_XY_NxNyNz:
                //change the vertexBuffer
                this->changeVBO(edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy);
                //calculate the vertex position
                vertexUV = (vertexUV * vboSizeofMesh3D[this->vboWithMatrixType]) + 9u;
                break;
            case edk::GU::vbo_XY_RGB:
                //change the vertexBuffer
                this->changeVBO(edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy);
                //calculate the vertex position
                vertexUV = (vertexUV * vboSizeofMesh3D[this->vboWithMatrixType]) + 9u;
                break;
            case edk::GU::vbo_XY_RGBA:
                //change the vertexBuffer
                this->changeVBO(edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy);
                //calculate the vertex position
                vertexUV = (vertexUV * vboSizeofMesh3D[this->vboWithMatrixType]) + 9u;
                break;
            case edk::GU::vbo_XY_RGB_NxNyNz:
                //change the vertexBuffer
                this->changeVBO(edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy);
                //calculate the vertex position
                vertexUV = (vertexUV * vboSizeofMesh3D[this->vboWithMatrixType]) + 9u;
                break;
            case edk::GU::vbo_XY_RGBA_NxNyNz:
                //change the vertexBuffer
                this->changeVBO(edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy);
                //calculate the vertex position
                vertexUV = (vertexUV * vboSizeofMesh3D[this->vboWithMatrixType]) + 9u;
                break;
            case edk::GU::vbo_XY_RGB_NxNyNz_UVxUVy:
                //change the vertexBuffer
                this->changeVBO(edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy);
                //calculate the vertex position
                vertexUV = (vertexUV * vboSizeofMesh3D[this->vboWithMatrixType]) + 9u;
                break;
            case edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy:
                //calculate the vertex position
                vertexUV = (vertexUV * vboSizeofMesh3D[this->vboWithMatrixType]) + 9u;
                break;
            case edk::GU::vbo_XYZ:
                //change the vertexBuffer
                this->changeVBO(edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy);
                //calculate the vertex position
                vertexUV = (vertexUV * vboSizeofMesh3D[this->vboWithMatrixType]) + 10u;
                break;
            case edk::GU::vbo_XYZ_NxNyNz:
                //change the vertexBuffer
                this->changeVBO(edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy);
                //calculate the vertex position
                vertexUV = (vertexUV * vboSizeofMesh3D[this->vboWithMatrixType]) + 10u;
                break;
            case edk::GU::vbo_XYZ_RGB:
                //change the vertexBuffer
                this->changeVBO(edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy);
                //calculate the vertex position
                vertexUV = (vertexUV * vboSizeofMesh3D[this->vboWithMatrixType]) + 10u;
                break;
            case edk::GU::vbo_XYZ_RGBA:
                //change the vertexBuffer
                this->changeVBO(edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy);
                //calculate the vertex position
                vertexUV = (vertexUV * vboSizeofMesh3D[this->vboWithMatrixType]) + 10u;
                break;
            case edk::GU::vbo_XYZ_RGB_NxNyNz:
                //change the vertexBuffer
                this->changeVBO(edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy);
                //calculate the vertex position
                vertexUV = (vertexUV * vboSizeofMesh3D[this->vboWithMatrixType]) + 10u;
                break;
            case edk::GU::vbo_XYZ_RGBA_NxNyNz:
                //change the vertexBuffer
                this->changeVBO(edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy);
                //calculate the vertex position
                vertexUV = (vertexUV * vboSizeofMesh3D[this->vboWithMatrixType]) + 10u;
                break;
            case edk::GU::vbo_XYZ_RGB_NxNyNz_UVxUVy:
                //change the vertexBuffer
                this->changeVBO(edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy);
                //calculate the vertex position
                vertexUV = (vertexUV * vboSizeofMesh3D[this->vboWithMatrixType]) + 10u;
                break;
            case edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy:
                //calculate the vertex position
                vertexUV = (vertexUV * vboSizeofMesh3D[this->vboWithMatrixType]) + 10u;
                break;
            default:
                break;
            }

            vTemp = (edk::shape::Vertex3DWithUV*)this->vertexs.getNoIF(i);
            if(vTemp->getType() != EDK_SHAPE_NOUV){
                uv = vTemp->getUV();
            }
            else{
                uv = edk::vec2f32(0.f,0.f);
            }

            //set the position
            this->vertexBufferWithMatrix.set(vertexUV,uv.x);
            vertexUV++;
            this->vertexBufferWithMatrix.set(vertexUV,uv.y);

            ret=true;
        }
    }
    if(ret){
        //update the VBO
        this->updateVBOFunctionsWithMatrix();
    }
    return ret;
}
bool edk::shape::Polygon3DList::updateVBOValues(){
    bool ret=false;
    if(this->haveVBO() && this->vertexBuffer.haveArray()){
        edk::uint32 size = this->vertexs.size();
        edk::shape::Vertex3DWithUV* vTemp;
        edk::uint32 vertexUV;
        edk::uint32 vertexPosition;
        edk::uint32 vertexColor;
        edk::uint32 vertexNormal;
        edk::vec2f32 uv;
        edk::vec3f32 position;
        edk::color4f32 color;
        edk::vec3f32 normal;
        for(edk::uint32 i=0u;i<size;i++){
            vertexPosition = vertexColor = vertexNormal = vertexUV = i;

            switch(this->vboType){
            case edk::GU::vbo_XY:
                //change the vertexBuffer
                this->changeVBO(edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy);
                //calculate the vertex position
                vertexPosition = (vertexPosition * vboSizeofMesh3D[this->vboType]) + 0u;
                vertexColor = (vertexColor * vboSizeofMesh3D[this->vboType]) + 2u;
                vertexNormal = (vertexNormal * vboSizeofMesh3D[this->vboType]) + 6u;
                vertexUV = (vertexUV * vboSizeofMesh3D[this->vboType]) + 9u;
                break;
            case edk::GU::vbo_XY_NxNyNz:
                //change the vertexBuffer
                this->changeVBO(edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy);
                //calculate the vertex position
                vertexPosition = (vertexPosition * vboSizeofMesh3D[this->vboType]) + 0u;
                vertexColor = (vertexColor * vboSizeofMesh3D[this->vboType]) + 2u;
                vertexNormal = (vertexNormal * vboSizeofMesh3D[this->vboType]) + 6u;
                vertexUV = (vertexUV * vboSizeofMesh3D[this->vboType]) + 9u;
                break;
            case edk::GU::vbo_XY_RGB:
                //change the vertexBuffer
                this->changeVBO(edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy);
                //calculate the vertex position
                vertexPosition = (vertexPosition * vboSizeofMesh3D[this->vboType]) + 0u;
                vertexColor = (vertexColor * vboSizeofMesh3D[this->vboType]) + 2u;
                vertexNormal = (vertexNormal * vboSizeofMesh3D[this->vboType]) + 6u;
                vertexUV = (vertexUV * vboSizeofMesh3D[this->vboType]) + 9u;
                break;
            case edk::GU::vbo_XY_RGBA:
                //change the vertexBuffer
                this->changeVBO(edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy);
                //calculate the vertex position
                vertexPosition = (vertexPosition * vboSizeofMesh3D[this->vboType]) + 0u;
                vertexColor = (vertexColor * vboSizeofMesh3D[this->vboType]) + 2u;
                vertexNormal = (vertexNormal * vboSizeofMesh3D[this->vboType]) + 6u;
                vertexUV = (vertexUV * vboSizeofMesh3D[this->vboType]) + 9u;
                break;
            case edk::GU::vbo_XY_RGB_NxNyNz:
                //change the vertexBuffer
                this->changeVBO(edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy);
                //calculate the vertex position
                vertexPosition = (vertexPosition * vboSizeofMesh3D[this->vboType]) + 0u;
                vertexColor = (vertexColor * vboSizeofMesh3D[this->vboType]) + 2u;
                vertexNormal = (vertexNormal * vboSizeofMesh3D[this->vboType]) + 6u;
                vertexUV = (vertexUV * vboSizeofMesh3D[this->vboType]) + 9u;
                break;
            case edk::GU::vbo_XY_RGBA_NxNyNz:
                //change the vertexBuffer
                this->changeVBO(edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy);
                //calculate the vertex position
                vertexPosition = (vertexPosition * vboSizeofMesh3D[this->vboType]) + 0u;
                vertexColor = (vertexColor * vboSizeofMesh3D[this->vboType]) + 2u;
                vertexNormal = (vertexNormal * vboSizeofMesh3D[this->vboType]) + 6u;
                vertexUV = (vertexUV * vboSizeofMesh3D[this->vboType]) + 9u;
                break;
            case edk::GU::vbo_XY_RGB_NxNyNz_UVxUVy:
                //change the vertexBuffer
                this->changeVBO(edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy);
                //calculate the vertex position
                vertexPosition = (vertexPosition * vboSizeofMesh3D[this->vboType]) + 0u;
                vertexColor = (vertexColor * vboSizeofMesh3D[this->vboType]) + 2u;
                vertexNormal = (vertexNormal * vboSizeofMesh3D[this->vboType]) + 6u;
                vertexUV = (vertexUV * vboSizeofMesh3D[this->vboType]) + 9u;
                break;
            case edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy:
                //calculate the vertex position
                vertexPosition = (vertexPosition * vboSizeofMesh3D[this->vboType]) + 0u;
                vertexColor = (vertexColor * vboSizeofMesh3D[this->vboType]) + 2u;
                vertexNormal = (vertexNormal * vboSizeofMesh3D[this->vboType]) + 6u;
                vertexUV = (vertexUV * vboSizeofMesh3D[this->vboType]) + 9u;
                break;
            case edk::GU::vbo_XYZ:
                //change the vertexBuffer
                this->changeVBO(edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy);
                //calculate the vertex position
                vertexPosition = (vertexPosition * vboSizeofMesh3D[this->vboType]) + 0u;
                vertexColor = (vertexColor * vboSizeofMesh3D[this->vboType]) + 3u;
                vertexNormal = (vertexNormal * vboSizeofMesh3D[this->vboType]) + 7u;
                vertexUV = (vertexUV * vboSizeofMesh3D[this->vboType]) + 10u;
                break;
            case edk::GU::vbo_XYZ_NxNyNz:
                //change the vertexBuffer
                this->changeVBO(edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy);
                //calculate the vertex position
                vertexPosition = (vertexPosition * vboSizeofMesh3D[this->vboType]) + 0u;
                vertexColor = (vertexColor * vboSizeofMesh3D[this->vboType]) + 3u;
                vertexNormal = (vertexNormal * vboSizeofMesh3D[this->vboType]) + 7u;
                vertexUV = (vertexUV * vboSizeofMesh3D[this->vboType]) + 10u;
                break;
            case edk::GU::vbo_XYZ_RGB:
                //change the vertexBuffer
                this->changeVBO(edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy);
                //calculate the vertex position
                vertexPosition = (vertexPosition * vboSizeofMesh3D[this->vboType]) + 0u;
                vertexColor = (vertexColor * vboSizeofMesh3D[this->vboType]) + 3u;
                vertexNormal = (vertexNormal * vboSizeofMesh3D[this->vboType]) + 7u;
                vertexUV = (vertexUV * vboSizeofMesh3D[this->vboType]) + 10u;
                break;
            case edk::GU::vbo_XYZ_RGBA:
                //change the vertexBuffer
                this->changeVBO(edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy);
                //calculate the vertex position
                vertexPosition = (vertexPosition * vboSizeofMesh3D[this->vboType]) + 0u;
                vertexColor = (vertexColor * vboSizeofMesh3D[this->vboType]) + 3u;
                vertexNormal = (vertexNormal * vboSizeofMesh3D[this->vboType]) + 7u;
                vertexUV = (vertexUV * vboSizeofMesh3D[this->vboType]) + 10u;
                break;
            case edk::GU::vbo_XYZ_RGB_NxNyNz:
                //change the vertexBuffer
                this->changeVBO(edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy);
                //calculate the vertex position
                vertexPosition = (vertexPosition * vboSizeofMesh3D[this->vboType]) + 0u;
                vertexColor = (vertexColor * vboSizeofMesh3D[this->vboType]) + 3u;
                vertexNormal = (vertexNormal * vboSizeofMesh3D[this->vboType]) + 7u;
                vertexUV = (vertexUV * vboSizeofMesh3D[this->vboType]) + 10u;
                break;
            case edk::GU::vbo_XYZ_RGBA_NxNyNz:
                //change the vertexBuffer
                this->changeVBO(edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy);
                //calculate the vertex position
                vertexPosition = (vertexPosition * vboSizeofMesh3D[this->vboType]) + 0u;
                vertexColor = (vertexColor * vboSizeofMesh3D[this->vboType]) + 3u;
                vertexNormal = (vertexNormal * vboSizeofMesh3D[this->vboType]) + 7u;
                vertexUV = (vertexUV * vboSizeofMesh3D[this->vboType]) + 10u;
                break;
            case edk::GU::vbo_XYZ_RGB_NxNyNz_UVxUVy:
                //change the vertexBuffer
                this->changeVBO(edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy);
                //calculate the vertex position
                vertexPosition = (vertexPosition * vboSizeofMesh3D[this->vboType]) + 0u;
                vertexColor = (vertexColor * vboSizeofMesh3D[this->vboType]) + 3u;
                vertexNormal = (vertexNormal * vboSizeofMesh3D[this->vboType]) + 7u;
                vertexUV = (vertexUV * vboSizeofMesh3D[this->vboType]) + 10u;
                break;
            case edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy:
                //calculate the vertex position
                vertexPosition = (vertexPosition * vboSizeofMesh3D[this->vboType]) + 0u;
                vertexColor = (vertexColor * vboSizeofMesh3D[this->vboType]) + 3u;
                vertexNormal = (vertexNormal * vboSizeofMesh3D[this->vboType]) + 7u;
                vertexUV = (vertexUV * vboSizeofMesh3D[this->vboType]) + 10u;
                break;
            default:
                break;
            }
            vTemp = (edk::shape::Vertex3DWithUV*)this->vertexs.getNoIF(i);
            if(vTemp->getType() != EDK_SHAPE_NOUV){
                uv = vTemp->getUV();
                position = vTemp->position;
                color = vTemp->color;
                normal = vTemp->normal;
            }
            else{
                position = vTemp->position;
                color = vTemp->color;
                normal = vTemp->normal;
                uv = edk::vec2f32(0.f,0.f);
            }
            //set the position
            this->vertexBuffer.set(vertexPosition,position.x);
            vertexPosition++;
            this->vertexBuffer.set(vertexPosition,position.y);
            vertexPosition++;
            this->vertexBuffer.set(vertexPosition,position.z);
            //set the Color
            this->vertexBuffer.set(vertexColor,color.r);
            vertexColor++;
            this->vertexBuffer.set(vertexColor,color.g);
            vertexColor++;
            this->vertexBuffer.set(vertexColor,color.b);
            vertexColor++;
            this->vertexBuffer.set(vertexColor,color.a);
            //normal
            this->vertexBuffer.set(vertexNormal,normal.x);
            vertexNormal++;
            this->vertexBuffer.set(vertexNormal,normal.y);
            vertexNormal++;
            this->vertexBuffer.set(vertexNormal,normal.z);
            //set the UV
            this->vertexBuffer.set(vertexUV,uv.x);
            vertexUV++;
            this->vertexBuffer.set(vertexUV,uv.y);

            ret = true;
        }
    }
    if(ret){
        //update the VBO
        this->updateVBOFunctions();
    }
    return ret;
}
bool edk::shape::Polygon3DList::updateVBOValuesWithMatrices(){
    bool ret=false;
    if(this->haveVBO() && this->vertexBufferWithMatrix.haveArray()){
        edk::uint32 size = this->vertexsWithMatrix.size();
        edk::shape::Vertex3DWithUV* vTemp;
        edk::uint32 vertexUV;
        edk::uint32 vertexPosition;
        edk::uint32 vertexColor;
        edk::uint32 vertexNormal;
        edk::vec2f32 uv;
        edk::vec3f32 position;
        edk::color4f32 color;
        edk::vec3f32 normal;
        for(edk::uint32 i=0u;i<size;i++){
            vertexPosition = vertexColor = vertexNormal = vertexUV = i;

            switch(this->vboWithMatrixType){
            case edk::GU::vbo_XY:
                //change the vertexBuffer
                this->changeVBO(edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy);
                //calculate the vertex position
                vertexPosition = (vertexPosition * vboSizeofMesh3D[this->vboWithMatrixType]) + 0u;
                vertexColor = (vertexColor * vboSizeofMesh3D[this->vboWithMatrixType]) + 2u;
                vertexNormal = (vertexNormal * vboSizeofMesh3D[this->vboWithMatrixType]) + 6u;
                vertexUV = (vertexUV * vboSizeofMesh3D[this->vboWithMatrixType]) + 9u;
                break;
            case edk::GU::vbo_XY_NxNyNz:
                //change the vertexBuffer
                this->changeVBO(edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy);
                //calculate the vertex position
                vertexPosition = (vertexPosition * vboSizeofMesh3D[this->vboWithMatrixType]) + 0u;
                vertexColor = (vertexColor * vboSizeofMesh3D[this->vboWithMatrixType]) + 2u;
                vertexNormal = (vertexNormal * vboSizeofMesh3D[this->vboWithMatrixType]) + 6u;
                vertexUV = (vertexUV * vboSizeofMesh3D[this->vboWithMatrixType]) + 9u;
                break;
            case edk::GU::vbo_XY_RGB:
                //change the vertexBuffer
                this->changeVBO(edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy);
                //calculate the vertex position
                vertexPosition = (vertexPosition * vboSizeofMesh3D[this->vboWithMatrixType]) + 0u;
                vertexColor = (vertexColor * vboSizeofMesh3D[this->vboWithMatrixType]) + 2u;
                vertexNormal = (vertexNormal * vboSizeofMesh3D[this->vboWithMatrixType]) + 6u;
                vertexUV = (vertexUV * vboSizeofMesh3D[this->vboWithMatrixType]) + 9u;
                break;
            case edk::GU::vbo_XY_RGBA:
                //change the vertexBuffer
                this->changeVBO(edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy);
                //calculate the vertex position
                vertexPosition = (vertexPosition * vboSizeofMesh3D[this->vboWithMatrixType]) + 0u;
                vertexColor = (vertexColor * vboSizeofMesh3D[this->vboWithMatrixType]) + 2u;
                vertexNormal = (vertexNormal * vboSizeofMesh3D[this->vboWithMatrixType]) + 6u;
                vertexUV = (vertexUV * vboSizeofMesh3D[this->vboWithMatrixType]) + 9u;
                break;
            case edk::GU::vbo_XY_RGB_NxNyNz:
                //change the vertexBuffer
                this->changeVBO(edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy);
                //calculate the vertex position
                vertexPosition = (vertexPosition * vboSizeofMesh3D[this->vboWithMatrixType]) + 0u;
                vertexColor = (vertexColor * vboSizeofMesh3D[this->vboWithMatrixType]) + 2u;
                vertexNormal = (vertexNormal * vboSizeofMesh3D[this->vboWithMatrixType]) + 6u;
                vertexUV = (vertexUV * vboSizeofMesh3D[this->vboWithMatrixType]) + 9u;
                break;
            case edk::GU::vbo_XY_RGBA_NxNyNz:
                //change the vertexBuffer
                this->changeVBO(edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy);
                //calculate the vertex position
                vertexPosition = (vertexPosition * vboSizeofMesh3D[this->vboWithMatrixType]) + 0u;
                vertexColor = (vertexColor * vboSizeofMesh3D[this->vboWithMatrixType]) + 2u;
                vertexNormal = (vertexNormal * vboSizeofMesh3D[this->vboWithMatrixType]) + 6u;
                vertexUV = (vertexUV * vboSizeofMesh3D[this->vboWithMatrixType]) + 9u;
                break;
            case edk::GU::vbo_XY_RGB_NxNyNz_UVxUVy:
                //change the vertexBuffer
                this->changeVBO(edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy);
                //calculate the vertex position
                vertexPosition = (vertexPosition * vboSizeofMesh3D[this->vboWithMatrixType]) + 0u;
                vertexColor = (vertexColor * vboSizeofMesh3D[this->vboWithMatrixType]) + 2u;
                vertexNormal = (vertexNormal * vboSizeofMesh3D[this->vboWithMatrixType]) + 6u;
                vertexUV = (vertexUV * vboSizeofMesh3D[this->vboWithMatrixType]) + 9u;
                break;
            case edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy:
                //calculate the vertex position
                vertexPosition = (vertexPosition * vboSizeofMesh3D[this->vboWithMatrixType]) + 0u;
                vertexColor = (vertexColor * vboSizeofMesh3D[this->vboWithMatrixType]) + 2u;
                vertexNormal = (vertexNormal * vboSizeofMesh3D[this->vboWithMatrixType]) + 6u;
                vertexUV = (vertexUV * vboSizeofMesh3D[this->vboWithMatrixType]) + 9u;
                break;
            case edk::GU::vbo_XYZ:
                //change the vertexBuffer
                this->changeVBO(edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy);
                //calculate the vertex position
                vertexPosition = (vertexPosition * vboSizeofMesh3D[this->vboWithMatrixType]) + 0u;
                vertexColor = (vertexColor * vboSizeofMesh3D[this->vboWithMatrixType]) + 3u;
                vertexNormal = (vertexNormal * vboSizeofMesh3D[this->vboWithMatrixType]) + 7u;
                vertexUV = (vertexUV * vboSizeofMesh3D[this->vboWithMatrixType]) + 10u;
                break;
            case edk::GU::vbo_XYZ_NxNyNz:
                //change the vertexBuffer
                this->changeVBO(edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy);
                //calculate the vertex position
                vertexPosition = (vertexPosition * vboSizeofMesh3D[this->vboWithMatrixType]) + 0u;
                vertexColor = (vertexColor * vboSizeofMesh3D[this->vboWithMatrixType]) + 3u;
                vertexNormal = (vertexNormal * vboSizeofMesh3D[this->vboWithMatrixType]) + 7u;
                vertexUV = (vertexUV * vboSizeofMesh3D[this->vboWithMatrixType]) + 10u;
                break;
            case edk::GU::vbo_XYZ_RGB:
                //change the vertexBuffer
                this->changeVBO(edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy);
                //calculate the vertex position
                vertexPosition = (vertexPosition * vboSizeofMesh3D[this->vboWithMatrixType]) + 0u;
                vertexColor = (vertexColor * vboSizeofMesh3D[this->vboWithMatrixType]) + 3u;
                vertexNormal = (vertexNormal * vboSizeofMesh3D[this->vboWithMatrixType]) + 7u;
                vertexUV = (vertexUV * vboSizeofMesh3D[this->vboWithMatrixType]) + 10u;
                break;
            case edk::GU::vbo_XYZ_RGBA:
                //change the vertexBuffer
                this->changeVBO(edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy);
                //calculate the vertex position
                vertexPosition = (vertexPosition * vboSizeofMesh3D[this->vboWithMatrixType]) + 0u;
                vertexColor = (vertexColor * vboSizeofMesh3D[this->vboWithMatrixType]) + 3u;
                vertexNormal = (vertexNormal * vboSizeofMesh3D[this->vboWithMatrixType]) + 7u;
                vertexUV = (vertexUV * vboSizeofMesh3D[this->vboWithMatrixType]) + 10u;
                break;
            case edk::GU::vbo_XYZ_RGB_NxNyNz:
                //change the vertexBuffer
                this->changeVBO(edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy);
                //calculate the vertex position
                vertexPosition = (vertexPosition * vboSizeofMesh3D[this->vboWithMatrixType]) + 0u;
                vertexColor = (vertexColor * vboSizeofMesh3D[this->vboWithMatrixType]) + 3u;
                vertexNormal = (vertexNormal * vboSizeofMesh3D[this->vboWithMatrixType]) + 7u;
                vertexUV = (vertexUV * vboSizeofMesh3D[this->vboWithMatrixType]) + 10u;
                break;
            case edk::GU::vbo_XYZ_RGBA_NxNyNz:
                //change the vertexBuffer
                this->changeVBO(edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy);
                //calculate the vertex position
                vertexPosition = (vertexPosition * vboSizeofMesh3D[this->vboWithMatrixType]) + 0u;
                vertexColor = (vertexColor * vboSizeofMesh3D[this->vboWithMatrixType]) + 3u;
                vertexNormal = (vertexNormal * vboSizeofMesh3D[this->vboWithMatrixType]) + 7u;
                vertexUV = (vertexUV * vboSizeofMesh3D[this->vboWithMatrixType]) + 10u;
                break;
            case edk::GU::vbo_XYZ_RGB_NxNyNz_UVxUVy:
                //change the vertexBuffer
                this->changeVBO(edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy);
                //calculate the vertex position
                vertexPosition = (vertexPosition * vboSizeofMesh3D[this->vboWithMatrixType]) + 0u;
                vertexColor = (vertexColor * vboSizeofMesh3D[this->vboWithMatrixType]) + 3u;
                vertexNormal = (vertexNormal * vboSizeofMesh3D[this->vboWithMatrixType]) + 7u;
                vertexUV = (vertexUV * vboSizeofMesh3D[this->vboWithMatrixType]) + 10u;
                break;
            case edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy:
                //calculate the vertex position
                vertexPosition = (vertexPosition * vboSizeofMesh3D[this->vboWithMatrixType]) + 0u;
                vertexColor = (vertexColor * vboSizeofMesh3D[this->vboWithMatrixType]) + 3u;
                vertexNormal = (vertexNormal * vboSizeofMesh3D[this->vboWithMatrixType]) + 7u;
                vertexUV = (vertexUV * vboSizeofMesh3D[this->vboWithMatrixType]) + 10u;
                break;
            default:
                break;
            }
            vTemp = (edk::shape::Vertex3DWithUV*)this->vertexsWithMatrix.getNoIF(i);
            if(vTemp->getType() != EDK_SHAPE_NOUV){
                uv = vTemp->getUV();
                position = vTemp->position;
                color = vTemp->color;
                normal = vTemp->normal;
            }
            else{
                position = vTemp->position;
                color = vTemp->color;
                normal = vTemp->normal;
                uv = edk::vec2f32(0.f,0.f);
            }
            //set the position
            this->vertexBufferWithMatrix.set(vertexPosition,position.x);
            vertexPosition++;
            this->vertexBufferWithMatrix.set(vertexPosition,position.y);
            vertexPosition++;
            this->vertexBufferWithMatrix.set(vertexPosition,position.z);
            //set the Color
            this->vertexBufferWithMatrix.set(vertexColor,color.r);
            vertexColor++;
            this->vertexBufferWithMatrix.set(vertexColor,color.g);
            vertexColor++;
            this->vertexBufferWithMatrix.set(vertexColor,color.b);
            vertexColor++;
            this->vertexBufferWithMatrix.set(vertexColor,color.a);
            //normal
            this->vertexBufferWithMatrix.set(vertexNormal,normal.x);
            vertexNormal++;
            this->vertexBufferWithMatrix.set(vertexNormal,normal.y);
            vertexNormal++;
            this->vertexBufferWithMatrix.set(vertexNormal,normal.z);
            //set the UV
            this->vertexBufferWithMatrix.set(vertexUV,uv.x);
            vertexUV++;
            this->vertexBufferWithMatrix.set(vertexUV,uv.y);

            ret = true;
        }
    }
    if(ret){
        //update the VBO
        this->updateVBOFunctions();
    }
    return ret;
}
bool edk::shape::Polygon3DList::updateVBOWireValues(){
    bool ret=false;
    if(this->haveVBO() && this->vertexBufferWire.haveArray()){
        edk::uint32 size = this->vertexsWire.size();
        edk::shape::Vertex3DWithUV* vTemp;
        edk::uint32 vertexUV;
        edk::uint32 vertexPosition;
        edk::uint32 vertexColor;
        edk::uint32 vertexNormal;
        edk::vec2f32 uv;
        edk::vec3f32 position;
        edk::color4f32 color;
        edk::vec3f32 normal;
        for(edk::uint32 i=0u;i<size;i++){
            vertexPosition = vertexColor = vertexNormal = vertexUV = i;

            switch(this->vboWireType){
            case edk::GU::vbo_XY:
                //change the vertexBufferWire
                this->changeVBO(edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy);
                //calculate the vertex position
                vertexPosition = (vertexPosition * vboSizeofMesh3D[this->vboWireType]) + 0u;
                vertexColor = (vertexColor * vboSizeofMesh3D[this->vboWireType]) + 2u;
                vertexNormal = (vertexNormal * vboSizeofMesh3D[this->vboWireType]) + 6u;
                vertexUV = (vertexUV * vboSizeofMesh3D[this->vboWireType]) + 9u;
                break;
            case edk::GU::vbo_XY_NxNyNz:
                //change the vertexBufferWire
                this->changeVBO(edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy);
                //calculate the vertex position
                vertexPosition = (vertexPosition * vboSizeofMesh3D[this->vboWireType]) + 0u;
                vertexColor = (vertexColor * vboSizeofMesh3D[this->vboWireType]) + 2u;
                vertexNormal = (vertexNormal * vboSizeofMesh3D[this->vboWireType]) + 6u;
                vertexUV = (vertexUV * vboSizeofMesh3D[this->vboWireType]) + 9u;
                break;
            case edk::GU::vbo_XY_RGB:
                //change the vertexBufferWire
                this->changeVBO(edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy);
                //calculate the vertex position
                vertexPosition = (vertexPosition * vboSizeofMesh3D[this->vboWireType]) + 0u;
                vertexColor = (vertexColor * vboSizeofMesh3D[this->vboWireType]) + 2u;
                vertexNormal = (vertexNormal * vboSizeofMesh3D[this->vboWireType]) + 6u;
                vertexUV = (vertexUV * vboSizeofMesh3D[this->vboWireType]) + 9u;
                break;
            case edk::GU::vbo_XY_RGBA:
                //change the vertexBufferWire
                this->changeVBO(edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy);
                //calculate the vertex position
                vertexPosition = (vertexPosition * vboSizeofMesh3D[this->vboWireType]) + 0u;
                vertexColor = (vertexColor * vboSizeofMesh3D[this->vboWireType]) + 2u;
                vertexNormal = (vertexNormal * vboSizeofMesh3D[this->vboWireType]) + 6u;
                vertexUV = (vertexUV * vboSizeofMesh3D[this->vboWireType]) + 9u;
                break;
            case edk::GU::vbo_XY_RGB_NxNyNz:
                //change the vertexBufferWire
                this->changeVBO(edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy);
                //calculate the vertex position
                vertexPosition = (vertexPosition * vboSizeofMesh3D[this->vboWireType]) + 0u;
                vertexColor = (vertexColor * vboSizeofMesh3D[this->vboWireType]) + 2u;
                vertexNormal = (vertexNormal * vboSizeofMesh3D[this->vboWireType]) + 6u;
                vertexUV = (vertexUV * vboSizeofMesh3D[this->vboWireType]) + 9u;
                break;
            case edk::GU::vbo_XY_RGBA_NxNyNz:
                //change the vertexBufferWire
                this->changeVBO(edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy);
                //calculate the vertex position
                vertexPosition = (vertexPosition * vboSizeofMesh3D[this->vboWireType]) + 0u;
                vertexColor = (vertexColor * vboSizeofMesh3D[this->vboWireType]) + 2u;
                vertexNormal = (vertexNormal * vboSizeofMesh3D[this->vboWireType]) + 6u;
                vertexUV = (vertexUV * vboSizeofMesh3D[this->vboWireType]) + 9u;
                break;
            case edk::GU::vbo_XY_RGB_NxNyNz_UVxUVy:
                //change the vertexBufferWire
                this->changeVBO(edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy);
                //calculate the vertex position
                vertexPosition = (vertexPosition * vboSizeofMesh3D[this->vboWireType]) + 0u;
                vertexColor = (vertexColor * vboSizeofMesh3D[this->vboWireType]) + 2u;
                vertexNormal = (vertexNormal * vboSizeofMesh3D[this->vboWireType]) + 6u;
                vertexUV = (vertexUV * vboSizeofMesh3D[this->vboWireType]) + 9u;
                break;
            case edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy:
                //calculate the vertex position
                vertexPosition = (vertexPosition * vboSizeofMesh3D[this->vboWireType]) + 0u;
                vertexColor = (vertexColor * vboSizeofMesh3D[this->vboWireType]) + 2u;
                vertexNormal = (vertexNormal * vboSizeofMesh3D[this->vboWireType]) + 6u;
                vertexUV = (vertexUV * vboSizeofMesh3D[this->vboWireType]) + 9u;
                break;
            case edk::GU::vbo_XYZ:
                //change the vertexBufferWire
                this->changeVBO(edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy);
                //calculate the vertex position
                vertexPosition = (vertexPosition * vboSizeofMesh3D[this->vboWireType]) + 0u;
                vertexColor = (vertexColor * vboSizeofMesh3D[this->vboWireType]) + 3u;
                vertexNormal = (vertexNormal * vboSizeofMesh3D[this->vboWireType]) + 7u;
                vertexUV = (vertexUV * vboSizeofMesh3D[this->vboWireType]) + 10u;
                break;
            case edk::GU::vbo_XYZ_NxNyNz:
                //change the vertexBufferWire
                this->changeVBO(edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy);
                //calculate the vertex position
                vertexPosition = (vertexPosition * vboSizeofMesh3D[this->vboWireType]) + 0u;
                vertexColor = (vertexColor * vboSizeofMesh3D[this->vboWireType]) + 3u;
                vertexNormal = (vertexNormal * vboSizeofMesh3D[this->vboWireType]) + 7u;
                vertexUV = (vertexUV * vboSizeofMesh3D[this->vboWireType]) + 10u;
                break;
            case edk::GU::vbo_XYZ_RGB:
                //change the vertexBufferWire
                this->changeVBO(edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy);
                //calculate the vertex position
                vertexPosition = (vertexPosition * vboSizeofMesh3D[this->vboWireType]) + 0u;
                vertexColor = (vertexColor * vboSizeofMesh3D[this->vboWireType]) + 3u;
                vertexNormal = (vertexNormal * vboSizeofMesh3D[this->vboWireType]) + 7u;
                vertexUV = (vertexUV * vboSizeofMesh3D[this->vboWireType]) + 10u;
                break;
            case edk::GU::vbo_XYZ_RGBA:
                //change the vertexBufferWire
                this->changeVBO(edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy);
                //calculate the vertex position
                vertexPosition = (vertexPosition * vboSizeofMesh3D[this->vboWireType]) + 0u;
                vertexColor = (vertexColor * vboSizeofMesh3D[this->vboWireType]) + 3u;
                vertexNormal = (vertexNormal * vboSizeofMesh3D[this->vboWireType]) + 7u;
                vertexUV = (vertexUV * vboSizeofMesh3D[this->vboWireType]) + 10u;
                break;
            case edk::GU::vbo_XYZ_RGB_NxNyNz:
                //change the vertexBufferWire
                this->changeVBO(edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy);
                //calculate the vertex position
                vertexPosition = (vertexPosition * vboSizeofMesh3D[this->vboWireType]) + 0u;
                vertexColor = (vertexColor * vboSizeofMesh3D[this->vboWireType]) + 3u;
                vertexNormal = (vertexNormal * vboSizeofMesh3D[this->vboWireType]) + 7u;
                vertexUV = (vertexUV * vboSizeofMesh3D[this->vboWireType]) + 10u;
                break;
            case edk::GU::vbo_XYZ_RGBA_NxNyNz:
                //change the vertexBufferWire
                this->changeVBO(edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy);
                //calculate the vertex position
                vertexPosition = (vertexPosition * vboSizeofMesh3D[this->vboWireType]) + 0u;
                vertexColor = (vertexColor * vboSizeofMesh3D[this->vboWireType]) + 3u;
                vertexNormal = (vertexNormal * vboSizeofMesh3D[this->vboWireType]) + 7u;
                vertexUV = (vertexUV * vboSizeofMesh3D[this->vboWireType]) + 10u;
                break;
            case edk::GU::vbo_XYZ_RGB_NxNyNz_UVxUVy:
                //change the vertexBufferWire
                this->changeVBO(edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy);
                //calculate the vertex position
                vertexPosition = (vertexPosition * vboSizeofMesh3D[this->vboWireType]) + 0u;
                vertexColor = (vertexColor * vboSizeofMesh3D[this->vboWireType]) + 3u;
                vertexNormal = (vertexNormal * vboSizeofMesh3D[this->vboWireType]) + 7u;
                vertexUV = (vertexUV * vboSizeofMesh3D[this->vboWireType]) + 10u;
                break;
            case edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy:
                //calculate the vertex position
                vertexPosition = (vertexPosition * vboSizeofMesh3D[this->vboWireType]) + 0u;
                vertexColor = (vertexColor * vboSizeofMesh3D[this->vboWireType]) + 3u;
                vertexNormal = (vertexNormal * vboSizeofMesh3D[this->vboWireType]) + 7u;
                vertexUV = (vertexUV * vboSizeofMesh3D[this->vboWireType]) + 10u;
                break;
            default:
                break;
            }
            vTemp = (edk::shape::Vertex3DWithUV*)this->vertexsWire.getNoIF(i);
            if(vTemp->getType() != EDK_SHAPE_NOUV){
                uv = vTemp->getUV();
                position = vTemp->position;
                color = vTemp->color;
                normal = vTemp->normal;
            }
            else{
                position = vTemp->position;
                color = vTemp->color;
                normal = vTemp->normal;
                uv = edk::vec2f32(0.f,0.f);
            }
            //set the position
            this->vertexBufferWire.set(vertexPosition,position.x);
            vertexPosition++;
            this->vertexBufferWire.set(vertexPosition,position.y);
            vertexPosition++;
            this->vertexBufferWire.set(vertexPosition,position.z);
            //set the Color
            this->vertexBufferWire.set(vertexColor,color.r);
            vertexColor++;
            this->vertexBufferWire.set(vertexColor,color.g);
            vertexColor++;
            this->vertexBufferWire.set(vertexColor,color.b);
            vertexColor++;
            this->vertexBufferWire.set(vertexColor,color.a);
            //normal
            this->vertexBufferWire.set(vertexNormal,normal.x);
            vertexNormal++;
            this->vertexBufferWire.set(vertexNormal,normal.y);
            vertexNormal++;
            this->vertexBufferWire.set(vertexNormal,normal.z);
            //set the UV
            this->vertexBufferWire.set(vertexUV,uv.x);
            vertexUV++;
            this->vertexBufferWire.set(vertexUV,uv.y);

            ret = true;
        }
    }
    if(ret){
        //update the VBO
        this->updateVBOWireFunctions();
    }
    return ret;
}
//print the VBO
bool edk::shape::Polygon3DList::printVBO(){
    if(this->haveVBO() && this->vertexBuffer.haveArray()){
        edk::uint32 position=0u;
        edk::uint32 increment=vboSizeofMesh3D[this->vboType];
        //test if need change the buffer
        switch(this->vboType){
        case edk::GU::vbo_XY:
            printf("\nvbo_XY");
            break;
        case edk::GU::vbo_XY_NxNyNz:
            printf("\nvbo_XY_NxNyNz");
            break;
        case edk::GU::vbo_XY_RGB:
            printf("\nvbo_XY_RGB");
            break;
        case edk::GU::vbo_XY_RGBA:
            printf("\nvbo_XY_RGBA");
            break;
        case edk::GU::vbo_XY_RGB_NxNyNz:
            printf("\nvbo_XY_RGB_NxNyNz");
            break;
        case edk::GU::vbo_XY_RGBA_NxNyNz:
            printf("\nvbo_XY_RGBA_NxNyNz");
            break;
        case edk::GU::vbo_XY_RGB_NxNyNz_UVxUVy:
            printf("\nvbo_XY_RGB_NxNyNz_UVxUVy");
            break;
        case edk::GU::vbo_XY_RGBA_NxNyNz_UVxUVy:
            printf("\nvbo_XY_RGBA_NxNyNz_UVxUVy");
            break;
        case edk::GU::vbo_XYZ:
            printf("\nvbo_XYZ");
            break;
        case edk::GU::vbo_XYZ_NxNyNz:
            printf("\nvbo_XYZ_NxNyNz");
            break;
        case edk::GU::vbo_XYZ_RGB:
            printf("\nvbo_XYZ_RGB");
            break;
        case edk::GU::vbo_XYZ_RGBA:
            printf("\nvbo_XYZ_RGBA");
            break;
        case edk::GU::vbo_XYZ_RGB_NxNyNz:
            printf("\nvbo_XYZ_RGB_NxNyNz");
            break;
        case edk::GU::vbo_XYZ_RGBA_NxNyNz:
            printf("\nvbo_XYZ_RGBA_NxNyNz");
            break;
        case edk::GU::vbo_XYZ_RGB_NxNyNz_UVxUVy:
            printf("\nvbo_XYZ_RGB_NxNyNz_UVxUVy");
            break;
        case edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy:
            printf("\nvbo_XYZ_RGBA_NxNyNz_UVxUVy");
            break;
        default:
            break;
        }
        for(edk::uint32 i=0u;i<this->vboCount;i++){
            printf("\n");
            for(edk::uint32 j=0u;j<increment;j++){
                printf("[%.2f]",this->vertexBuffer.get(position));
                position++;
            }
        }fflush(stdout);
        return true;
    }
    return false;
}

//draw functions
//PRINT
void edk::shape::Polygon3DList::print_NULL(){
    //
    for(edk::uint32 i=0u;i<this->getVertexCount();i++){
        //
        if(vertexs.getNoIF(i)){
            vertexs.getNoIF(i)->print(i);
        }
    }
}
void edk::shape::Polygon3DList::print_XY(){
    edk::uint8 increment = vboSizeofMesh3D[this->vboType];
    edk::uint32 position = 0u;
    for(edk::uint32 i=0u;i<this->vboCount;i++){
        printf("\nVector [%u] position(%.2f %.2f)"
               ,i
               ,this->vertexBuffer.getNoIF(position)
               ,this->vertexBuffer.getNoIF(position+1u)
               );
        position+=increment;
    }fflush(stdout);
}
void edk::shape::Polygon3DList::print_XYZ(){
    edk::uint8 increment = vboSizeofMesh3D[this->vboType];
    edk::uint32 position = 0u;
    for(edk::uint32 i=0u;i<this->vboCount;i++){
        printf("\nVector [%u] position(%.2f %.2f %.2f)"
               ,i
               ,this->vertexBuffer.getNoIF(position)
               ,this->vertexBuffer.getNoIF(position+1u)
               ,this->vertexBuffer.getNoIF(position+2u)
               );
        position+=increment;
    }fflush(stdout);
}
void edk::shape::Polygon3DList::print_XY_NxNyNz(){
    edk::uint8 increment = vboSizeofMesh3D[this->vboType];
    edk::uint32 position = 0u;
    for(edk::uint32 i=0u;i<this->vboCount;i++){
        printf("\nVector [%u] position(%.2f %.2f) normal(%.2f %.2f %.2f)"
               ,i
               ,this->vertexBuffer.getNoIF(position)
               ,this->vertexBuffer.getNoIF(position+1u)

               ,this->vertexBuffer.getNoIF(position+2u)
               ,this->vertexBuffer.getNoIF(position+3u)
               ,this->vertexBuffer.getNoIF(position+4u)
               );
        position+=increment;
    }fflush(stdout);
}
void edk::shape::Polygon3DList::print_XYZ_NxNyNz(){
    edk::uint8 increment = vboSizeofMesh3D[this->vboType];
    edk::uint32 position = 0u;
    for(edk::uint32 i=0u;i<this->vboCount;i++){
        printf("\nVector [%u] position(%.2f %.2f %.2f) normal(%.2f %.2f %.2f)"
               ,i
               ,this->vertexBuffer.getNoIF(position)
               ,this->vertexBuffer.getNoIF(position+1u)
               ,this->vertexBuffer.getNoIF(position+2u)

               ,this->vertexBuffer.getNoIF(position+3u)
               ,this->vertexBuffer.getNoIF(position+4u)
               ,this->vertexBuffer.getNoIF(position+5u)
               );
        position+=increment;
    }fflush(stdout);
}
void edk::shape::Polygon3DList::print_XY_RGB(){
    edk::uint8 increment = vboSizeofMesh3D[this->vboType];
    edk::uint32 position = 0u;
    for(edk::uint32 i=0u;i<this->vboCount;i++){
        printf("\nVector [%u] position(%.2f %.2f) Color (%.2f %.2f %.2f)"
               ,i
               ,this->vertexBuffer.getNoIF(position)
               ,this->vertexBuffer.getNoIF(position+1u)

               ,this->vertexBuffer.getNoIF(position+2u)
               ,this->vertexBuffer.getNoIF(position+3u)
               ,this->vertexBuffer.getNoIF(position+4u)
               );
        position+=increment;
    }fflush(stdout);
}
void edk::shape::Polygon3DList::print_XYZ_RGB(){
    edk::uint8 increment = vboSizeofMesh3D[this->vboType];
    edk::uint32 position = 0u;
    for(edk::uint32 i=0u;i<this->vboCount;i++){
        printf("\nVector [%u] position(%.2f %.2f %.2f) Color (%.2f %.2f %.2f)"
               ,i
               ,this->vertexBuffer.getNoIF(position)
               ,this->vertexBuffer.getNoIF(position+1u)
               ,this->vertexBuffer.getNoIF(position+2u)

               ,this->vertexBuffer.getNoIF(position+3u)
               ,this->vertexBuffer.getNoIF(position+4u)
               ,this->vertexBuffer.getNoIF(position+5u)
               );
        position+=increment;
    }fflush(stdout);
}
void edk::shape::Polygon3DList::print_XY_RGBA(){
    edk::uint8 increment = vboSizeofMesh3D[this->vboType];
    edk::uint32 position = 0u;
    for(edk::uint32 i=0u;i<this->vboCount;i++){
        printf("\nVector [%u] position(%.2f %.2f) Color (%.2f %.2f %.2f %.2f)"
               ,i
               ,this->vertexBuffer.getNoIF(position)
               ,this->vertexBuffer.getNoIF(position+1u)

               ,this->vertexBuffer.getNoIF(position+2u)
               ,this->vertexBuffer.getNoIF(position+3u)
               ,this->vertexBuffer.getNoIF(position+4u)
               ,this->vertexBuffer.getNoIF(position+5u)
               );
        position+=increment;
    }fflush(stdout);
}
void edk::shape::Polygon3DList::print_XYZ_RGBA(){
    edk::uint8 increment = vboSizeofMesh3D[this->vboType];
    edk::uint32 position = 0u;
    for(edk::uint32 i=0u;i<this->vboCount;i++){
        printf("\nVector [%u] position(%.2f %.2f %.2f) Color (%.2f %.2f %.2f %.2f)"
               ,i
               ,this->vertexBuffer.getNoIF(position)
               ,this->vertexBuffer.getNoIF(position+1u)
               ,this->vertexBuffer.getNoIF(position+2u)

               ,this->vertexBuffer.getNoIF(position+3u)
               ,this->vertexBuffer.getNoIF(position+4u)
               ,this->vertexBuffer.getNoIF(position+5u)
               ,this->vertexBuffer.getNoIF(position+6u)
               );
        position+=increment;
    }fflush(stdout);
}
void edk::shape::Polygon3DList::print_XY_RGB_NxNyNz(){
    edk::uint8 increment = vboSizeofMesh3D[this->vboType];
    edk::uint32 position = 0u;
    for(edk::uint32 i=0u;i<this->vboCount;i++){
        printf("\nVector [%u] position(%.2f %.2f) Color (%.2f %.2f %.2f) normal(%.2f %.2f %.2f)"
               ,i
               ,this->vertexBuffer.getNoIF(position)
               ,this->vertexBuffer.getNoIF(position+1u)

               ,this->vertexBuffer.getNoIF(position+2u)
               ,this->vertexBuffer.getNoIF(position+3u)
               ,this->vertexBuffer.getNoIF(position+4u)

               ,this->vertexBuffer.getNoIF(position+5u)
               ,this->vertexBuffer.getNoIF(position+6u)
               ,this->vertexBuffer.getNoIF(position+7u)
               );
        position+=increment;
    }fflush(stdout);
}
void edk::shape::Polygon3DList::print_XYZ_RGB_NxNyNz(){
    edk::uint8 increment = vboSizeofMesh3D[this->vboType];
    edk::uint32 position = 0u;
    for(edk::uint32 i=0u;i<this->vboCount;i++){
        printf("\nVector [%u] position(%.2f %.2f %.2f) Color (%.2f %.2f %.2f) normal(%.2f %.2f %.2f)"
               ,i
               ,this->vertexBuffer.getNoIF(position)
               ,this->vertexBuffer.getNoIF(position+1u)
               ,this->vertexBuffer.getNoIF(position+2u)

               ,this->vertexBuffer.getNoIF(position+3u)
               ,this->vertexBuffer.getNoIF(position+4u)
               ,this->vertexBuffer.getNoIF(position+5u)

               ,this->vertexBuffer.getNoIF(position+6u)
               ,this->vertexBuffer.getNoIF(position+7u)
               ,this->vertexBuffer.getNoIF(position+8u)
               );
        position+=increment;
    }fflush(stdout);
}
void edk::shape::Polygon3DList::print_XY_RGBA_NxNyNz(){
    edk::uint8 increment = vboSizeofMesh3D[this->vboType];
    edk::uint32 position = 0u;
    for(edk::uint32 i=0u;i<this->vboCount;i++){
        printf("\nVector [%u] position(%.2f %.2f) Color (%.2f %.2f %.2f %.2f) normal(%.2f %.2f %.2f)"
               ,i
               ,this->vertexBuffer.getNoIF(position)
               ,this->vertexBuffer.getNoIF(position+1u)

               ,this->vertexBuffer.getNoIF(position+2u)
               ,this->vertexBuffer.getNoIF(position+3u)
               ,this->vertexBuffer.getNoIF(position+4u)
               ,this->vertexBuffer.getNoIF(position+5u)

               ,this->vertexBuffer.getNoIF(position+6u)
               ,this->vertexBuffer.getNoIF(position+7u)
               ,this->vertexBuffer.getNoIF(position+8u)
               );
        position+=increment;
    }fflush(stdout);
}
void edk::shape::Polygon3DList::print_XYZ_RGBA_NxNyNz(){
    edk::uint8 increment = vboSizeofMesh3D[this->vboType];
    edk::uint32 position = 0u;
    for(edk::uint32 i=0u;i<this->vboCount;i++){
        printf("\nVector [%u] position(%.2f %.2f %.2f) Color (%.2f %.2f %.2f %.2f) normal(%.2f %.2f %.2f)"
               ,i
               ,this->vertexBuffer.getNoIF(position)
               ,this->vertexBuffer.getNoIF(position+1u)
               ,this->vertexBuffer.getNoIF(position+2u)

               ,this->vertexBuffer.getNoIF(position+3u)
               ,this->vertexBuffer.getNoIF(position+4u)
               ,this->vertexBuffer.getNoIF(position+5u)
               ,this->vertexBuffer.getNoIF(position+6u)

               ,this->vertexBuffer.getNoIF(position+7u)
               ,this->vertexBuffer.getNoIF(position+8u)
               ,this->vertexBuffer.getNoIF(position+9u)
               );
        position+=increment;
    }fflush(stdout);
}
void edk::shape::Polygon3DList::print_XY_RGB_NxNyNz_UVxUVy(){
    edk::uint8 increment = vboSizeofMesh3D[this->vboType];
    edk::uint32 position = 0u;
    for(edk::uint32 i=0u;i<this->vboCount;i++){
        printf("\nVector [%u] position(%.2f %.2f) Color(%.2f %.2f %.2f) normal(%.2f %.2f %.2f) UV(%.2f %.2f)"
               ,i
               ,this->vertexBuffer.getNoIF(position)
               ,this->vertexBuffer.getNoIF(position+1u)

               ,this->vertexBuffer.getNoIF(position+2u)
               ,this->vertexBuffer.getNoIF(position+3u)
               ,this->vertexBuffer.getNoIF(position+4u)

               ,this->vertexBuffer.getNoIF(position+5u)
               ,this->vertexBuffer.getNoIF(position+6u)
               ,this->vertexBuffer.getNoIF(position+7u)

               ,this->vertexBuffer.getNoIF(position+8u)
               ,this->vertexBuffer.getNoIF(position+9u)
               );
        position+=increment;
    }fflush(stdout);
}
void edk::shape::Polygon3DList::print_XYZ_RGB_NxNyNz_UVxUVy(){
    edk::uint8 increment = vboSizeofMesh3D[this->vboType];
    edk::uint32 position = 0u;
    for(edk::uint32 i=0u;i<this->vboCount;i++){
        printf("\nVector [%u] position(%.2f %.2f %.2f) Color(%.2f %.2f %.2f) normal(%.2f %.2f %.2f) UV(%.2f %.2f)"
               ,i
               ,this->vertexBuffer.getNoIF(position)
               ,this->vertexBuffer.getNoIF(position+1u)
               ,this->vertexBuffer.getNoIF(position+2u)

               ,this->vertexBuffer.getNoIF(position+3u)
               ,this->vertexBuffer.getNoIF(position+4u)
               ,this->vertexBuffer.getNoIF(position+5u)

               ,this->vertexBuffer.getNoIF(position+6u)
               ,this->vertexBuffer.getNoIF(position+7u)
               ,this->vertexBuffer.getNoIF(position+8u)

               ,this->vertexBuffer.getNoIF(position+9u)
               ,this->vertexBuffer.getNoIF(position+10u)
               );
        position+=increment;
    }fflush(stdout);
}
void edk::shape::Polygon3DList::print_XY_RGBA_NxNyNz_UVxUVy(){
    edk::uint8 increment = vboSizeofMesh3D[this->vboType];
    edk::uint32 position = 0u;
    for(edk::uint32 i=0u;i<this->vboCount;i++){
        printf("\nVector [%u] position(%.2f %.2f) Color(%.2f %.2f %.2f %.2f) normal(%.2f %.2f %.2f) UV(%.2f %.2f)"
               ,i
               ,this->vertexBuffer.getNoIF(position)
               ,this->vertexBuffer.getNoIF(position+1u)

               ,this->vertexBuffer.getNoIF(position+2u)
               ,this->vertexBuffer.getNoIF(position+3u)
               ,this->vertexBuffer.getNoIF(position+4u)
               ,this->vertexBuffer.getNoIF(position+5u)

               ,this->vertexBuffer.getNoIF(position+6u)
               ,this->vertexBuffer.getNoIF(position+7u)
               ,this->vertexBuffer.getNoIF(position+8u)

               ,this->vertexBuffer.getNoIF(position+9u)
               ,this->vertexBuffer.getNoIF(position+10u)
               );
        position+=increment;
    }fflush(stdout);
}
void edk::shape::Polygon3DList::print_XYZ_RGBA_NxNyNz_UVxUVy(){
    edk::uint8 increment = vboSizeofMesh3D[this->vboType];
    edk::uint32 position = 0u;
    for(edk::uint32 i=0u;i<this->vboCount;i++){
        printf("\nVector [%u] position(%.2f %.2f %.2f) Color(%.2f %.2f %.2f %.2f) normal(%.2f %.2f %.2f) UV(%.2f %.2f)"
               ,i
               ,this->vertexBuffer.getNoIF(position)
               ,this->vertexBuffer.getNoIF(position+1u)
               ,this->vertexBuffer.getNoIF(position+2u)

               ,this->vertexBuffer.getNoIF(position+3u)
               ,this->vertexBuffer.getNoIF(position+4u)
               ,this->vertexBuffer.getNoIF(position+5u)
               ,this->vertexBuffer.getNoIF(position+6u)

               ,this->vertexBuffer.getNoIF(position+7u)
               ,this->vertexBuffer.getNoIF(position+8u)
               ,this->vertexBuffer.getNoIF(position+9u)

               ,this->vertexBuffer.getNoIF(position+10u)
               ,this->vertexBuffer.getNoIF(position+11u)
               );
        position+=increment;
    }fflush(stdout);
}
//DRAW
void edk::shape::Polygon3DList::draw_NULL(edk::uint32 /*mode*/){
    this->drawPolygons();
}
void edk::shape::Polygon3DList::draw_XY(edk::uint32 mode){
    edk::GU_GLSL::guUseBuffer(GU_ARRAY_BUFFER,this->vbo);
    //draw only the positions
    //enable vertex in array
    edk::GU_GLSL::guEnableClientState(GU_VERTEX_ARRAY);
    //set the vertex position in array
    edk::GU_GLSL::guVertexPointer2f32(0u,2u);

    //draw the array
    edk::GU_GLSL::guDrawArrays(mode,0,this->vboCount);

    //enable vertex in array
    edk::GU_GLSL::guDisableClientState(GU_VERTEX_ARRAY);

    edk::GU_GLSL::guDontUseBuffer(GU_ARRAY_BUFFER);
}
void edk::shape::Polygon3DList::draw_XYZ(edk::uint32 mode){
    edk::GU_GLSL::guUseBuffer(GU_ARRAY_BUFFER,this->vbo);

    //enable vertex in array
    edk::GU_GLSL::guEnableClientState(GU_VERTEX_ARRAY);
    //set the vertex position in array
    edk::GU_GLSL::guVertexPointer3f32(0u,3u);

    //draw the array
    edk::GU_GLSL::guDrawArrays(mode,0,this->vboCount);

    //enable vertex in array
    edk::GU_GLSL::guDisableClientState(GU_VERTEX_ARRAY);

    edk::GU_GLSL::guDontUseBuffer(GU_ARRAY_BUFFER);
}
void edk::shape::Polygon3DList::draw_XY_NxNyNz(edk::uint32 mode){
    edk::GU_GLSL::guUseBuffer(GU_ARRAY_BUFFER,this->vbo);

    //enable normal in array
    edk::GU_GLSL::guEnableClientState(GU_NORMAL_ARRAY);
    //set the normal position in array
    edk::GU_GLSL::guNormalPointerF32(2u,5u);
    //enable vertex in array
    edk::GU_GLSL::guEnableClientState(GU_VERTEX_ARRAY);
    //set the vertex position in array
    edk::GU_GLSL::guVertexPointer2f32(0u,5u);

    //draw the array
    edk::GU_GLSL::guDrawArrays(mode,0,this->vboCount);

    //enable vertex in array
    edk::GU_GLSL::guDisableClientState(GU_VERTEX_ARRAY);
    //enable normal in array
    edk::GU_GLSL::guDisableClientState(GU_NORMAL_ARRAY);

    edk::GU_GLSL::guDontUseBuffer(GU_ARRAY_BUFFER);
}
void edk::shape::Polygon3DList::draw_XYZ_NxNyNz(edk::uint32 mode){
    edk::GU_GLSL::guUseBuffer(GU_ARRAY_BUFFER,this->vbo);

    //enable normal in array
    edk::GU_GLSL::guEnableClientState(GU_NORMAL_ARRAY);
    //set the normal position in array
    edk::GU_GLSL::guNormalPointerF32(3u,6u);
    //enable vertex in array
    edk::GU_GLSL::guEnableClientState(GU_VERTEX_ARRAY);
    //set the vertex position in array
    edk::GU_GLSL::guVertexPointer3f32(0u,6u);

    //draw the array
    edk::GU_GLSL::guDrawArrays(mode,0,this->vboCount);

    //enable vertex in array
    edk::GU_GLSL::guDisableClientState(GU_VERTEX_ARRAY);
    //enable normal in array
    edk::GU_GLSL::guDisableClientState(GU_NORMAL_ARRAY);

    edk::GU_GLSL::guDontUseBuffer(GU_ARRAY_BUFFER);
}
void edk::shape::Polygon3DList::draw_XY_RGB(edk::uint32 mode){
    edk::GU_GLSL::guUseBuffer(GU_ARRAY_BUFFER,this->vbo);

    //enable color in array
    edk::GU_GLSL::guEnableClientState(GU_COLOR_ARRAY);
    //set the color position in array
    edk::GU_GLSL::guColorPointer3f32(2u,5u);
    //enable vertex in array
    edk::GU_GLSL::guEnableClientState(GU_VERTEX_ARRAY);
    //set the vertex position in array
    edk::GU_GLSL::guVertexPointer2f32(0u,5u);

    //draw the array
    edk::GU_GLSL::guDrawArrays(mode,0,this->vboCount);

    //enable vertex in array
    edk::GU_GLSL::guDisableClientState(GU_VERTEX_ARRAY);
    //enable color in array
    edk::GU_GLSL::guDisableClientState(GU_COLOR_ARRAY);

    edk::GU_GLSL::guDontUseBuffer(GU_ARRAY_BUFFER);
}
void edk::shape::Polygon3DList::draw_XYZ_RGB(edk::uint32 mode){
    edk::GU_GLSL::guUseBuffer(GU_ARRAY_BUFFER,this->vbo);

    //enable color in array
    edk::GU_GLSL::guEnableClientState(GU_COLOR_ARRAY);
    //set the color position in array
    edk::GU_GLSL::guColorPointer3f32(3,6u);
    //enable vertex in array
    edk::GU_GLSL::guEnableClientState(GU_VERTEX_ARRAY);
    //set the vertex position in array
    edk::GU_GLSL::guVertexPointer3f32(0u,6u);

    //draw the array
    edk::GU_GLSL::guDrawArrays(mode,0,this->vboCount);

    //enable vertex in array
    edk::GU_GLSL::guDisableClientState(GU_VERTEX_ARRAY);
    //enable color in array
    edk::GU_GLSL::guDisableClientState(GU_COLOR_ARRAY);

    edk::GU_GLSL::guDontUseBuffer(GU_ARRAY_BUFFER);
}
void edk::shape::Polygon3DList::draw_XY_RGBA(edk::uint32 mode){
    edk::GU_GLSL::guUseBuffer(GU_ARRAY_BUFFER,this->vbo);

    //enable color in array
    edk::GU_GLSL::guEnableClientState(GU_COLOR_ARRAY);
    //set the color position in array
    edk::GU_GLSL::guColorPointer4f32(2u,6u);
    //enable vertex in array
    edk::GU_GLSL::guEnableClientState(GU_VERTEX_ARRAY);
    //set the vertex position in array
    edk::GU_GLSL::guVertexPointer2f32(0u,6u);

    //draw the array
    edk::GU_GLSL::guDrawArrays(mode,0,this->vboCount);

    //enable vertex in array
    edk::GU_GLSL::guDisableClientState(GU_VERTEX_ARRAY);
    //enable color in array
    edk::GU_GLSL::guDisableClientState(GU_COLOR_ARRAY);

    edk::GU_GLSL::guDontUseBuffer(GU_ARRAY_BUFFER);
}
void edk::shape::Polygon3DList::draw_XYZ_RGBA(edk::uint32 mode){
    edk::GU_GLSL::guUseBuffer(GU_ARRAY_BUFFER,this->vbo);

    //enable color in array
    edk::GU_GLSL::guEnableClientState(GU_COLOR_ARRAY);
    //set the color position in array
    edk::GU_GLSL::guColorPointer4f32(3u,7u);
    //enable vertex in array
    edk::GU_GLSL::guEnableClientState(GU_VERTEX_ARRAY);
    //set the vertex position in array
    edk::GU_GLSL::guVertexPointer3f32(0u,7u);

    //draw the array
    edk::GU_GLSL::guDrawArrays(mode,0,this->vboCount);

    //enable vertex in array
    edk::GU_GLSL::guDisableClientState(GU_VERTEX_ARRAY);
    //enable color in array
    edk::GU_GLSL::guDisableClientState(GU_COLOR_ARRAY);

    edk::GU_GLSL::guDontUseBuffer(GU_ARRAY_BUFFER);
}
void edk::shape::Polygon3DList::draw_XY_RGB_NxNyNz(edk::uint32 mode){
    edk::GU_GLSL::guUseBuffer(GU_ARRAY_BUFFER,this->vbo);

    //enable normal in array
    edk::GU_GLSL::guEnableClientState(GU_NORMAL_ARRAY);
    //set the normal position in array
    edk::GU_GLSL::guNormalPointerF32(5u,8u);
    //enable color in array
    edk::GU_GLSL::guEnableClientState(GU_COLOR_ARRAY);
    //set the color position in array
    edk::GU_GLSL::guColorPointer3f32(2u,8u);
    //enable vertex in array
    edk::GU_GLSL::guEnableClientState(GU_VERTEX_ARRAY);
    //set the vertex position in array
    edk::GU_GLSL::guVertexPointer2f32(0u,8u);

    //draw the array
    edk::GU_GLSL::guDrawArrays(mode,0,this->vboCount);

    //enable vertex in array
    edk::GU_GLSL::guDisableClientState(GU_VERTEX_ARRAY);
    //enable color in array
    edk::GU_GLSL::guDisableClientState(GU_COLOR_ARRAY);
    //enable normal in array
    edk::GU_GLSL::guDisableClientState(GU_NORMAL_ARRAY);

    edk::GU_GLSL::guDontUseBuffer(GU_ARRAY_BUFFER);
}
void edk::shape::Polygon3DList::draw_XYZ_RGB_NxNyNz(edk::uint32 mode){
    edk::GU_GLSL::guUseBuffer(GU_ARRAY_BUFFER,this->vbo);

    //enable normal in array
    edk::GU_GLSL::guEnableClientState(GU_NORMAL_ARRAY);
    //set the normal position in array
    edk::GU_GLSL::guNormalPointerF32(6u,9u);
    //enable color in array
    edk::GU_GLSL::guEnableClientState(GU_COLOR_ARRAY);
    //set the color position in array
    edk::GU_GLSL::guColorPointer3f32(3u,9u);
    //enable vertex in array
    edk::GU_GLSL::guEnableClientState(GU_VERTEX_ARRAY);
    //set the vertex position in array
    edk::GU_GLSL::guVertexPointer3f32(0u,9u);

    //draw the array
    edk::GU_GLSL::guDrawArrays(mode,0,this->vboCount);

    //enable vertex in array
    edk::GU_GLSL::guDisableClientState(GU_VERTEX_ARRAY);
    //enable color in array
    edk::GU_GLSL::guDisableClientState(GU_COLOR_ARRAY);
    //enable normal in array
    edk::GU_GLSL::guDisableClientState(GU_NORMAL_ARRAY);

    edk::GU_GLSL::guDontUseBuffer(GU_ARRAY_BUFFER);
}
void edk::shape::Polygon3DList::draw_XY_RGBA_NxNyNz(edk::uint32 mode){
    edk::GU_GLSL::guUseBuffer(GU_ARRAY_BUFFER,this->vbo);

    //enable normal in array
    edk::GU_GLSL::guEnableClientState(GU_NORMAL_ARRAY);
    //set the normal position in array
    edk::GU_GLSL::guNormalPointerF32(6u,9u);
    //enable color in array
    edk::GU_GLSL::guEnableClientState(GU_COLOR_ARRAY);
    //set the color position in array
    edk::GU_GLSL::guColorPointer4f32(2u,9u);
    //enable vertex in array
    edk::GU_GLSL::guEnableClientState(GU_VERTEX_ARRAY);
    //set the vertex position in array
    edk::GU_GLSL::guVertexPointer2f32(0u,9u);

    //draw the array
    edk::GU_GLSL::guDrawArrays(mode,0,this->vboCount);

    //enable vertex in array
    edk::GU_GLSL::guDisableClientState(GU_VERTEX_ARRAY);
    //enable color in array
    edk::GU_GLSL::guDisableClientState(GU_COLOR_ARRAY);
    //enable normal in array
    edk::GU_GLSL::guDisableClientState(GU_NORMAL_ARRAY);

    edk::GU_GLSL::guDontUseBuffer(GU_ARRAY_BUFFER);
}
void edk::shape::Polygon3DList::draw_XYZ_RGBA_NxNyNz(edk::uint32 mode){
    edk::GU_GLSL::guUseBuffer(GU_ARRAY_BUFFER,this->vbo);

    //enable normal in array
    edk::GU_GLSL::guEnableClientState(GU_NORMAL_ARRAY);
    //set the normal position in array
    edk::GU_GLSL::guNormalPointerF32(7u,10u);
    //enable color in array
    edk::GU_GLSL::guEnableClientState(GU_COLOR_ARRAY);
    //set the color position in array
    edk::GU_GLSL::guColorPointer4f32(3u,10u);
    //enable vertex in array
    edk::GU_GLSL::guEnableClientState(GU_VERTEX_ARRAY);
    //set the vertex position in array
    edk::GU_GLSL::guVertexPointer3f32(0u,10u);

    //draw the array
    edk::GU_GLSL::guDrawArrays(mode,0,this->vboCount);

    //enable vertex in array
    edk::GU_GLSL::guDisableClientState(GU_VERTEX_ARRAY);
    //enable color in array
    edk::GU_GLSL::guDisableClientState(GU_COLOR_ARRAY);
    //enable normal in array
    edk::GU_GLSL::guDisableClientState(GU_NORMAL_ARRAY);

    edk::GU_GLSL::guDontUseBuffer(GU_ARRAY_BUFFER);
}
void edk::shape::Polygon3DList::draw_XY_RGB_NxNyNz_UVxUVy(edk::uint32 mode){
    edk::GU_GLSL::guUseBuffer(GU_ARRAY_BUFFER,this->vbo);

    //enable texture coord in array
    edk::GU_GLSL::guEnableClientState(GU_TEXTURE_COORD_ARRAY);
    //set the texture coor position in array
    edk::GU_GLSL::guTexCoordPointer2f32(8u,10u);
    //enable normal in array
    edk::GU_GLSL::guEnableClientState(GU_NORMAL_ARRAY);
    //set the normal position in array
    edk::GU_GLSL::guNormalPointerF32(5u,10u);
    //enable color in array
    edk::GU_GLSL::guEnableClientState(GU_COLOR_ARRAY);
    //set the color position in array
    edk::GU_GLSL::guColorPointer3f32(2u,10u);
    //enable vertex in array
    edk::GU_GLSL::guEnableClientState(GU_VERTEX_ARRAY);
    //set the vertex position in array
    edk::GU_GLSL::guVertexPointer2f32(0u,10u);

    //draw the array
    edk::GU_GLSL::guDrawArrays(mode,0,this->vboCount);

    //enable vertex in array
    edk::GU_GLSL::guDisableClientState(GU_VERTEX_ARRAY);
    //enable color in array
    edk::GU_GLSL::guDisableClientState(GU_COLOR_ARRAY);
    //enable normal in array
    edk::GU_GLSL::guDisableClientState(GU_NORMAL_ARRAY);
    //enable texture coord in array
    edk::GU_GLSL::guDisableClientState(GU_TEXTURE_COORD_ARRAY);

    edk::GU_GLSL::guDontUseBuffer(GU_ARRAY_BUFFER);
}
void edk::shape::Polygon3DList::draw_XYZ_RGB_NxNyNz_UVxUVy(edk::uint32 mode){
    edk::GU_GLSL::guUseBuffer(GU_ARRAY_BUFFER,this->vbo);

    //enable texture coord in array
    edk::GU_GLSL::guEnableClientState(GU_TEXTURE_COORD_ARRAY);
    //set the texture coor position in array
    edk::GU_GLSL::guTexCoordPointer2f32(9u,11u);
    //enable normal in array
    edk::GU_GLSL::guEnableClientState(GU_NORMAL_ARRAY);
    //set the normal position in array
    edk::GU_GLSL::guNormalPointerF32(6u,11u);
    //enable color in array
    edk::GU_GLSL::guEnableClientState(GU_COLOR_ARRAY);
    //set the color position in array
    edk::GU_GLSL::guColorPointer3f32(3u,11u);
    //enable vertex in array
    edk::GU_GLSL::guEnableClientState(GU_VERTEX_ARRAY);
    //set the vertex position in array
    edk::GU_GLSL::guVertexPointer3f32(0u,11u);

    //draw the array
    edk::GU_GLSL::guDrawArrays(mode,0,this->vboCount);

    //enable vertex in array
    edk::GU_GLSL::guDisableClientState(GU_VERTEX_ARRAY);
    //enable color in array
    edk::GU_GLSL::guDisableClientState(GU_COLOR_ARRAY);
    //enable normal in array
    edk::GU_GLSL::guDisableClientState(GU_NORMAL_ARRAY);
    //enable texture coord in array
    edk::GU_GLSL::guDisableClientState(GU_TEXTURE_COORD_ARRAY);

    edk::GU_GLSL::guDontUseBuffer(GU_ARRAY_BUFFER);
}
void edk::shape::Polygon3DList::draw_XY_RGBA_NxNyNz_UVxUVy(edk::uint32 mode){
    edk::GU_GLSL::guUseBuffer(GU_ARRAY_BUFFER,this->vbo);

    //enable texture coord in array
    edk::GU_GLSL::guEnableClientState(GU_TEXTURE_COORD_ARRAY);
    //set the texture coor position in array
    edk::GU_GLSL::guTexCoordPointer2f32(9u,11u);
    //enable normal in array
    edk::GU_GLSL::guEnableClientState(GU_NORMAL_ARRAY);
    //set the normal position in array
    edk::GU_GLSL::guNormalPointerF32(6u,11u);
    //enable color in array
    edk::GU_GLSL::guEnableClientState(GU_COLOR_ARRAY);
    //set the color position in array
    edk::GU_GLSL::guColorPointer4f32(2u,11u);
    //enable vertex in array
    edk::GU_GLSL::guEnableClientState(GU_VERTEX_ARRAY);
    //set the vertex position in array
    edk::GU_GLSL::guVertexPointer2f32(0u,11u);

    //draw the array
    edk::GU_GLSL::guDrawArrays(mode,0,this->vboCount);

    //enable vertex in array
    edk::GU_GLSL::guDisableClientState(GU_VERTEX_ARRAY);
    //enable color in array
    edk::GU_GLSL::guDisableClientState(GU_COLOR_ARRAY);
    //enable normal in array
    edk::GU_GLSL::guDisableClientState(GU_NORMAL_ARRAY);
    //enable texture coord in array
    edk::GU_GLSL::guDisableClientState(GU_TEXTURE_COORD_ARRAY);

    edk::GU_GLSL::guDontUseBuffer(GU_ARRAY_BUFFER);
}
void edk::shape::Polygon3DList::draw_XYZ_RGBA_NxNyNz_UVxUVy(edk::uint32 mode){
    edk::GU_GLSL::guUseBuffer(GU_ARRAY_BUFFER,this->vbo);

    //enable texture coord in array
    edk::GU_GLSL::guEnableClientState(GU_TEXTURE_COORD_ARRAY);
    //set the texture coor position in array
    edk::GU_GLSL::guTexCoordPointer2f32(10u,12u);
    //enable normal in array
    edk::GU_GLSL::guEnableClientState(GU_NORMAL_ARRAY);
    //set the normal position in array
    edk::GU_GLSL::guNormalPointerF32(7u,12u);
    //enable color in array
    edk::GU_GLSL::guEnableClientState(GU_COLOR_ARRAY);
    //set the color position in array
    edk::GU_GLSL::guColorPointer4f32(3u,12u);
    //enable vertex in array
    edk::GU_GLSL::guEnableClientState(GU_VERTEX_ARRAY);
    //set the vertex position in array
    edk::GU_GLSL::guVertexPointer3f32(0u,12u);

    //draw the array
    edk::GU_GLSL::guDrawArrays(mode,0,this->vboCount);

    //enable vertex in array
    edk::GU_GLSL::guDisableClientState(GU_VERTEX_ARRAY);
    //enable color in array
    edk::GU_GLSL::guDisableClientState(GU_COLOR_ARRAY);
    //enable normal in array
    edk::GU_GLSL::guDisableClientState(GU_NORMAL_ARRAY);
    //enable texture coord in array
    edk::GU_GLSL::guDisableClientState(GU_TEXTURE_COORD_ARRAY);

    edk::GU_GLSL::guDontUseBuffer(GU_ARRAY_BUFFER);
}
//DRAW UPDATE
void edk::shape::Polygon3DList::drawUpdate_NULL(edk::uint32 /*mode*/){
    this->drawPolygons();
    //change the drawFunction
    this->setVBOFunctionNULL();
}
void edk::shape::Polygon3DList::drawUpdate_XY(edk::uint32 mode){
    this->updateVBO();
    edk::GU_GLSL::guUseBuffer(GU_ARRAY_BUFFER,this->vbo);
    //draw only the positions
    //enable vertex in array
    edk::GU_GLSL::guEnableClientState(GU_VERTEX_ARRAY);
    //set the vertex position in array
    edk::GU_GLSL::guVertexPointer2f32(0u,2u);

    //draw the array
    edk::GU_GLSL::guDrawArrays(mode,0,this->vboCount);

    //enable vertex in array
    edk::GU_GLSL::guDisableClientState(GU_VERTEX_ARRAY);

    edk::GU_GLSL::guDontUseBuffer(GU_ARRAY_BUFFER);
    //change the drawFunction
    this->vboDraw = &edk::shape::Polygon3DList::draw_XY;
}
void edk::shape::Polygon3DList::drawUpdate_XYZ(edk::uint32 mode){
    this->updateVBO();
    edk::GU_GLSL::guUseBuffer(GU_ARRAY_BUFFER,this->vbo);

    //enable vertex in array
    edk::GU_GLSL::guEnableClientState(GU_VERTEX_ARRAY);
    //set the vertex position in array
    edk::GU_GLSL::guVertexPointer3f32(0u,3u);

    //draw the array
    edk::GU_GLSL::guDrawArrays(mode,0,this->vboCount);

    //enable vertex in array
    edk::GU_GLSL::guDisableClientState(GU_VERTEX_ARRAY);

    edk::GU_GLSL::guDontUseBuffer(GU_ARRAY_BUFFER);
    //change the drawFunction
    this->vboDraw = &edk::shape::Polygon3DList::draw_XYZ;
}
void edk::shape::Polygon3DList::drawUpdate_XY_NxNyNz(edk::uint32 mode){
    this->updateVBO();
    edk::GU_GLSL::guUseBuffer(GU_ARRAY_BUFFER,this->vbo);

    //enable normal in array
    edk::GU_GLSL::guEnableClientState(GU_NORMAL_ARRAY);
    //set the normal position in array
    edk::GU_GLSL::guNormalPointerF32(2u,5u);
    //enable vertex in array
    edk::GU_GLSL::guEnableClientState(GU_VERTEX_ARRAY);
    //set the vertex position in array
    edk::GU_GLSL::guVertexPointer2f32(0u,5u);

    //draw the array
    edk::GU_GLSL::guDrawArrays(mode,0,this->vboCount);

    //enable vertex in array
    edk::GU_GLSL::guDisableClientState(GU_VERTEX_ARRAY);
    //enable normal in array
    edk::GU_GLSL::guDisableClientState(GU_NORMAL_ARRAY);

    edk::GU_GLSL::guDontUseBuffer(GU_ARRAY_BUFFER);
    //change the drawFunction
    this->vboDraw = &edk::shape::Polygon3DList::draw_XY_NxNyNz;
}
void edk::shape::Polygon3DList::drawUpdate_XYZ_NxNyNz(edk::uint32 mode){
    this->updateVBO();
    edk::GU_GLSL::guUseBuffer(GU_ARRAY_BUFFER,this->vbo);

    //enable normal in array
    edk::GU_GLSL::guEnableClientState(GU_NORMAL_ARRAY);
    //set the normal position in array
    edk::GU_GLSL::guNormalPointerF32(3u,6u);
    //enable vertex in array
    edk::GU_GLSL::guEnableClientState(GU_VERTEX_ARRAY);
    //set the vertex position in array
    edk::GU_GLSL::guVertexPointer3f32(0u,6u);

    //draw the array
    edk::GU_GLSL::guDrawArrays(mode,0,this->vboCount);

    //enable vertex in array
    edk::GU_GLSL::guDisableClientState(GU_VERTEX_ARRAY);
    //enable normal in array
    edk::GU_GLSL::guDisableClientState(GU_NORMAL_ARRAY);

    edk::GU_GLSL::guDontUseBuffer(GU_ARRAY_BUFFER);
    //change the drawFunction
    this->vboDraw = &edk::shape::Polygon3DList::draw_XYZ_NxNyNz;
}
void edk::shape::Polygon3DList::drawUpdate_XY_RGB(edk::uint32 mode){
    this->updateVBO();
    edk::GU_GLSL::guUseBuffer(GU_ARRAY_BUFFER,this->vbo);

    //enable color in array
    edk::GU_GLSL::guEnableClientState(GU_COLOR_ARRAY);
    //set the color position in array
    edk::GU_GLSL::guColorPointer3f32(2u,5u);
    //enable vertex in array
    edk::GU_GLSL::guEnableClientState(GU_VERTEX_ARRAY);
    //set the vertex position in array
    edk::GU_GLSL::guVertexPointer2f32(0u,5u);

    //draw the array
    edk::GU_GLSL::guDrawArrays(mode,0,this->vboCount);

    //enable vertex in array
    edk::GU_GLSL::guDisableClientState(GU_VERTEX_ARRAY);
    //enable color in array
    edk::GU_GLSL::guDisableClientState(GU_COLOR_ARRAY);

    edk::GU_GLSL::guDontUseBuffer(GU_ARRAY_BUFFER);
    //change the drawFunction
    this->vboDraw = &edk::shape::Polygon3DList::draw_XY_RGB;
}
void edk::shape::Polygon3DList::drawUpdate_XYZ_RGB(edk::uint32 mode){
    this->updateVBO();
    edk::GU_GLSL::guUseBuffer(GU_ARRAY_BUFFER,this->vbo);

    //enable color in array
    edk::GU_GLSL::guEnableClientState(GU_COLOR_ARRAY);
    //set the color position in array
    edk::GU_GLSL::guColorPointer3f32(3,6u);
    //enable vertex in array
    edk::GU_GLSL::guEnableClientState(GU_VERTEX_ARRAY);
    //set the vertex position in array
    edk::GU_GLSL::guVertexPointer3f32(0u,6u);

    //draw the array
    edk::GU_GLSL::guDrawArrays(mode,0,this->vboCount);

    //enable vertex in array
    edk::GU_GLSL::guDisableClientState(GU_VERTEX_ARRAY);
    //enable color in array
    edk::GU_GLSL::guDisableClientState(GU_COLOR_ARRAY);

    edk::GU_GLSL::guDontUseBuffer(GU_ARRAY_BUFFER);
    //change the drawFunction
    this->vboDraw = &edk::shape::Polygon3DList::draw_XYZ_RGB;
}
void edk::shape::Polygon3DList::drawUpdate_XY_RGBA(edk::uint32 mode){
    this->updateVBO();
    edk::GU_GLSL::guUseBuffer(GU_ARRAY_BUFFER,this->vbo);

    //enable color in array
    edk::GU_GLSL::guEnableClientState(GU_COLOR_ARRAY);
    //set the color position in array
    edk::GU_GLSL::guColorPointer4f32(2u,6u);
    //enable vertex in array
    edk::GU_GLSL::guEnableClientState(GU_VERTEX_ARRAY);
    //set the vertex position in array
    edk::GU_GLSL::guVertexPointer2f32(0u,6u);

    //draw the array
    edk::GU_GLSL::guDrawArrays(mode,0,this->vboCount);

    //enable vertex in array
    edk::GU_GLSL::guDisableClientState(GU_VERTEX_ARRAY);
    //enable color in array
    edk::GU_GLSL::guDisableClientState(GU_COLOR_ARRAY);

    edk::GU_GLSL::guDontUseBuffer(GU_ARRAY_BUFFER);
    //change the drawFunction
    this->vboDraw = &edk::shape::Polygon3DList::draw_XY_RGBA;
}
void edk::shape::Polygon3DList::drawUpdate_XYZ_RGBA(edk::uint32 mode){
    this->updateVBO();
    edk::GU_GLSL::guUseBuffer(GU_ARRAY_BUFFER,this->vbo);

    //enable color in array
    edk::GU_GLSL::guEnableClientState(GU_COLOR_ARRAY);
    //set the color position in array
    edk::GU_GLSL::guColorPointer4f32(3u,7u);
    //enable vertex in array
    edk::GU_GLSL::guEnableClientState(GU_VERTEX_ARRAY);
    //set the vertex position in array
    edk::GU_GLSL::guVertexPointer3f32(0u,7u);

    //draw the array
    edk::GU_GLSL::guDrawArrays(mode,0,this->vboCount);

    //enable vertex in array
    edk::GU_GLSL::guDisableClientState(GU_VERTEX_ARRAY);
    //enable color in array
    edk::GU_GLSL::guDisableClientState(GU_COLOR_ARRAY);

    edk::GU_GLSL::guDontUseBuffer(GU_ARRAY_BUFFER);
    //change the drawFunction
    this->vboDraw = &edk::shape::Polygon3DList::draw_XYZ_RGBA;
}
void edk::shape::Polygon3DList::drawUpdate_XY_RGB_NxNyNz(edk::uint32 mode){
    this->updateVBO();
    edk::GU_GLSL::guUseBuffer(GU_ARRAY_BUFFER,this->vbo);

    //enable normal in array
    edk::GU_GLSL::guEnableClientState(GU_NORMAL_ARRAY);
    //set the normal position in array
    edk::GU_GLSL::guNormalPointerF32(5u,8u);
    //enable color in array
    edk::GU_GLSL::guEnableClientState(GU_COLOR_ARRAY);
    //set the color position in array
    edk::GU_GLSL::guColorPointer3f32(2u,8u);
    //enable vertex in array
    edk::GU_GLSL::guEnableClientState(GU_VERTEX_ARRAY);
    //set the vertex position in array
    edk::GU_GLSL::guVertexPointer2f32(0u,8u);

    //draw the array
    edk::GU_GLSL::guDrawArrays(mode,0,this->vboCount);

    //enable vertex in array
    edk::GU_GLSL::guDisableClientState(GU_VERTEX_ARRAY);
    //enable color in array
    edk::GU_GLSL::guDisableClientState(GU_COLOR_ARRAY);
    //enable normal in array
    edk::GU_GLSL::guDisableClientState(GU_NORMAL_ARRAY);

    edk::GU_GLSL::guDontUseBuffer(GU_ARRAY_BUFFER);
    //change the drawFunction
    this->vboDraw = &edk::shape::Polygon3DList::draw_XY_RGB_NxNyNz;
}
void edk::shape::Polygon3DList::drawUpdate_XYZ_RGB_NxNyNz(edk::uint32 mode){
    this->updateVBO();
    edk::GU_GLSL::guUseBuffer(GU_ARRAY_BUFFER,this->vbo);

    //enable normal in array
    edk::GU_GLSL::guEnableClientState(GU_NORMAL_ARRAY);
    //set the normal position in array
    edk::GU_GLSL::guNormalPointerF32(6u,9u);
    //enable color in array
    edk::GU_GLSL::guEnableClientState(GU_COLOR_ARRAY);
    //set the color position in array
    edk::GU_GLSL::guColorPointer3f32(3u,9u);
    //enable vertex in array
    edk::GU_GLSL::guEnableClientState(GU_VERTEX_ARRAY);
    //set the vertex position in array
    edk::GU_GLSL::guVertexPointer3f32(0u,9u);

    //draw the array
    edk::GU_GLSL::guDrawArrays(mode,0,this->vboCount);

    //enable vertex in array
    edk::GU_GLSL::guDisableClientState(GU_VERTEX_ARRAY);
    //enable color in array
    edk::GU_GLSL::guDisableClientState(GU_COLOR_ARRAY);
    //enable normal in array
    edk::GU_GLSL::guDisableClientState(GU_NORMAL_ARRAY);

    edk::GU_GLSL::guDontUseBuffer(GU_ARRAY_BUFFER);
    //change the drawFunction
    this->vboDraw = &edk::shape::Polygon3DList::draw_XYZ_RGB_NxNyNz;
}
void edk::shape::Polygon3DList::drawUpdate_XY_RGBA_NxNyNz(edk::uint32 mode){
    this->updateVBO();
    edk::GU_GLSL::guUseBuffer(GU_ARRAY_BUFFER,this->vbo);

    //enable normal in array
    edk::GU_GLSL::guEnableClientState(GU_NORMAL_ARRAY);
    //set the normal position in array
    edk::GU_GLSL::guNormalPointerF32(6u,9u);
    //enable color in array
    edk::GU_GLSL::guEnableClientState(GU_COLOR_ARRAY);
    //set the color position in array
    edk::GU_GLSL::guColorPointer4f32(2u,9u);
    //enable vertex in array
    edk::GU_GLSL::guEnableClientState(GU_VERTEX_ARRAY);
    //set the vertex position in array
    edk::GU_GLSL::guVertexPointer2f32(0u,9u);

    //draw the array
    edk::GU_GLSL::guDrawArrays(mode,0,this->vboCount);

    //enable vertex in array
    edk::GU_GLSL::guDisableClientState(GU_VERTEX_ARRAY);
    //enable color in array
    edk::GU_GLSL::guDisableClientState(GU_COLOR_ARRAY);
    //enable normal in array
    edk::GU_GLSL::guDisableClientState(GU_NORMAL_ARRAY);

    edk::GU_GLSL::guDontUseBuffer(GU_ARRAY_BUFFER);
    //change the drawFunction
    this->vboDraw = &edk::shape::Polygon3DList::draw_XY_RGBA_NxNyNz;
}
void edk::shape::Polygon3DList::drawUpdate_XYZ_RGBA_NxNyNz(edk::uint32 mode){
    this->updateVBO();
    edk::GU_GLSL::guUseBuffer(GU_ARRAY_BUFFER,this->vbo);

    //enable normal in array
    edk::GU_GLSL::guEnableClientState(GU_NORMAL_ARRAY);
    //set the normal position in array
    edk::GU_GLSL::guNormalPointerF32(7u,10u);
    //enable color in array
    edk::GU_GLSL::guEnableClientState(GU_COLOR_ARRAY);
    //set the color position in array
    edk::GU_GLSL::guColorPointer4f32(3u,10u);
    //enable vertex in array
    edk::GU_GLSL::guEnableClientState(GU_VERTEX_ARRAY);
    //set the vertex position in array
    edk::GU_GLSL::guVertexPointer3f32(0u,10u);

    //draw the array
    edk::GU_GLSL::guDrawArrays(mode,0,this->vboCount);

    //enable vertex in array
    edk::GU_GLSL::guDisableClientState(GU_VERTEX_ARRAY);
    //enable color in array
    edk::GU_GLSL::guDisableClientState(GU_COLOR_ARRAY);
    //enable normal in array
    edk::GU_GLSL::guDisableClientState(GU_NORMAL_ARRAY);

    edk::GU_GLSL::guDontUseBuffer(GU_ARRAY_BUFFER);
    //change the drawFunction
    this->vboDraw = &edk::shape::Polygon3DList::draw_XYZ_RGBA_NxNyNz;
}
void edk::shape::Polygon3DList::drawUpdate_XY_RGB_NxNyNz_UVxUVy(edk::uint32 mode){
    this->updateVBO();
    edk::GU_GLSL::guUseBuffer(GU_ARRAY_BUFFER,this->vbo);

    //enable texture coord in array
    edk::GU_GLSL::guEnableClientState(GU_TEXTURE_COORD_ARRAY);
    //set the texture coor position in array
    edk::GU_GLSL::guTexCoordPointer2f32(8u,10u);
    //enable normal in array
    edk::GU_GLSL::guEnableClientState(GU_NORMAL_ARRAY);
    //set the normal position in array
    edk::GU_GLSL::guNormalPointerF32(5u,10u);
    //enable color in array
    edk::GU_GLSL::guEnableClientState(GU_COLOR_ARRAY);
    //set the color position in array
    edk::GU_GLSL::guColorPointer3f32(2u,10u);
    //enable vertex in array
    edk::GU_GLSL::guEnableClientState(GU_VERTEX_ARRAY);
    //set the vertex position in array
    edk::GU_GLSL::guVertexPointer2f32(0u,10u);

    //draw the array
    edk::GU_GLSL::guDrawArrays(mode,0,this->vboCount);

    //enable vertex in array
    edk::GU_GLSL::guDisableClientState(GU_VERTEX_ARRAY);
    //enable color in array
    edk::GU_GLSL::guDisableClientState(GU_COLOR_ARRAY);
    //enable normal in array
    edk::GU_GLSL::guDisableClientState(GU_NORMAL_ARRAY);
    //enable texture coord in array
    edk::GU_GLSL::guDisableClientState(GU_TEXTURE_COORD_ARRAY);

    edk::GU_GLSL::guDontUseBuffer(GU_ARRAY_BUFFER);
    //change the drawFunction
    this->vboDraw = &edk::shape::Polygon3DList::draw_XY_RGB_NxNyNz_UVxUVy;
}
void edk::shape::Polygon3DList::drawUpdate_XYZ_RGB_NxNyNz_UVxUVy(edk::uint32 mode){
    this->updateVBO();
    edk::GU_GLSL::guUseBuffer(GU_ARRAY_BUFFER,this->vbo);

    //enable texture coord in array
    edk::GU_GLSL::guEnableClientState(GU_TEXTURE_COORD_ARRAY);
    //set the texture coor position in array
    edk::GU_GLSL::guTexCoordPointer2f32(9u,11u);
    //enable normal in array
    edk::GU_GLSL::guEnableClientState(GU_NORMAL_ARRAY);
    //set the normal position in array
    edk::GU_GLSL::guNormalPointerF32(6u,11u);
    //enable color in array
    edk::GU_GLSL::guEnableClientState(GU_COLOR_ARRAY);
    //set the color position in array
    edk::GU_GLSL::guColorPointer3f32(3u,11u);
    //enable vertex in array
    edk::GU_GLSL::guEnableClientState(GU_VERTEX_ARRAY);
    //set the vertex position in array
    edk::GU_GLSL::guVertexPointer3f32(0u,11u);

    //draw the array
    edk::GU_GLSL::guDrawArrays(mode,0,this->vboCount);

    //enable vertex in array
    edk::GU_GLSL::guDisableClientState(GU_VERTEX_ARRAY);
    //enable color in array
    edk::GU_GLSL::guDisableClientState(GU_COLOR_ARRAY);
    //enable normal in array
    edk::GU_GLSL::guDisableClientState(GU_NORMAL_ARRAY);
    //enable texture coord in array
    edk::GU_GLSL::guDisableClientState(GU_TEXTURE_COORD_ARRAY);

    edk::GU_GLSL::guDontUseBuffer(GU_ARRAY_BUFFER);
    //change the drawFunction
    this->vboDraw = &edk::shape::Polygon3DList::draw_XYZ_RGB_NxNyNz_UVxUVy;
}
void edk::shape::Polygon3DList::drawUpdate_XY_RGBA_NxNyNz_UVxUVy(edk::uint32 mode){
    this->updateVBO();
    edk::GU_GLSL::guUseBuffer(GU_ARRAY_BUFFER,this->vbo);

    //enable texture coord in array
    edk::GU_GLSL::guEnableClientState(GU_TEXTURE_COORD_ARRAY);
    //set the texture coor position in array
    edk::GU_GLSL::guTexCoordPointer2f32(9u,11u);
    //enable normal in array
    edk::GU_GLSL::guEnableClientState(GU_NORMAL_ARRAY);
    //set the normal position in array
    edk::GU_GLSL::guNormalPointerF32(6u,11u);
    //enable color in array
    edk::GU_GLSL::guEnableClientState(GU_COLOR_ARRAY);
    //set the color position in array
    edk::GU_GLSL::guColorPointer4f32(2u,11u);
    //enable vertex in array
    edk::GU_GLSL::guEnableClientState(GU_VERTEX_ARRAY);
    //set the vertex position in array
    edk::GU_GLSL::guVertexPointer2f32(0u,11u);

    //draw the array
    edk::GU_GLSL::guDrawArrays(mode,0,this->vboCount);

    //enable vertex in array
    edk::GU_GLSL::guDisableClientState(GU_VERTEX_ARRAY);
    //enable color in array
    edk::GU_GLSL::guDisableClientState(GU_COLOR_ARRAY);
    //enable normal in array
    edk::GU_GLSL::guDisableClientState(GU_NORMAL_ARRAY);
    //enable texture coord in array
    edk::GU_GLSL::guDisableClientState(GU_TEXTURE_COORD_ARRAY);

    edk::GU_GLSL::guDontUseBuffer(GU_ARRAY_BUFFER);
    //change the drawFunction
    this->vboDraw = &edk::shape::Polygon3DList::draw_XY_RGBA_NxNyNz_UVxUVy;
}
void edk::shape::Polygon3DList::drawUpdate_XYZ_RGBA_NxNyNz_UVxUVy(edk::uint32 mode){
    this->updateVBO();
    edk::GU_GLSL::guUseBuffer(GU_ARRAY_BUFFER,this->vbo);

    edk::uint32 striide = 12 * sizeof(edk::float32);
    // --- 1. Posição (layout(location = 0) in vec3 aPos) ---
    // 3 floats de tamanho, stride de 12 floats, offset de 0
    glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, striide, (edk::classID)0);
    glEnableVertexAttribArray(0);

    // --- 2. Cor (layout(location = 1) in vec4 aColor) ---
    // 4 floats de tamanho, stride de 12 floats, offset de 3 floats
    glVertexAttribPointer(1, 4, GL_FLOAT, GL_FALSE, striide, (edk::classID)(3 * sizeof(GLfloat)));
    glEnableVertexAttribArray(1);

    // --- 3. Normal (layout(location = 2) in vec3 aNormal) ---
    // 3 floats de tamanho, stride de 12 floats, offset de 7 floats
    glVertexAttribPointer(2, 3, GL_FLOAT, GL_FALSE, striide, (edk::classID)(7 * sizeof(GLfloat)));
    glEnableVertexAttribArray(2);

    // --- 4. UV (Textura) (layout(location = 3) in vec2 aTexCoord) ---
    // 2 floats de tamanho, stride de 12 floats, offset de 10 floats
    glVertexAttribPointer(3, 2, GL_FLOAT, GL_FALSE, striide, (edk::classID)(10 * sizeof(GLfloat)));
    glEnableVertexAttribArray(3);

    //enable texture coord in array
    edk::GU_GLSL::guEnableClientState(GU_TEXTURE_COORD_ARRAY);
    //set the texture coor position in array
    edk::GU_GLSL::guTexCoordPointer2f32(10u,12u);
    //enable normal in array
    edk::GU_GLSL::guEnableClientState(GU_NORMAL_ARRAY);
    //set the normal position in array
    edk::GU_GLSL::guNormalPointerF32(7u,12u);
    //enable color in array
    edk::GU_GLSL::guEnableClientState(GU_COLOR_ARRAY);
    //set the color position in array
    edk::GU_GLSL::guColorPointer4f32(3u,12u);
    //enable vertex in array
    edk::GU_GLSL::guEnableClientState(GU_VERTEX_ARRAY);
    //set the vertex position in array
    edk::GU_GLSL::guVertexPointer3f32(0u,12u);

    //draw the array
    edk::GU_GLSL::guDrawArrays(mode,0,this->vboCount);

    //enable vertex in array
    edk::GU_GLSL::guDisableClientState(GU_VERTEX_ARRAY);
    //enable color in array
    edk::GU_GLSL::guDisableClientState(GU_COLOR_ARRAY);
    //enable normal in array
    edk::GU_GLSL::guDisableClientState(GU_NORMAL_ARRAY);
    //enable texture coord in array
    edk::GU_GLSL::guDisableClientState(GU_TEXTURE_COORD_ARRAY);

    edk::GU_GLSL::guDontUseBuffer(GU_ARRAY_BUFFER);
    //change the drawFunction
    this->vboDraw = &edk::shape::Polygon3DList::draw_XYZ_RGBA_NxNyNz_UVxUVy;
}
//DRAW WITH MATRIX
void edk::shape::Polygon3DList::drawWithMatrix_NULL(edk::uint32 mode){
    /*
    edk::GU_GLSL::guUseBuffer(GU_ARRAY_BUFFER,this->vboWithMatrix);

    //enable texture coord in array
    edk::GU_GLSL::guEnableClientState(GU_TEXTURE_COORD_ARRAY);
    //set the texture coor position in array
    edk::GU_GLSL::guTexCoordPointer2f32(0u);
    //enable normal in array
    edk::GU_GLSL::guEnableClientState(GU_NORMAL_ARRAY);
    //set the normal position in array
    edk::GU_GLSL::guNormalPointerF32(0u);
    //enable color in array
    edk::GU_GLSL::guEnableClientState(GU_COLOR_ARRAY);
    //set the color position in array
    edk::GU_GLSL::guColorPointer3f32(0);
    edk::GU_GLSL::guColorPointer4f32(0);
    //enable vertex in array
    edk::GU_GLSL::guEnableClientState(GU_VERTEX_ARRAY);
    //set the vertex position in array
    edk::GU_GLSL::guVertexPointer2f32(0u);
    edk::GU_GLSL::guVertexPointer3f32(0u);

    //draw the array
    edk::GU_GLSL::guDrawArrays(mode,0,this->vboWithMatrixCount);

    //enable vertex in array
    edk::GU_GLSL::guDisableClientState(GU_VERTEX_ARRAY);
    //enable color in array
    edk::GU_GLSL::guDisableClientState(GU_COLOR_ARRAY);
    //enable normal in array
    edk::GU_GLSL::guDisableClientState(GU_NORMAL_ARRAY);
    //enable texture coord in array
    edk::GU_GLSL::guDisableClientState(GU_TEXTURE_COORD_ARRAY);

    edk::GU_GLSL::guDontUseBuffer(GU_ARRAY_BUFFER);
*/
    edk::GU::guBegin(mode);
    this->drawVertexs();
    edk::GU::guEnd();
}
void edk::shape::Polygon3DList::drawWithMatrix_XY(edk::uint32 mode){
    edk::GU_GLSL::guUseBuffer(GU_ARRAY_BUFFER,this->vboWithMatrix);
    //draw only the positions
    //enable vertex in array
    edk::GU_GLSL::guEnableClientState(GU_VERTEX_ARRAY);
    //set the vertex position in array
    edk::GU_GLSL::guVertexPointer2f32(0u,2u);

    //draw the array
    edk::GU_GLSL::guDrawArrays(mode,0,this->vboWithMatrixCount);

    //enable vertex in array
    edk::GU_GLSL::guDisableClientState(GU_VERTEX_ARRAY);

    edk::GU_GLSL::guDontUseBuffer(GU_ARRAY_BUFFER);
}
void edk::shape::Polygon3DList::drawWithMatrix_XYZ(edk::uint32 mode){
    edk::GU_GLSL::guUseBuffer(GU_ARRAY_BUFFER,this->vboWithMatrix);

    //enable vertex in array
    edk::GU_GLSL::guEnableClientState(GU_VERTEX_ARRAY);
    //set the vertex position in array
    edk::GU_GLSL::guVertexPointer3f32(0u,3u);

    //draw the array
    edk::GU_GLSL::guDrawArrays(mode,0,this->vboWithMatrixCount);

    //enable vertex in array
    edk::GU_GLSL::guDisableClientState(GU_VERTEX_ARRAY);

    edk::GU_GLSL::guDontUseBuffer(GU_ARRAY_BUFFER);
}
void edk::shape::Polygon3DList::drawWithMatrix_XY_NxNyNz(edk::uint32 mode){
    edk::GU_GLSL::guUseBuffer(GU_ARRAY_BUFFER,this->vboWithMatrix);

    //enable normal in array
    edk::GU_GLSL::guEnableClientState(GU_NORMAL_ARRAY);
    //set the normal position in array
    edk::GU_GLSL::guNormalPointerF32(2u,5u);
    //enable vertex in array
    edk::GU_GLSL::guEnableClientState(GU_VERTEX_ARRAY);
    //set the vertex position in array
    edk::GU_GLSL::guVertexPointer2f32(0u,5u);

    //draw the array
    edk::GU_GLSL::guDrawArrays(mode,0,this->vboWithMatrixCount);

    //enable vertex in array
    edk::GU_GLSL::guDisableClientState(GU_VERTEX_ARRAY);
    //enable normal in array
    edk::GU_GLSL::guDisableClientState(GU_NORMAL_ARRAY);

    edk::GU_GLSL::guDontUseBuffer(GU_ARRAY_BUFFER);
}
void edk::shape::Polygon3DList::drawWithMatrix_XYZ_NxNyNz(edk::uint32 mode){
    edk::GU_GLSL::guUseBuffer(GU_ARRAY_BUFFER,this->vboWithMatrix);

    //enable normal in array
    edk::GU_GLSL::guEnableClientState(GU_NORMAL_ARRAY);
    //set the normal position in array
    edk::GU_GLSL::guNormalPointerF32(3u,6u);
    //enable vertex in array
    edk::GU_GLSL::guEnableClientState(GU_VERTEX_ARRAY);
    //set the vertex position in array
    edk::GU_GLSL::guVertexPointer3f32(0u,6u);

    //draw the array
    edk::GU_GLSL::guDrawArrays(mode,0,this->vboWithMatrixCount);

    //enable vertex in array
    edk::GU_GLSL::guDisableClientState(GU_VERTEX_ARRAY);
    //enable normal in array
    edk::GU_GLSL::guDisableClientState(GU_NORMAL_ARRAY);

    edk::GU_GLSL::guDontUseBuffer(GU_ARRAY_BUFFER);
}
void edk::shape::Polygon3DList::drawWithMatrix_XY_RGB(edk::uint32 mode){
    edk::GU_GLSL::guUseBuffer(GU_ARRAY_BUFFER,this->vboWithMatrix);

    //enable color in array
    edk::GU_GLSL::guEnableClientState(GU_COLOR_ARRAY);
    //set the color position in array
    edk::GU_GLSL::guColorPointer3f32(2u,5u);
    //enable vertex in array
    edk::GU_GLSL::guEnableClientState(GU_VERTEX_ARRAY);
    //set the vertex position in array
    edk::GU_GLSL::guVertexPointer2f32(0u,5u);

    //draw the array
    edk::GU_GLSL::guDrawArrays(mode,0,this->vboWithMatrixCount);

    //enable vertex in array
    edk::GU_GLSL::guDisableClientState(GU_VERTEX_ARRAY);
    //enable color in array
    edk::GU_GLSL::guDisableClientState(GU_COLOR_ARRAY);

    edk::GU_GLSL::guDontUseBuffer(GU_ARRAY_BUFFER);
}
void edk::shape::Polygon3DList::drawWithMatrix_XYZ_RGB(edk::uint32 mode){
    edk::GU_GLSL::guUseBuffer(GU_ARRAY_BUFFER,this->vboWithMatrix);

    //enable color in array
    edk::GU_GLSL::guEnableClientState(GU_COLOR_ARRAY);
    //set the color position in array
    edk::GU_GLSL::guColorPointer3f32(3,6u);
    //enable vertex in array
    edk::GU_GLSL::guEnableClientState(GU_VERTEX_ARRAY);
    //set the vertex position in array
    edk::GU_GLSL::guVertexPointer3f32(0u,6u);

    //draw the array
    edk::GU_GLSL::guDrawArrays(mode,0,this->vboWithMatrixCount);

    //enable vertex in array
    edk::GU_GLSL::guDisableClientState(GU_VERTEX_ARRAY);
    //enable color in array
    edk::GU_GLSL::guDisableClientState(GU_COLOR_ARRAY);

    edk::GU_GLSL::guDontUseBuffer(GU_ARRAY_BUFFER);
}
void edk::shape::Polygon3DList::drawWithMatrix_XY_RGBA(edk::uint32 mode){
    edk::GU_GLSL::guUseBuffer(GU_ARRAY_BUFFER,this->vboWithMatrix);

    //enable color in array
    edk::GU_GLSL::guEnableClientState(GU_COLOR_ARRAY);
    //set the color position in array
    edk::GU_GLSL::guColorPointer4f32(2u,6u);
    //enable vertex in array
    edk::GU_GLSL::guEnableClientState(GU_VERTEX_ARRAY);
    //set the vertex position in array
    edk::GU_GLSL::guVertexPointer2f32(0u,6u);

    //draw the array
    edk::GU_GLSL::guDrawArrays(mode,0,this->vboWithMatrixCount);

    //enable vertex in array
    edk::GU_GLSL::guDisableClientState(GU_VERTEX_ARRAY);
    //enable color in array
    edk::GU_GLSL::guDisableClientState(GU_COLOR_ARRAY);

    edk::GU_GLSL::guDontUseBuffer(GU_ARRAY_BUFFER);
}
void edk::shape::Polygon3DList::drawWithMatrix_XYZ_RGBA(edk::uint32 mode){
    edk::GU_GLSL::guUseBuffer(GU_ARRAY_BUFFER,this->vboWithMatrix);

    //enable color in array
    edk::GU_GLSL::guEnableClientState(GU_COLOR_ARRAY);
    //set the color position in array
    edk::GU_GLSL::guColorPointer4f32(3u,7u);
    //enable vertex in array
    edk::GU_GLSL::guEnableClientState(GU_VERTEX_ARRAY);
    //set the vertex position in array
    edk::GU_GLSL::guVertexPointer3f32(0u,7u);

    //draw the array
    edk::GU_GLSL::guDrawArrays(mode,0,this->vboWithMatrixCount);

    //enable vertex in array
    edk::GU_GLSL::guDisableClientState(GU_VERTEX_ARRAY);
    //enable color in array
    edk::GU_GLSL::guDisableClientState(GU_COLOR_ARRAY);

    edk::GU_GLSL::guDontUseBuffer(GU_ARRAY_BUFFER);
}
void edk::shape::Polygon3DList::drawWithMatrix_XY_RGB_NxNyNz(edk::uint32 mode){
    edk::GU_GLSL::guUseBuffer(GU_ARRAY_BUFFER,this->vboWithMatrix);

    //enable normal in array
    edk::GU_GLSL::guEnableClientState(GU_NORMAL_ARRAY);
    //set the normal position in array
    edk::GU_GLSL::guNormalPointerF32(5u,8u);
    //enable color in array
    edk::GU_GLSL::guEnableClientState(GU_COLOR_ARRAY);
    //set the color position in array
    edk::GU_GLSL::guColorPointer3f32(2u,8u);
    //enable vertex in array
    edk::GU_GLSL::guEnableClientState(GU_VERTEX_ARRAY);
    //set the vertex position in array
    edk::GU_GLSL::guVertexPointer2f32(0u,8u);

    //draw the array
    edk::GU_GLSL::guDrawArrays(mode,0,this->vboWithMatrixCount);

    //enable vertex in array
    edk::GU_GLSL::guDisableClientState(GU_VERTEX_ARRAY);
    //enable color in array
    edk::GU_GLSL::guDisableClientState(GU_COLOR_ARRAY);
    //enable normal in array
    edk::GU_GLSL::guDisableClientState(GU_NORMAL_ARRAY);

    edk::GU_GLSL::guDontUseBuffer(GU_ARRAY_BUFFER);
}
void edk::shape::Polygon3DList::drawWithMatrix_XYZ_RGB_NxNyNz(edk::uint32 mode){
    edk::GU_GLSL::guUseBuffer(GU_ARRAY_BUFFER,this->vboWithMatrix);

    //enable normal in array
    edk::GU_GLSL::guEnableClientState(GU_NORMAL_ARRAY);
    //set the normal position in array
    edk::GU_GLSL::guNormalPointerF32(6u,9u);
    //enable color in array
    edk::GU_GLSL::guEnableClientState(GU_COLOR_ARRAY);
    //set the color position in array
    edk::GU_GLSL::guColorPointer3f32(3u,9u);
    //enable vertex in array
    edk::GU_GLSL::guEnableClientState(GU_VERTEX_ARRAY);
    //set the vertex position in array
    edk::GU_GLSL::guVertexPointer3f32(0u,9u);

    //draw the array
    edk::GU_GLSL::guDrawArrays(mode,0,this->vboWithMatrixCount);

    //enable vertex in array
    edk::GU_GLSL::guDisableClientState(GU_VERTEX_ARRAY);
    //enable color in array
    edk::GU_GLSL::guDisableClientState(GU_COLOR_ARRAY);
    //enable normal in array
    edk::GU_GLSL::guDisableClientState(GU_NORMAL_ARRAY);

    edk::GU_GLSL::guDontUseBuffer(GU_ARRAY_BUFFER);
}
void edk::shape::Polygon3DList::drawWithMatrix_XY_RGBA_NxNyNz(edk::uint32 mode){
    edk::GU_GLSL::guUseBuffer(GU_ARRAY_BUFFER,this->vboWithMatrix);

    //enable normal in array
    edk::GU_GLSL::guEnableClientState(GU_NORMAL_ARRAY);
    //set the normal position in array
    edk::GU_GLSL::guNormalPointerF32(6u,9u);
    //enable color in array
    edk::GU_GLSL::guEnableClientState(GU_COLOR_ARRAY);
    //set the color position in array
    edk::GU_GLSL::guColorPointer4f32(2u,9u);
    //enable vertex in array
    edk::GU_GLSL::guEnableClientState(GU_VERTEX_ARRAY);
    //set the vertex position in array
    edk::GU_GLSL::guVertexPointer2f32(0u,9u);

    //draw the array
    edk::GU_GLSL::guDrawArrays(mode,0,this->vboWithMatrixCount);

    //enable vertex in array
    edk::GU_GLSL::guDisableClientState(GU_VERTEX_ARRAY);
    //enable color in array
    edk::GU_GLSL::guDisableClientState(GU_COLOR_ARRAY);
    //enable normal in array
    edk::GU_GLSL::guDisableClientState(GU_NORMAL_ARRAY);

    edk::GU_GLSL::guDontUseBuffer(GU_ARRAY_BUFFER);
}
void edk::shape::Polygon3DList::drawWithMatrix_XYZ_RGBA_NxNyNz(edk::uint32 mode){
    edk::GU_GLSL::guUseBuffer(GU_ARRAY_BUFFER,this->vboWithMatrix);

    //enable normal in array
    edk::GU_GLSL::guEnableClientState(GU_NORMAL_ARRAY);
    //set the normal position in array
    edk::GU_GLSL::guNormalPointerF32(7u,10u);
    //enable color in array
    edk::GU_GLSL::guEnableClientState(GU_COLOR_ARRAY);
    //set the color position in array
    edk::GU_GLSL::guColorPointer4f32(3u,10u);
    //enable vertex in array
    edk::GU_GLSL::guEnableClientState(GU_VERTEX_ARRAY);
    //set the vertex position in array
    edk::GU_GLSL::guVertexPointer3f32(0u,10u);

    //draw the array
    edk::GU_GLSL::guDrawArrays(mode,0,this->vboWithMatrixCount);

    //enable vertex in array
    edk::GU_GLSL::guDisableClientState(GU_VERTEX_ARRAY);
    //enable color in array
    edk::GU_GLSL::guDisableClientState(GU_COLOR_ARRAY);
    //enable normal in array
    edk::GU_GLSL::guDisableClientState(GU_NORMAL_ARRAY);

    edk::GU_GLSL::guDontUseBuffer(GU_ARRAY_BUFFER);
}
void edk::shape::Polygon3DList::drawWithMatrix_XY_RGB_NxNyNz_UVxUVy(edk::uint32 mode){
    edk::GU_GLSL::guUseBuffer(GU_ARRAY_BUFFER,this->vboWithMatrix);

    //enable texture coord in array
    edk::GU_GLSL::guEnableClientState(GU_TEXTURE_COORD_ARRAY);
    //set the texture coor position in array
    edk::GU_GLSL::guTexCoordPointer2f32(8u,10u);
    //enable normal in array
    edk::GU_GLSL::guEnableClientState(GU_NORMAL_ARRAY);
    //set the normal position in array
    edk::GU_GLSL::guNormalPointerF32(5u,10u);
    //enable color in array
    edk::GU_GLSL::guEnableClientState(GU_COLOR_ARRAY);
    //set the color position in array
    edk::GU_GLSL::guColorPointer3f32(2u,10u);
    //enable vertex in array
    edk::GU_GLSL::guEnableClientState(GU_VERTEX_ARRAY);
    //set the vertex position in array
    edk::GU_GLSL::guVertexPointer2f32(0u,10u);

    //draw the array
    edk::GU_GLSL::guDrawArrays(mode,0,this->vboWithMatrixCount);

    //enable vertex in array
    edk::GU_GLSL::guDisableClientState(GU_VERTEX_ARRAY);
    //enable color in array
    edk::GU_GLSL::guDisableClientState(GU_COLOR_ARRAY);
    //enable normal in array
    edk::GU_GLSL::guDisableClientState(GU_NORMAL_ARRAY);
    //enable texture coord in array
    edk::GU_GLSL::guDisableClientState(GU_TEXTURE_COORD_ARRAY);

    edk::GU_GLSL::guDontUseBuffer(GU_ARRAY_BUFFER);
}
void edk::shape::Polygon3DList::drawWithMatrix_XYZ_RGB_NxNyNz_UVxUVy(edk::uint32 mode){
    edk::GU_GLSL::guUseBuffer(GU_ARRAY_BUFFER,this->vboWithMatrix);

    //enable texture coord in array
    edk::GU_GLSL::guEnableClientState(GU_TEXTURE_COORD_ARRAY);
    //set the texture coor position in array
    edk::GU_GLSL::guTexCoordPointer2f32(9u,11u);
    //enable normal in array
    edk::GU_GLSL::guEnableClientState(GU_NORMAL_ARRAY);
    //set the normal position in array
    edk::GU_GLSL::guNormalPointerF32(6u,11u);
    //enable color in array
    edk::GU_GLSL::guEnableClientState(GU_COLOR_ARRAY);
    //set the color position in array
    edk::GU_GLSL::guColorPointer3f32(3u,11u);
    //enable vertex in array
    edk::GU_GLSL::guEnableClientState(GU_VERTEX_ARRAY);
    //set the vertex position in array
    edk::GU_GLSL::guVertexPointer3f32(0u,11u);

    //draw the array
    edk::GU_GLSL::guDrawArrays(mode,0,this->vboWithMatrixCount);

    //enable vertex in array
    edk::GU_GLSL::guDisableClientState(GU_VERTEX_ARRAY);
    //enable color in array
    edk::GU_GLSL::guDisableClientState(GU_COLOR_ARRAY);
    //enable normal in array
    edk::GU_GLSL::guDisableClientState(GU_NORMAL_ARRAY);
    //enable texture coord in array
    edk::GU_GLSL::guDisableClientState(GU_TEXTURE_COORD_ARRAY);

    edk::GU_GLSL::guDontUseBuffer(GU_ARRAY_BUFFER);
}
void edk::shape::Polygon3DList::drawWithMatrix_XY_RGBA_NxNyNz_UVxUVy(edk::uint32 mode){
    edk::GU_GLSL::guUseBuffer(GU_ARRAY_BUFFER,this->vboWithMatrix);

    //enable texture coord in array
    edk::GU_GLSL::guEnableClientState(GU_TEXTURE_COORD_ARRAY);
    //set the texture coor position in array
    edk::GU_GLSL::guTexCoordPointer2f32(9u,11u);
    //enable normal in array
    edk::GU_GLSL::guEnableClientState(GU_NORMAL_ARRAY);
    //set the normal position in array
    edk::GU_GLSL::guNormalPointerF32(6u,11u);
    //enable color in array
    edk::GU_GLSL::guEnableClientState(GU_COLOR_ARRAY);
    //set the color position in array
    edk::GU_GLSL::guColorPointer4f32(2u,11u);
    //enable vertex in array
    edk::GU_GLSL::guEnableClientState(GU_VERTEX_ARRAY);
    //set the vertex position in array
    edk::GU_GLSL::guVertexPointer2f32(0u,11u);

    //draw the array
    edk::GU_GLSL::guDrawArrays(mode,0,this->vboWithMatrixCount);

    //enable vertex in array
    edk::GU_GLSL::guDisableClientState(GU_VERTEX_ARRAY);
    //enable color in array
    edk::GU_GLSL::guDisableClientState(GU_COLOR_ARRAY);
    //enable normal in array
    edk::GU_GLSL::guDisableClientState(GU_NORMAL_ARRAY);
    //enable texture coord in array
    edk::GU_GLSL::guDisableClientState(GU_TEXTURE_COORD_ARRAY);

    edk::GU_GLSL::guDontUseBuffer(GU_ARRAY_BUFFER);
}
void edk::shape::Polygon3DList::drawWithMatrix_XYZ_RGBA_NxNyNz_UVxUVy(edk::uint32 mode){
    edk::GU_GLSL::guUseBuffer(GU_ARRAY_BUFFER,this->vboWithMatrix);

    //enable texture coord in array
    edk::GU_GLSL::guEnableClientState(GU_TEXTURE_COORD_ARRAY);
    //set the texture coor position in array
    edk::GU_GLSL::guTexCoordPointer2f32(10u,12u);
    //enable normal in array
    edk::GU_GLSL::guEnableClientState(GU_NORMAL_ARRAY);
    //set the normal position in array
    edk::GU_GLSL::guNormalPointerF32(7u,12u);
    //enable color in array
    edk::GU_GLSL::guEnableClientState(GU_COLOR_ARRAY);
    //set the color position in array
    edk::GU_GLSL::guColorPointer4f32(3u,12u);
    //enable vertex in array
    edk::GU_GLSL::guEnableClientState(GU_VERTEX_ARRAY);
    //set the vertex position in array
    edk::GU_GLSL::guVertexPointer3f32(0u,12u);

    //draw the array
    edk::GU_GLSL::guDrawArrays(mode,0,this->vboWithMatrixCount);

    //enable vertex in array
    edk::GU_GLSL::guDisableClientState(GU_VERTEX_ARRAY);
    //enable color in array
    edk::GU_GLSL::guDisableClientState(GU_COLOR_ARRAY);
    //enable normal in array
    edk::GU_GLSL::guDisableClientState(GU_NORMAL_ARRAY);
    //enable texture coord in array
    edk::GU_GLSL::guDisableClientState(GU_TEXTURE_COORD_ARRAY);

    edk::GU_GLSL::guDontUseBuffer(GU_ARRAY_BUFFER);
}
//DRAW UPDATE WITH MATRIX
void edk::shape::Polygon3DList::drawUpdateWithMatrix_NULL(edk::uint32 mode){
    //this->updateVBOWithMatrix();
    /*
    edk::GU_GLSL::guUseBuffer(GU_ARRAY_BUFFER,this->vboWithMatrix);

    //enable texture coord in array
    edk::GU_GLSL::guEnableClientState(GU_TEXTURE_COORD_ARRAY);
    //set the texture coor position in array
    edk::GU_GLSL::guTexCoordPointer2f32(0u);
    //enable normal in array
    edk::GU_GLSL::guEnableClientState(GU_NORMAL_ARRAY);
    //set the normal position in array
    edk::GU_GLSL::guNormalPointerF32(0u);
    //enable color in array
    edk::GU_GLSL::guEnableClientState(GU_COLOR_ARRAY);
    //set the color position in array
    edk::GU_GLSL::guColorPointer3f32(0);
    edk::GU_GLSL::guColorPointer4f32(0);
    //enable vertex in array
    edk::GU_GLSL::guEnableClientState(GU_VERTEX_ARRAY);
    //set the vertex position in array
    edk::GU_GLSL::guVertexPointer2f32(0u);
    edk::GU_GLSL::guVertexPointer3f32(0u);

    //draw the array
    edk::GU_GLSL::guDrawArrays(mode,0,this->vboWithMatrixCount);

    //enable vertex in array
    edk::GU_GLSL::guDisableClientState(GU_VERTEX_ARRAY);
    //enable color in array
    edk::GU_GLSL::guDisableClientState(GU_COLOR_ARRAY);
    //enable normal in array
    edk::GU_GLSL::guDisableClientState(GU_NORMAL_ARRAY);
    //enable texture coord in array
    edk::GU_GLSL::guDisableClientState(GU_TEXTURE_COORD_ARRAY);

    edk::GU_GLSL::guDontUseBuffer(GU_ARRAY_BUFFER);
*/
    edk::GU::guBegin(mode);
    this->drawVertexs();
    edk::GU::guEnd();
    //change the drawFunction
    this->setVBOFunctionNULL();
}
void edk::shape::Polygon3DList::drawUpdateWithMatrix_XY(edk::uint32 mode){
    this->updateVBOWithMatrix();
    edk::GU_GLSL::guUseBuffer(GU_ARRAY_BUFFER,this->vboWithMatrix);
    //draw only the positions
    //enable vertex in array
    edk::GU_GLSL::guEnableClientState(GU_VERTEX_ARRAY);
    //set the vertex position in array
    edk::GU_GLSL::guVertexPointer2f32(0u,2u);

    //draw the array
    edk::GU_GLSL::guDrawArrays(mode,0,this->vboWithMatrixCount);

    //enable vertex in array
    edk::GU_GLSL::guDisableClientState(GU_VERTEX_ARRAY);

    edk::GU_GLSL::guDontUseBuffer(GU_ARRAY_BUFFER);
    //change the drawFunction
    this->vboDrawWithMatrix = &edk::shape::Polygon3DList::drawWithMatrix_XY;
}
void edk::shape::Polygon3DList::drawUpdateWithMatrix_XYZ(edk::uint32 mode){
    this->updateVBOWithMatrix();
    edk::GU_GLSL::guUseBuffer(GU_ARRAY_BUFFER,this->vboWithMatrix);

    //enable vertex in array
    edk::GU_GLSL::guEnableClientState(GU_VERTEX_ARRAY);
    //set the vertex position in array
    edk::GU_GLSL::guVertexPointer3f32(0u,3u);

    //draw the array
    edk::GU_GLSL::guDrawArrays(mode,0,this->vboWithMatrixCount);

    //enable vertex in array
    edk::GU_GLSL::guDisableClientState(GU_VERTEX_ARRAY);

    edk::GU_GLSL::guDontUseBuffer(GU_ARRAY_BUFFER);
    //change the drawFunction
    this->vboDrawWithMatrix = &edk::shape::Polygon3DList::drawWithMatrix_XYZ;
}
void edk::shape::Polygon3DList::drawUpdateWithMatrix_XY_NxNyNz(edk::uint32 mode){
    this->updateVBOWithMatrix();
    edk::GU_GLSL::guUseBuffer(GU_ARRAY_BUFFER,this->vboWithMatrix);

    //enable normal in array
    edk::GU_GLSL::guEnableClientState(GU_NORMAL_ARRAY);
    //set the normal position in array
    edk::GU_GLSL::guNormalPointerF32(2u,5u);
    //enable vertex in array
    edk::GU_GLSL::guEnableClientState(GU_VERTEX_ARRAY);
    //set the vertex position in array
    edk::GU_GLSL::guVertexPointer2f32(0u,5u);

    //draw the array
    edk::GU_GLSL::guDrawArrays(mode,0,this->vboWithMatrixCount);

    //enable vertex in array
    edk::GU_GLSL::guDisableClientState(GU_VERTEX_ARRAY);
    //enable normal in array
    edk::GU_GLSL::guDisableClientState(GU_NORMAL_ARRAY);

    edk::GU_GLSL::guDontUseBuffer(GU_ARRAY_BUFFER);
    //change the drawFunction
    this->vboDrawWithMatrix = &edk::shape::Polygon3DList::drawWithMatrix_XY_NxNyNz;
}
void edk::shape::Polygon3DList::drawUpdateWithMatrix_XYZ_NxNyNz(edk::uint32 mode){
    this->updateVBOWithMatrix();
    edk::GU_GLSL::guUseBuffer(GU_ARRAY_BUFFER,this->vboWithMatrix);

    //enable normal in array
    edk::GU_GLSL::guEnableClientState(GU_NORMAL_ARRAY);
    //set the normal position in array
    edk::GU_GLSL::guNormalPointerF32(3u,6u);
    //enable vertex in array
    edk::GU_GLSL::guEnableClientState(GU_VERTEX_ARRAY);
    //set the vertex position in array
    edk::GU_GLSL::guVertexPointer3f32(0u,6u);

    //draw the array
    edk::GU_GLSL::guDrawArrays(mode,0,this->vboWithMatrixCount);

    //enable vertex in array
    edk::GU_GLSL::guDisableClientState(GU_VERTEX_ARRAY);
    //enable normal in array
    edk::GU_GLSL::guDisableClientState(GU_NORMAL_ARRAY);

    edk::GU_GLSL::guDontUseBuffer(GU_ARRAY_BUFFER);
    //change the drawFunction
    this->vboDrawWithMatrix = &edk::shape::Polygon3DList::drawWithMatrix_XYZ_NxNyNz;
}
void edk::shape::Polygon3DList::drawUpdateWithMatrix_XY_RGB(edk::uint32 mode){
    this->updateVBOWithMatrix();
    edk::GU_GLSL::guUseBuffer(GU_ARRAY_BUFFER,this->vboWithMatrix);

    //enable color in array
    edk::GU_GLSL::guEnableClientState(GU_COLOR_ARRAY);
    //set the color position in array
    edk::GU_GLSL::guColorPointer3f32(2u,5u);
    //enable vertex in array
    edk::GU_GLSL::guEnableClientState(GU_VERTEX_ARRAY);
    //set the vertex position in array
    edk::GU_GLSL::guVertexPointer2f32(0u,5u);

    //draw the array
    edk::GU_GLSL::guDrawArrays(mode,0,this->vboWithMatrixCount);

    //enable vertex in array
    edk::GU_GLSL::guDisableClientState(GU_VERTEX_ARRAY);
    //enable color in array
    edk::GU_GLSL::guDisableClientState(GU_COLOR_ARRAY);

    edk::GU_GLSL::guDontUseBuffer(GU_ARRAY_BUFFER);
    //change the drawFunction
    this->vboDrawWithMatrix = &edk::shape::Polygon3DList::drawWithMatrix_XY_RGB;
}
void edk::shape::Polygon3DList::drawUpdateWithMatrix_XYZ_RGB(edk::uint32 mode){
    this->updateVBOWithMatrix();
    edk::GU_GLSL::guUseBuffer(GU_ARRAY_BUFFER,this->vboWithMatrix);

    //enable color in array
    edk::GU_GLSL::guEnableClientState(GU_COLOR_ARRAY);
    //set the color position in array
    edk::GU_GLSL::guColorPointer3f32(3,6u);
    //enable vertex in array
    edk::GU_GLSL::guEnableClientState(GU_VERTEX_ARRAY);
    //set the vertex position in array
    edk::GU_GLSL::guVertexPointer3f32(0u,6u);

    //draw the array
    edk::GU_GLSL::guDrawArrays(mode,0,this->vboWithMatrixCount);

    //enable vertex in array
    edk::GU_GLSL::guDisableClientState(GU_VERTEX_ARRAY);
    //enable color in array
    edk::GU_GLSL::guDisableClientState(GU_COLOR_ARRAY);

    edk::GU_GLSL::guDontUseBuffer(GU_ARRAY_BUFFER);
    //change the drawFunction
    this->vboDrawWithMatrix = &edk::shape::Polygon3DList::drawWithMatrix_XYZ_RGB;
}
void edk::shape::Polygon3DList::drawUpdateWithMatrix_XY_RGBA(edk::uint32 mode){
    this->updateVBOWithMatrix();
    edk::GU_GLSL::guUseBuffer(GU_ARRAY_BUFFER,this->vboWithMatrix);

    //enable color in array
    edk::GU_GLSL::guEnableClientState(GU_COLOR_ARRAY);
    //set the color position in array
    edk::GU_GLSL::guColorPointer4f32(2u,6u);
    //enable vertex in array
    edk::GU_GLSL::guEnableClientState(GU_VERTEX_ARRAY);
    //set the vertex position in array
    edk::GU_GLSL::guVertexPointer2f32(0u,6u);

    //draw the array
    edk::GU_GLSL::guDrawArrays(mode,0,this->vboWithMatrixCount);

    //enable vertex in array
    edk::GU_GLSL::guDisableClientState(GU_VERTEX_ARRAY);
    //enable color in array
    edk::GU_GLSL::guDisableClientState(GU_COLOR_ARRAY);

    edk::GU_GLSL::guDontUseBuffer(GU_ARRAY_BUFFER);
    //change the drawFunction
    this->vboDrawWithMatrix = &edk::shape::Polygon3DList::drawWithMatrix_XY_RGBA;
}
void edk::shape::Polygon3DList::drawUpdateWithMatrix_XYZ_RGBA(edk::uint32 mode){
    this->updateVBOWithMatrix();
    edk::GU_GLSL::guUseBuffer(GU_ARRAY_BUFFER,this->vboWithMatrix);

    //enable color in array
    edk::GU_GLSL::guEnableClientState(GU_COLOR_ARRAY);
    //set the color position in array
    edk::GU_GLSL::guColorPointer4f32(3u,7u);
    //enable vertex in array
    edk::GU_GLSL::guEnableClientState(GU_VERTEX_ARRAY);
    //set the vertex position in array
    edk::GU_GLSL::guVertexPointer3f32(0u,7u);

    //draw the array
    edk::GU_GLSL::guDrawArrays(mode,0,this->vboWithMatrixCount);

    //enable vertex in array
    edk::GU_GLSL::guDisableClientState(GU_VERTEX_ARRAY);
    //enable color in array
    edk::GU_GLSL::guDisableClientState(GU_COLOR_ARRAY);

    edk::GU_GLSL::guDontUseBuffer(GU_ARRAY_BUFFER);
    //change the drawFunction
    this->vboDrawWithMatrix = &edk::shape::Polygon3DList::drawWithMatrix_XYZ_RGBA;
}
void edk::shape::Polygon3DList::drawUpdateWithMatrix_XY_RGB_NxNyNz(edk::uint32 mode){
    this->updateVBOWithMatrix();
    edk::GU_GLSL::guUseBuffer(GU_ARRAY_BUFFER,this->vboWithMatrix);

    //enable normal in array
    edk::GU_GLSL::guEnableClientState(GU_NORMAL_ARRAY);
    //set the normal position in array
    edk::GU_GLSL::guNormalPointerF32(5u,8u);
    //enable color in array
    edk::GU_GLSL::guEnableClientState(GU_COLOR_ARRAY);
    //set the color position in array
    edk::GU_GLSL::guColorPointer3f32(2u,8u);
    //enable vertex in array
    edk::GU_GLSL::guEnableClientState(GU_VERTEX_ARRAY);
    //set the vertex position in array
    edk::GU_GLSL::guVertexPointer2f32(0u,8u);

    //draw the array
    edk::GU_GLSL::guDrawArrays(mode,0,this->vboWithMatrixCount);

    //enable vertex in array
    edk::GU_GLSL::guDisableClientState(GU_VERTEX_ARRAY);
    //enable color in array
    edk::GU_GLSL::guDisableClientState(GU_COLOR_ARRAY);
    //enable normal in array
    edk::GU_GLSL::guDisableClientState(GU_NORMAL_ARRAY);

    edk::GU_GLSL::guDontUseBuffer(GU_ARRAY_BUFFER);
    //change the drawFunction
    this->vboDrawWithMatrix = &edk::shape::Polygon3DList::drawWithMatrix_XY_RGB_NxNyNz;
}
void edk::shape::Polygon3DList::drawUpdateWithMatrix_XYZ_RGB_NxNyNz(edk::uint32 mode){
    this->updateVBOWithMatrix();
    edk::GU_GLSL::guUseBuffer(GU_ARRAY_BUFFER,this->vboWithMatrix);

    //enable normal in array
    edk::GU_GLSL::guEnableClientState(GU_NORMAL_ARRAY);
    //set the normal position in array
    edk::GU_GLSL::guNormalPointerF32(6u,9u);
    //enable color in array
    edk::GU_GLSL::guEnableClientState(GU_COLOR_ARRAY);
    //set the color position in array
    edk::GU_GLSL::guColorPointer3f32(3u,9u);
    //enable vertex in array
    edk::GU_GLSL::guEnableClientState(GU_VERTEX_ARRAY);
    //set the vertex position in array
    edk::GU_GLSL::guVertexPointer3f32(0u,9u);

    //draw the array
    edk::GU_GLSL::guDrawArrays(mode,0,this->vboWithMatrixCount);

    //enable vertex in array
    edk::GU_GLSL::guDisableClientState(GU_VERTEX_ARRAY);
    //enable color in array
    edk::GU_GLSL::guDisableClientState(GU_COLOR_ARRAY);
    //enable normal in array
    edk::GU_GLSL::guDisableClientState(GU_NORMAL_ARRAY);

    edk::GU_GLSL::guDontUseBuffer(GU_ARRAY_BUFFER);
    //change the drawFunction
    this->vboDrawWithMatrix = &edk::shape::Polygon3DList::drawWithMatrix_XYZ_RGB_NxNyNz;
}
void edk::shape::Polygon3DList::drawUpdateWithMatrix_XY_RGBA_NxNyNz(edk::uint32 mode){
    this->updateVBOWithMatrix();
    edk::GU_GLSL::guUseBuffer(GU_ARRAY_BUFFER,this->vboWithMatrix);

    //enable normal in array
    edk::GU_GLSL::guEnableClientState(GU_NORMAL_ARRAY);
    //set the normal position in array
    edk::GU_GLSL::guNormalPointerF32(6u,9u);
    //enable color in array
    edk::GU_GLSL::guEnableClientState(GU_COLOR_ARRAY);
    //set the color position in array
    edk::GU_GLSL::guColorPointer4f32(2u,9u);
    //enable vertex in array
    edk::GU_GLSL::guEnableClientState(GU_VERTEX_ARRAY);
    //set the vertex position in array
    edk::GU_GLSL::guVertexPointer2f32(0u,9u);

    //draw the array
    edk::GU_GLSL::guDrawArrays(mode,0,this->vboWithMatrixCount);

    //enable vertex in array
    edk::GU_GLSL::guDisableClientState(GU_VERTEX_ARRAY);
    //enable color in array
    edk::GU_GLSL::guDisableClientState(GU_COLOR_ARRAY);
    //enable normal in array
    edk::GU_GLSL::guDisableClientState(GU_NORMAL_ARRAY);

    edk::GU_GLSL::guDontUseBuffer(GU_ARRAY_BUFFER);
    //change the drawFunction
    this->vboDrawWithMatrix = &edk::shape::Polygon3DList::drawWithMatrix_XY_RGBA_NxNyNz;
}
void edk::shape::Polygon3DList::drawUpdateWithMatrix_XYZ_RGBA_NxNyNz(edk::uint32 mode){
    this->updateVBOWithMatrix();
    edk::GU_GLSL::guUseBuffer(GU_ARRAY_BUFFER,this->vboWithMatrix);

    //enable normal in array
    edk::GU_GLSL::guEnableClientState(GU_NORMAL_ARRAY);
    //set the normal position in array
    edk::GU_GLSL::guNormalPointerF32(7u,10u);
    //enable color in array
    edk::GU_GLSL::guEnableClientState(GU_COLOR_ARRAY);
    //set the color position in array
    edk::GU_GLSL::guColorPointer4f32(3u,10u);
    //enable vertex in array
    edk::GU_GLSL::guEnableClientState(GU_VERTEX_ARRAY);
    //set the vertex position in array
    edk::GU_GLSL::guVertexPointer3f32(0u,10u);

    //draw the array
    edk::GU_GLSL::guDrawArrays(mode,0,this->vboWithMatrixCount);

    //enable vertex in array
    edk::GU_GLSL::guDisableClientState(GU_VERTEX_ARRAY);
    //enable color in array
    edk::GU_GLSL::guDisableClientState(GU_COLOR_ARRAY);
    //enable normal in array
    edk::GU_GLSL::guDisableClientState(GU_NORMAL_ARRAY);

    edk::GU_GLSL::guDontUseBuffer(GU_ARRAY_BUFFER);
    //change the drawFunction
    this->vboDrawWithMatrix = &edk::shape::Polygon3DList::drawWithMatrix_XYZ_RGBA_NxNyNz;
}
void edk::shape::Polygon3DList::drawUpdateWithMatrix_XY_RGB_NxNyNz_UVxUVy(edk::uint32 mode){
    this->updateVBOWithMatrix();
    edk::GU_GLSL::guUseBuffer(GU_ARRAY_BUFFER,this->vboWithMatrix);

    //enable texture coord in array
    edk::GU_GLSL::guEnableClientState(GU_TEXTURE_COORD_ARRAY);
    //set the texture coor position in array
    edk::GU_GLSL::guTexCoordPointer2f32(8u,10u);
    //enable normal in array
    edk::GU_GLSL::guEnableClientState(GU_NORMAL_ARRAY);
    //set the normal position in array
    edk::GU_GLSL::guNormalPointerF32(5u,10u);
    //enable color in array
    edk::GU_GLSL::guEnableClientState(GU_COLOR_ARRAY);
    //set the color position in array
    edk::GU_GLSL::guColorPointer3f32(2u,10u);
    //enable vertex in array
    edk::GU_GLSL::guEnableClientState(GU_VERTEX_ARRAY);
    //set the vertex position in array
    edk::GU_GLSL::guVertexPointer2f32(0u,10u);

    //draw the array
    edk::GU_GLSL::guDrawArrays(mode,0,this->vboWithMatrixCount);

    //enable vertex in array
    edk::GU_GLSL::guDisableClientState(GU_VERTEX_ARRAY);
    //enable color in array
    edk::GU_GLSL::guDisableClientState(GU_COLOR_ARRAY);
    //enable normal in array
    edk::GU_GLSL::guDisableClientState(GU_NORMAL_ARRAY);
    //enable texture coord in array
    edk::GU_GLSL::guDisableClientState(GU_TEXTURE_COORD_ARRAY);

    edk::GU_GLSL::guDontUseBuffer(GU_ARRAY_BUFFER);
    //change the drawFunction
    this->vboDrawWithMatrix = &edk::shape::Polygon3DList::drawWithMatrix_XY_RGB_NxNyNz_UVxUVy;
}
void edk::shape::Polygon3DList::drawUpdateWithMatrix_XYZ_RGB_NxNyNz_UVxUVy(edk::uint32 mode){
    this->updateVBOWithMatrix();
    edk::GU_GLSL::guUseBuffer(GU_ARRAY_BUFFER,this->vboWithMatrix);

    //enable texture coord in array
    edk::GU_GLSL::guEnableClientState(GU_TEXTURE_COORD_ARRAY);
    //set the texture coor position in array
    edk::GU_GLSL::guTexCoordPointer2f32(9u,11u);
    //enable normal in array
    edk::GU_GLSL::guEnableClientState(GU_NORMAL_ARRAY);
    //set the normal position in array
    edk::GU_GLSL::guNormalPointerF32(6u,11u);
    //enable color in array
    edk::GU_GLSL::guEnableClientState(GU_COLOR_ARRAY);
    //set the color position in array
    edk::GU_GLSL::guColorPointer3f32(3u,11u);
    //enable vertex in array
    edk::GU_GLSL::guEnableClientState(GU_VERTEX_ARRAY);
    //set the vertex position in array
    edk::GU_GLSL::guVertexPointer3f32(0u,11u);

    //draw the array
    edk::GU_GLSL::guDrawArrays(mode,0,this->vboWithMatrixCount);

    //enable vertex in array
    edk::GU_GLSL::guDisableClientState(GU_VERTEX_ARRAY);
    //enable color in array
    edk::GU_GLSL::guDisableClientState(GU_COLOR_ARRAY);
    //enable normal in array
    edk::GU_GLSL::guDisableClientState(GU_NORMAL_ARRAY);
    //enable texture coord in array
    edk::GU_GLSL::guDisableClientState(GU_TEXTURE_COORD_ARRAY);

    edk::GU_GLSL::guDontUseBuffer(GU_ARRAY_BUFFER);
    //change the drawFunction
    this->vboDrawWithMatrix = &edk::shape::Polygon3DList::drawWithMatrix_XYZ_RGB_NxNyNz_UVxUVy;
}
void edk::shape::Polygon3DList::drawUpdateWithMatrix_XY_RGBA_NxNyNz_UVxUVy(edk::uint32 mode){
    this->updateVBOWithMatrix();
    edk::GU_GLSL::guUseBuffer(GU_ARRAY_BUFFER,this->vboWithMatrix);

    //enable texture coord in array
    edk::GU_GLSL::guEnableClientState(GU_TEXTURE_COORD_ARRAY);
    //set the texture coor position in array
    edk::GU_GLSL::guTexCoordPointer2f32(9u,11u);
    //enable normal in array
    edk::GU_GLSL::guEnableClientState(GU_NORMAL_ARRAY);
    //set the normal position in array
    edk::GU_GLSL::guNormalPointerF32(6u,11u);
    //enable color in array
    edk::GU_GLSL::guEnableClientState(GU_COLOR_ARRAY);
    //set the color position in array
    edk::GU_GLSL::guColorPointer4f32(2u,11u);
    //enable vertex in array
    edk::GU_GLSL::guEnableClientState(GU_VERTEX_ARRAY);
    //set the vertex position in array
    edk::GU_GLSL::guVertexPointer2f32(0u,11u);

    //draw the array
    edk::GU_GLSL::guDrawArrays(mode,0,this->vboWithMatrixCount);

    //enable vertex in array
    edk::GU_GLSL::guDisableClientState(GU_VERTEX_ARRAY);
    //enable color in array
    edk::GU_GLSL::guDisableClientState(GU_COLOR_ARRAY);
    //enable normal in array
    edk::GU_GLSL::guDisableClientState(GU_NORMAL_ARRAY);
    //enable texture coord in array
    edk::GU_GLSL::guDisableClientState(GU_TEXTURE_COORD_ARRAY);

    edk::GU_GLSL::guDontUseBuffer(GU_ARRAY_BUFFER);
    //change the drawFunction
    this->vboDrawWithMatrix = &edk::shape::Polygon3DList::drawWithMatrix_XY_RGBA_NxNyNz_UVxUVy;
}
void edk::shape::Polygon3DList::drawUpdateWithMatrix_XYZ_RGBA_NxNyNz_UVxUVy(edk::uint32 mode){
    this->updateVBOWithMatrix();
    edk::GU_GLSL::guUseBuffer(GU_ARRAY_BUFFER,this->vboWithMatrix);

    //enable texture coord in array
    edk::GU_GLSL::guEnableClientState(GU_TEXTURE_COORD_ARRAY);
    //set the texture coor position in array
    edk::GU_GLSL::guTexCoordPointer2f32(10u,12u);
    //enable normal in array
    edk::GU_GLSL::guEnableClientState(GU_NORMAL_ARRAY);
    //set the normal position in array
    edk::GU_GLSL::guNormalPointerF32(7u,12u);
    //enable color in array
    edk::GU_GLSL::guEnableClientState(GU_COLOR_ARRAY);
    //set the color position in array
    edk::GU_GLSL::guColorPointer4f32(3u,12u);
    //enable vertex in array
    edk::GU_GLSL::guEnableClientState(GU_VERTEX_ARRAY);
    //set the vertex position in array
    edk::GU_GLSL::guVertexPointer3f32(0u,12u);

    //draw the array
    edk::GU_GLSL::guDrawArrays(mode,0,this->vboWithMatrixCount);

    //enable vertex in array
    edk::GU_GLSL::guDisableClientState(GU_VERTEX_ARRAY);
    //enable color in array
    edk::GU_GLSL::guDisableClientState(GU_COLOR_ARRAY);
    //enable normal in array
    edk::GU_GLSL::guDisableClientState(GU_NORMAL_ARRAY);
    //enable texture coord in array
    edk::GU_GLSL::guDisableClientState(GU_TEXTURE_COORD_ARRAY);

    edk::GU_GLSL::guDontUseBuffer(GU_ARRAY_BUFFER);
    //change the drawFunction
    this->vboDrawWithMatrix = &edk::shape::Polygon3DList::drawWithMatrix_XYZ_RGBA_NxNyNz_UVxUVy;
}
//DRAWWire
void edk::shape::Polygon3DList::drawWire_NULL(edk::uint32 /*mode*/){
    this->drawWirePolygons();
}
void edk::shape::Polygon3DList::drawWire_XY(edk::uint32 mode){
    edk::GU_GLSL::guUseBuffer(GU_ARRAY_BUFFER,this->vboWire);
    //draw only the positions
    //enable vertex in array
    edk::GU_GLSL::guEnableClientState(GU_VERTEX_ARRAY);
    //set the vertex position in array
    edk::GU_GLSL::guVertexPointer2f32(0u,2u);

    //draw the array
    edk::GU_GLSL::guDrawArrays(mode,0,this->vboWireCount);

    //enable vertex in array
    edk::GU_GLSL::guDisableClientState(GU_VERTEX_ARRAY);

    edk::GU_GLSL::guDontUseBuffer(GU_ARRAY_BUFFER);
}
void edk::shape::Polygon3DList::drawWire_XYZ(edk::uint32 mode){
    edk::GU_GLSL::guUseBuffer(GU_ARRAY_BUFFER,this->vboWire);

    //enable vertex in array
    edk::GU_GLSL::guEnableClientState(GU_VERTEX_ARRAY);
    //set the vertex position in array
    edk::GU_GLSL::guVertexPointer3f32(0u,3u);

    //draw the array
    edk::GU_GLSL::guDrawArrays(mode,0,this->vboWireCount);

    //enable vertex in array
    edk::GU_GLSL::guDisableClientState(GU_VERTEX_ARRAY);

    edk::GU_GLSL::guDontUseBuffer(GU_ARRAY_BUFFER);
}
void edk::shape::Polygon3DList::drawWire_XY_NxNyNz(edk::uint32 mode){
    edk::GU_GLSL::guUseBuffer(GU_ARRAY_BUFFER,this->vboWire);

    //enable normal in array
    edk::GU_GLSL::guEnableClientState(GU_NORMAL_ARRAY);
    //set the normal position in array
    edk::GU_GLSL::guNormalPointerF32(2u,5u);
    //enable vertex in array
    edk::GU_GLSL::guEnableClientState(GU_VERTEX_ARRAY);
    //set the vertex position in array
    edk::GU_GLSL::guVertexPointer2f32(0u,5u);

    //draw the array
    edk::GU_GLSL::guDrawArrays(mode,0,this->vboWireCount);

    //enable vertex in array
    edk::GU_GLSL::guDisableClientState(GU_VERTEX_ARRAY);
    //enable normal in array
    edk::GU_GLSL::guDisableClientState(GU_NORMAL_ARRAY);

    edk::GU_GLSL::guDontUseBuffer(GU_ARRAY_BUFFER);
}
void edk::shape::Polygon3DList::drawWire_XYZ_NxNyNz(edk::uint32 mode){
    edk::GU_GLSL::guUseBuffer(GU_ARRAY_BUFFER,this->vboWire);

    //enable normal in array
    edk::GU_GLSL::guEnableClientState(GU_NORMAL_ARRAY);
    //set the normal position in array
    edk::GU_GLSL::guNormalPointerF32(3u,6u);
    //enable vertex in array
    edk::GU_GLSL::guEnableClientState(GU_VERTEX_ARRAY);
    //set the vertex position in array
    edk::GU_GLSL::guVertexPointer3f32(0u,6u);

    //draw the array
    edk::GU_GLSL::guDrawArrays(mode,0,this->vboWireCount);

    //enable vertex in array
    edk::GU_GLSL::guDisableClientState(GU_VERTEX_ARRAY);
    //enable normal in array
    edk::GU_GLSL::guDisableClientState(GU_NORMAL_ARRAY);

    edk::GU_GLSL::guDontUseBuffer(GU_ARRAY_BUFFER);
}
void edk::shape::Polygon3DList::drawWire_XY_RGB(edk::uint32 mode){
    edk::GU_GLSL::guUseBuffer(GU_ARRAY_BUFFER,this->vboWire);

    //enable color in array
    edk::GU_GLSL::guEnableClientState(GU_COLOR_ARRAY);
    //set the color position in array
    edk::GU_GLSL::guColorPointer3f32(2u,5u);
    //enable vertex in array
    edk::GU_GLSL::guEnableClientState(GU_VERTEX_ARRAY);
    //set the vertex position in array
    edk::GU_GLSL::guVertexPointer2f32(0u,5u);

    //draw the array
    edk::GU_GLSL::guDrawArrays(mode,0,this->vboWireCount);

    //enable vertex in array
    edk::GU_GLSL::guDisableClientState(GU_VERTEX_ARRAY);
    //enable color in array
    edk::GU_GLSL::guDisableClientState(GU_COLOR_ARRAY);

    edk::GU_GLSL::guDontUseBuffer(GU_ARRAY_BUFFER);
}
void edk::shape::Polygon3DList::drawWire_XYZ_RGB(edk::uint32 mode){
    edk::GU_GLSL::guUseBuffer(GU_ARRAY_BUFFER,this->vboWire);

    //enable color in array
    edk::GU_GLSL::guEnableClientState(GU_COLOR_ARRAY);
    //set the color position in array
    edk::GU_GLSL::guColorPointer3f32(3,6u);
    //enable vertex in array
    edk::GU_GLSL::guEnableClientState(GU_VERTEX_ARRAY);
    //set the vertex position in array
    edk::GU_GLSL::guVertexPointer3f32(0u,6u);

    //draw the array
    edk::GU_GLSL::guDrawArrays(mode,0,this->vboWireCount);

    //enable vertex in array
    edk::GU_GLSL::guDisableClientState(GU_VERTEX_ARRAY);
    //enable color in array
    edk::GU_GLSL::guDisableClientState(GU_COLOR_ARRAY);

    edk::GU_GLSL::guDontUseBuffer(GU_ARRAY_BUFFER);
}
void edk::shape::Polygon3DList::drawWire_XY_RGBA(edk::uint32 mode){
    edk::GU_GLSL::guUseBuffer(GU_ARRAY_BUFFER,this->vboWire);

    //enable color in array
    edk::GU_GLSL::guEnableClientState(GU_COLOR_ARRAY);
    //set the color position in array
    edk::GU_GLSL::guColorPointer4f32(2u,6u);
    //enable vertex in array
    edk::GU_GLSL::guEnableClientState(GU_VERTEX_ARRAY);
    //set the vertex position in array
    edk::GU_GLSL::guVertexPointer2f32(0u,6u);

    //draw the array
    edk::GU_GLSL::guDrawArrays(mode,0,this->vboWireCount);

    //enable vertex in array
    edk::GU_GLSL::guDisableClientState(GU_VERTEX_ARRAY);
    //enable color in array
    edk::GU_GLSL::guDisableClientState(GU_COLOR_ARRAY);

    edk::GU_GLSL::guDontUseBuffer(GU_ARRAY_BUFFER);
}
void edk::shape::Polygon3DList::drawWire_XYZ_RGBA(edk::uint32 mode){
    edk::GU_GLSL::guUseBuffer(GU_ARRAY_BUFFER,this->vboWire);

    //enable color in array
    edk::GU_GLSL::guEnableClientState(GU_COLOR_ARRAY);
    //set the color position in array
    edk::GU_GLSL::guColorPointer4f32(3u,7u);
    //enable vertex in array
    edk::GU_GLSL::guEnableClientState(GU_VERTEX_ARRAY);
    //set the vertex position in array
    edk::GU_GLSL::guVertexPointer3f32(0u,7u);

    //draw the array
    edk::GU_GLSL::guDrawArrays(mode,0,this->vboWireCount);

    //enable vertex in array
    edk::GU_GLSL::guDisableClientState(GU_VERTEX_ARRAY);
    //enable color in array
    edk::GU_GLSL::guDisableClientState(GU_COLOR_ARRAY);

    edk::GU_GLSL::guDontUseBuffer(GU_ARRAY_BUFFER);
}
void edk::shape::Polygon3DList::drawWire_XY_RGB_NxNyNz(edk::uint32 mode){
    edk::GU_GLSL::guUseBuffer(GU_ARRAY_BUFFER,this->vboWire);

    //enable normal in array
    edk::GU_GLSL::guEnableClientState(GU_NORMAL_ARRAY);
    //set the normal position in array
    edk::GU_GLSL::guNormalPointerF32(5u,8u);
    //enable color in array
    edk::GU_GLSL::guEnableClientState(GU_COLOR_ARRAY);
    //set the color position in array
    edk::GU_GLSL::guColorPointer3f32(2u,8u);
    //enable vertex in array
    edk::GU_GLSL::guEnableClientState(GU_VERTEX_ARRAY);
    //set the vertex position in array
    edk::GU_GLSL::guVertexPointer2f32(0u,8u);

    //draw the array
    edk::GU_GLSL::guDrawArrays(mode,0,this->vboWireCount);

    //enable vertex in array
    edk::GU_GLSL::guDisableClientState(GU_VERTEX_ARRAY);
    //enable color in array
    edk::GU_GLSL::guDisableClientState(GU_COLOR_ARRAY);
    //enable normal in array
    edk::GU_GLSL::guDisableClientState(GU_NORMAL_ARRAY);

    edk::GU_GLSL::guDontUseBuffer(GU_ARRAY_BUFFER);
}
void edk::shape::Polygon3DList::drawWire_XYZ_RGB_NxNyNz(edk::uint32 mode){
    edk::GU_GLSL::guUseBuffer(GU_ARRAY_BUFFER,this->vboWire);

    //enable normal in array
    edk::GU_GLSL::guEnableClientState(GU_NORMAL_ARRAY);
    //set the normal position in array
    edk::GU_GLSL::guNormalPointerF32(6u,9u);
    //enable color in array
    edk::GU_GLSL::guEnableClientState(GU_COLOR_ARRAY);
    //set the color position in array
    edk::GU_GLSL::guColorPointer3f32(3u,9u);
    //enable vertex in array
    edk::GU_GLSL::guEnableClientState(GU_VERTEX_ARRAY);
    //set the vertex position in array
    edk::GU_GLSL::guVertexPointer3f32(0u,9u);

    //draw the array
    edk::GU_GLSL::guDrawArrays(mode,0,this->vboWireCount);

    //enable vertex in array
    edk::GU_GLSL::guDisableClientState(GU_VERTEX_ARRAY);
    //enable color in array
    edk::GU_GLSL::guDisableClientState(GU_COLOR_ARRAY);
    //enable normal in array
    edk::GU_GLSL::guDisableClientState(GU_NORMAL_ARRAY);

    edk::GU_GLSL::guDontUseBuffer(GU_ARRAY_BUFFER);
}
void edk::shape::Polygon3DList::drawWire_XY_RGBA_NxNyNz(edk::uint32 mode){
    edk::GU_GLSL::guUseBuffer(GU_ARRAY_BUFFER,this->vboWire);

    //enable normal in array
    edk::GU_GLSL::guEnableClientState(GU_NORMAL_ARRAY);
    //set the normal position in array
    edk::GU_GLSL::guNormalPointerF32(6u,9u);
    //enable color in array
    edk::GU_GLSL::guEnableClientState(GU_COLOR_ARRAY);
    //set the color position in array
    edk::GU_GLSL::guColorPointer4f32(2u,9u);
    //enable vertex in array
    edk::GU_GLSL::guEnableClientState(GU_VERTEX_ARRAY);
    //set the vertex position in array
    edk::GU_GLSL::guVertexPointer2f32(0u,9u);

    //draw the array
    edk::GU_GLSL::guDrawArrays(mode,0,this->vboWireCount);

    //enable vertex in array
    edk::GU_GLSL::guDisableClientState(GU_VERTEX_ARRAY);
    //enable color in array
    edk::GU_GLSL::guDisableClientState(GU_COLOR_ARRAY);
    //enable normal in array
    edk::GU_GLSL::guDisableClientState(GU_NORMAL_ARRAY);

    edk::GU_GLSL::guDontUseBuffer(GU_ARRAY_BUFFER);
}
void edk::shape::Polygon3DList::drawWire_XYZ_RGBA_NxNyNz(edk::uint32 mode){
    edk::GU_GLSL::guUseBuffer(GU_ARRAY_BUFFER,this->vboWire);

    //enable normal in array
    edk::GU_GLSL::guEnableClientState(GU_NORMAL_ARRAY);
    //set the normal position in array
    edk::GU_GLSL::guNormalPointerF32(7u,10u);
    //enable color in array
    edk::GU_GLSL::guEnableClientState(GU_COLOR_ARRAY);
    //set the color position in array
    edk::GU_GLSL::guColorPointer4f32(3u,10u);
    //enable vertex in array
    edk::GU_GLSL::guEnableClientState(GU_VERTEX_ARRAY);
    //set the vertex position in array
    edk::GU_GLSL::guVertexPointer3f32(0u,10u);

    //draw the array
    edk::GU_GLSL::guDrawArrays(mode,0,this->vboWireCount);

    //enable vertex in array
    edk::GU_GLSL::guDisableClientState(GU_VERTEX_ARRAY);
    //enable color in array
    edk::GU_GLSL::guDisableClientState(GU_COLOR_ARRAY);
    //enable normal in array
    edk::GU_GLSL::guDisableClientState(GU_NORMAL_ARRAY);

    edk::GU_GLSL::guDontUseBuffer(GU_ARRAY_BUFFER);
}
void edk::shape::Polygon3DList::drawWire_XY_RGB_NxNyNz_UVxUVy(edk::uint32 mode){
    edk::GU_GLSL::guUseBuffer(GU_ARRAY_BUFFER,this->vboWire);

    //enable texture coord in array
    edk::GU_GLSL::guEnableClientState(GU_TEXTURE_COORD_ARRAY);
    //set the texture coor position in array
    edk::GU_GLSL::guTexCoordPointer2f32(8u,10u);
    //enable normal in array
    edk::GU_GLSL::guEnableClientState(GU_NORMAL_ARRAY);
    //set the normal position in array
    edk::GU_GLSL::guNormalPointerF32(5u,10u);
    //enable color in array
    edk::GU_GLSL::guEnableClientState(GU_COLOR_ARRAY);
    //set the color position in array
    edk::GU_GLSL::guColorPointer3f32(2u,10u);
    //enable vertex in array
    edk::GU_GLSL::guEnableClientState(GU_VERTEX_ARRAY);
    //set the vertex position in array
    edk::GU_GLSL::guVertexPointer2f32(0u,10u);

    //draw the array
    edk::GU_GLSL::guDrawArrays(mode,0,this->vboWireCount);

    //enable vertex in array
    edk::GU_GLSL::guDisableClientState(GU_VERTEX_ARRAY);
    //enable color in array
    edk::GU_GLSL::guDisableClientState(GU_COLOR_ARRAY);
    //enable normal in array
    edk::GU_GLSL::guDisableClientState(GU_NORMAL_ARRAY);
    //enable texture coord in array
    edk::GU_GLSL::guDisableClientState(GU_TEXTURE_COORD_ARRAY);

    edk::GU_GLSL::guDontUseBuffer(GU_ARRAY_BUFFER);
}
void edk::shape::Polygon3DList::drawWire_XYZ_RGB_NxNyNz_UVxUVy(edk::uint32 mode){
    edk::GU_GLSL::guUseBuffer(GU_ARRAY_BUFFER,this->vboWire);

    //enable texture coord in array
    edk::GU_GLSL::guEnableClientState(GU_TEXTURE_COORD_ARRAY);
    //set the texture coor position in array
    edk::GU_GLSL::guTexCoordPointer2f32(9u,11u);
    //enable normal in array
    edk::GU_GLSL::guEnableClientState(GU_NORMAL_ARRAY);
    //set the normal position in array
    edk::GU_GLSL::guNormalPointerF32(6u,11u);
    //enable color in array
    edk::GU_GLSL::guEnableClientState(GU_COLOR_ARRAY);
    //set the color position in array
    edk::GU_GLSL::guColorPointer3f32(3u,11u);
    //enable vertex in array
    edk::GU_GLSL::guEnableClientState(GU_VERTEX_ARRAY);
    //set the vertex position in array
    edk::GU_GLSL::guVertexPointer3f32(0u,11u);

    //draw the array
    edk::GU_GLSL::guDrawArrays(mode,0,this->vboWireCount);

    //enable vertex in array
    edk::GU_GLSL::guDisableClientState(GU_VERTEX_ARRAY);
    //enable color in array
    edk::GU_GLSL::guDisableClientState(GU_COLOR_ARRAY);
    //enable normal in array
    edk::GU_GLSL::guDisableClientState(GU_NORMAL_ARRAY);
    //enable texture coord in array
    edk::GU_GLSL::guDisableClientState(GU_TEXTURE_COORD_ARRAY);

    edk::GU_GLSL::guDontUseBuffer(GU_ARRAY_BUFFER);
}
void edk::shape::Polygon3DList::drawWire_XY_RGBA_NxNyNz_UVxUVy(edk::uint32 mode){
    edk::GU_GLSL::guUseBuffer(GU_ARRAY_BUFFER,this->vboWire);

    //enable texture coord in array
    edk::GU_GLSL::guEnableClientState(GU_TEXTURE_COORD_ARRAY);
    //set the texture coor position in array
    edk::GU_GLSL::guTexCoordPointer2f32(9u,11u);
    //enable normal in array
    edk::GU_GLSL::guEnableClientState(GU_NORMAL_ARRAY);
    //set the normal position in array
    edk::GU_GLSL::guNormalPointerF32(6u,11u);
    //enable color in array
    edk::GU_GLSL::guEnableClientState(GU_COLOR_ARRAY);
    //set the color position in array
    edk::GU_GLSL::guColorPointer4f32(2u,11u);
    //enable vertex in array
    edk::GU_GLSL::guEnableClientState(GU_VERTEX_ARRAY);
    //set the vertex position in array
    edk::GU_GLSL::guVertexPointer2f32(0u,11u);

    //draw the array
    edk::GU_GLSL::guDrawArrays(mode,0,this->vboWireCount);

    //enable vertex in array
    edk::GU_GLSL::guDisableClientState(GU_VERTEX_ARRAY);
    //enable color in array
    edk::GU_GLSL::guDisableClientState(GU_COLOR_ARRAY);
    //enable normal in array
    edk::GU_GLSL::guDisableClientState(GU_NORMAL_ARRAY);
    //enable texture coord in array
    edk::GU_GLSL::guDisableClientState(GU_TEXTURE_COORD_ARRAY);

    edk::GU_GLSL::guDontUseBuffer(GU_ARRAY_BUFFER);
}
void edk::shape::Polygon3DList::drawWire_XYZ_RGBA_NxNyNz_UVxUVy(edk::uint32 mode){
    edk::GU_GLSL::guUseBuffer(GU_ARRAY_BUFFER,this->vboWire);

    //enable texture coord in array
    edk::GU_GLSL::guEnableClientState(GU_TEXTURE_COORD_ARRAY);
    //set the texture coor position in array
    edk::GU_GLSL::guTexCoordPointer2f32(10u,12u);
    //enable normal in array
    edk::GU_GLSL::guEnableClientState(GU_NORMAL_ARRAY);
    //set the normal position in array
    edk::GU_GLSL::guNormalPointerF32(7u,12u);
    //enable color in array
    edk::GU_GLSL::guEnableClientState(GU_COLOR_ARRAY);
    //set the color position in array
    edk::GU_GLSL::guColorPointer4f32(3u,12u);
    //enable vertex in array
    edk::GU_GLSL::guEnableClientState(GU_VERTEX_ARRAY);
    //set the vertex position in array
    edk::GU_GLSL::guVertexPointer3f32(0u,12u);

    //draw the array
    edk::GU_GLSL::guDrawArrays(mode,0,this->vboWireCount);

    //enable vertex in array
    edk::GU_GLSL::guDisableClientState(GU_VERTEX_ARRAY);
    //enable color in array
    edk::GU_GLSL::guDisableClientState(GU_COLOR_ARRAY);
    //enable normal in array
    edk::GU_GLSL::guDisableClientState(GU_NORMAL_ARRAY);
    //enable texture coord in array
    edk::GU_GLSL::guDisableClientState(GU_TEXTURE_COORD_ARRAY);

    edk::GU_GLSL::guDontUseBuffer(GU_ARRAY_BUFFER);
}

//DRAWWire UPDATE
void edk::shape::Polygon3DList::drawWireUpdate_NULL(edk::uint32 /*mode*/){
    this->drawWirePolygons();
    //change the drawFunction
    this->setVBOFunctionNULL();
}
void edk::shape::Polygon3DList::drawWireUpdate_XY(edk::uint32 mode){
    this->updateVBOWire();
    edk::GU_GLSL::guUseBuffer(GU_ARRAY_BUFFER,this->vboWire);
    //draw only the positions
    //enable vertex in array
    edk::GU_GLSL::guEnableClientState(GU_VERTEX_ARRAY);
    //set the vertex position in array
    edk::GU_GLSL::guVertexPointer2f32(0u,2u);

    //draw the array
    edk::GU_GLSL::guDrawArrays(mode,0,this->vboWireCount);

    //enable vertex in array
    edk::GU_GLSL::guDisableClientState(GU_VERTEX_ARRAY);

    edk::GU_GLSL::guDontUseBuffer(GU_ARRAY_BUFFER);
    //change the drawFunction
    this->vboDrawWire = &edk::shape::Polygon3DList::drawWire_XY;
}
void edk::shape::Polygon3DList::drawWireUpdate_XYZ(edk::uint32 mode){
    this->updateVBOWire();
    edk::GU_GLSL::guUseBuffer(GU_ARRAY_BUFFER,this->vboWire);

    //enable vertex in array
    edk::GU_GLSL::guEnableClientState(GU_VERTEX_ARRAY);
    //set the vertex position in array
    edk::GU_GLSL::guVertexPointer3f32(0u,3u);

    //draw the array
    edk::GU_GLSL::guDrawArrays(mode,0,this->vboWireCount);

    //enable vertex in array
    edk::GU_GLSL::guDisableClientState(GU_VERTEX_ARRAY);

    edk::GU_GLSL::guDontUseBuffer(GU_ARRAY_BUFFER);
    //change the drawFunction
    this->vboDrawWire = &edk::shape::Polygon3DList::drawWire_XYZ;
}
void edk::shape::Polygon3DList::drawWireUpdate_XY_NxNyNz(edk::uint32 mode){
    this->updateVBOWire();
    edk::GU_GLSL::guUseBuffer(GU_ARRAY_BUFFER,this->vboWire);

    //enable normal in array
    edk::GU_GLSL::guEnableClientState(GU_NORMAL_ARRAY);
    //set the normal position in array
    edk::GU_GLSL::guNormalPointerF32(2u,5u);
    //enable vertex in array
    edk::GU_GLSL::guEnableClientState(GU_VERTEX_ARRAY);
    //set the vertex position in array
    edk::GU_GLSL::guVertexPointer2f32(0u,5u);

    //draw the array
    edk::GU_GLSL::guDrawArrays(mode,0,this->vboWireCount);

    //enable vertex in array
    edk::GU_GLSL::guDisableClientState(GU_VERTEX_ARRAY);
    //enable normal in array
    edk::GU_GLSL::guDisableClientState(GU_NORMAL_ARRAY);

    edk::GU_GLSL::guDontUseBuffer(GU_ARRAY_BUFFER);
    //change the drawFunction
    this->vboDrawWire = &edk::shape::Polygon3DList::drawWire_XY_NxNyNz;
}
void edk::shape::Polygon3DList::drawWireUpdate_XYZ_NxNyNz(edk::uint32 mode){
    this->updateVBOWire();
    edk::GU_GLSL::guUseBuffer(GU_ARRAY_BUFFER,this->vboWire);

    //enable normal in array
    edk::GU_GLSL::guEnableClientState(GU_NORMAL_ARRAY);
    //set the normal position in array
    edk::GU_GLSL::guNormalPointerF32(3u,6u);
    //enable vertex in array
    edk::GU_GLSL::guEnableClientState(GU_VERTEX_ARRAY);
    //set the vertex position in array
    edk::GU_GLSL::guVertexPointer3f32(0u,6u);

    //draw the array
    edk::GU_GLSL::guDrawArrays(mode,0,this->vboWireCount);

    //enable vertex in array
    edk::GU_GLSL::guDisableClientState(GU_VERTEX_ARRAY);
    //enable normal in array
    edk::GU_GLSL::guDisableClientState(GU_NORMAL_ARRAY);

    edk::GU_GLSL::guDontUseBuffer(GU_ARRAY_BUFFER);
    //change the drawFunction
    this->vboDrawWire = &edk::shape::Polygon3DList::drawWire_XYZ_NxNyNz;
}
void edk::shape::Polygon3DList::drawWireUpdate_XY_RGB(edk::uint32 mode){
    this->updateVBOWire();
    edk::GU_GLSL::guUseBuffer(GU_ARRAY_BUFFER,this->vboWire);

    //enable color in array
    edk::GU_GLSL::guEnableClientState(GU_COLOR_ARRAY);
    //set the color position in array
    edk::GU_GLSL::guColorPointer3f32(2u,5u);
    //enable vertex in array
    edk::GU_GLSL::guEnableClientState(GU_VERTEX_ARRAY);
    //set the vertex position in array
    edk::GU_GLSL::guVertexPointer2f32(0u,5u);

    //draw the array
    edk::GU_GLSL::guDrawArrays(mode,0,this->vboWireCount);

    //enable vertex in array
    edk::GU_GLSL::guDisableClientState(GU_VERTEX_ARRAY);
    //enable color in array
    edk::GU_GLSL::guDisableClientState(GU_COLOR_ARRAY);

    edk::GU_GLSL::guDontUseBuffer(GU_ARRAY_BUFFER);
    //change the drawFunction
    this->vboDrawWire = &edk::shape::Polygon3DList::drawWire_XY_RGB;
}
void edk::shape::Polygon3DList::drawWireUpdate_XYZ_RGB(edk::uint32 mode){
    this->updateVBOWire();
    edk::GU_GLSL::guUseBuffer(GU_ARRAY_BUFFER,this->vboWire);

    //enable color in array
    edk::GU_GLSL::guEnableClientState(GU_COLOR_ARRAY);
    //set the color position in array
    edk::GU_GLSL::guColorPointer3f32(3,6u);
    //enable vertex in array
    edk::GU_GLSL::guEnableClientState(GU_VERTEX_ARRAY);
    //set the vertex position in array
    edk::GU_GLSL::guVertexPointer3f32(0u,6u);

    //draw the array
    edk::GU_GLSL::guDrawArrays(mode,0,this->vboWireCount);

    //enable vertex in array
    edk::GU_GLSL::guDisableClientState(GU_VERTEX_ARRAY);
    //enable color in array
    edk::GU_GLSL::guDisableClientState(GU_COLOR_ARRAY);

    edk::GU_GLSL::guDontUseBuffer(GU_ARRAY_BUFFER);
    //change the drawFunction
    this->vboDrawWire = &edk::shape::Polygon3DList::drawWire_XYZ_RGB;
}
void edk::shape::Polygon3DList::drawWireUpdate_XY_RGBA(edk::uint32 mode){
    this->updateVBOWire();
    edk::GU_GLSL::guUseBuffer(GU_ARRAY_BUFFER,this->vboWire);

    //enable color in array
    edk::GU_GLSL::guEnableClientState(GU_COLOR_ARRAY);
    //set the color position in array
    edk::GU_GLSL::guColorPointer4f32(2u,6u);
    //enable vertex in array
    edk::GU_GLSL::guEnableClientState(GU_VERTEX_ARRAY);
    //set the vertex position in array
    edk::GU_GLSL::guVertexPointer2f32(0u,6u);

    //draw the array
    edk::GU_GLSL::guDrawArrays(mode,0,this->vboWireCount);

    //enable vertex in array
    edk::GU_GLSL::guDisableClientState(GU_VERTEX_ARRAY);
    //enable color in array
    edk::GU_GLSL::guDisableClientState(GU_COLOR_ARRAY);

    edk::GU_GLSL::guDontUseBuffer(GU_ARRAY_BUFFER);
    //change the drawFunction
    this->vboDrawWire = &edk::shape::Polygon3DList::drawWire_XY_RGBA;
}
void edk::shape::Polygon3DList::drawWireUpdate_XYZ_RGBA(edk::uint32 mode){
    this->updateVBOWire();
    edk::GU_GLSL::guUseBuffer(GU_ARRAY_BUFFER,this->vboWire);

    //enable color in array
    edk::GU_GLSL::guEnableClientState(GU_COLOR_ARRAY);
    //set the color position in array
    edk::GU_GLSL::guColorPointer4f32(3u,7u);
    //enable vertex in array
    edk::GU_GLSL::guEnableClientState(GU_VERTEX_ARRAY);
    //set the vertex position in array
    edk::GU_GLSL::guVertexPointer3f32(0u,7u);

    //draw the array
    edk::GU_GLSL::guDrawArrays(mode,0,this->vboWireCount);

    //enable vertex in array
    edk::GU_GLSL::guDisableClientState(GU_VERTEX_ARRAY);
    //enable color in array
    edk::GU_GLSL::guDisableClientState(GU_COLOR_ARRAY);

    edk::GU_GLSL::guDontUseBuffer(GU_ARRAY_BUFFER);
    //change the drawFunction
    this->vboDrawWire = &edk::shape::Polygon3DList::drawWire_XYZ_RGBA;
}
void edk::shape::Polygon3DList::drawWireUpdate_XY_RGB_NxNyNz(edk::uint32 mode){
    this->updateVBOWire();
    edk::GU_GLSL::guUseBuffer(GU_ARRAY_BUFFER,this->vboWire);

    //enable normal in array
    edk::GU_GLSL::guEnableClientState(GU_NORMAL_ARRAY);
    //set the normal position in array
    edk::GU_GLSL::guNormalPointerF32(5u,8u);
    //enable color in array
    edk::GU_GLSL::guEnableClientState(GU_COLOR_ARRAY);
    //set the color position in array
    edk::GU_GLSL::guColorPointer3f32(2u,8u);
    //enable vertex in array
    edk::GU_GLSL::guEnableClientState(GU_VERTEX_ARRAY);
    //set the vertex position in array
    edk::GU_GLSL::guVertexPointer2f32(0u,8u);

    //draw the array
    edk::GU_GLSL::guDrawArrays(mode,0,this->vboWireCount);

    //enable vertex in array
    edk::GU_GLSL::guDisableClientState(GU_VERTEX_ARRAY);
    //enable color in array
    edk::GU_GLSL::guDisableClientState(GU_COLOR_ARRAY);
    //enable normal in array
    edk::GU_GLSL::guDisableClientState(GU_NORMAL_ARRAY);

    edk::GU_GLSL::guDontUseBuffer(GU_ARRAY_BUFFER);
    //change the drawFunction
    this->vboDrawWire = &edk::shape::Polygon3DList::drawWire_XY_RGB_NxNyNz;
}
void edk::shape::Polygon3DList::drawWireUpdate_XYZ_RGB_NxNyNz(edk::uint32 mode){
    this->updateVBOWire();
    edk::GU_GLSL::guUseBuffer(GU_ARRAY_BUFFER,this->vboWire);

    //enable normal in array
    edk::GU_GLSL::guEnableClientState(GU_NORMAL_ARRAY);
    //set the normal position in array
    edk::GU_GLSL::guNormalPointerF32(6u,9u);
    //enable color in array
    edk::GU_GLSL::guEnableClientState(GU_COLOR_ARRAY);
    //set the color position in array
    edk::GU_GLSL::guColorPointer3f32(3u,9u);
    //enable vertex in array
    edk::GU_GLSL::guEnableClientState(GU_VERTEX_ARRAY);
    //set the vertex position in array
    edk::GU_GLSL::guVertexPointer3f32(0u,9u);

    //draw the array
    edk::GU_GLSL::guDrawArrays(mode,0,this->vboWireCount);

    //enable vertex in array
    edk::GU_GLSL::guDisableClientState(GU_VERTEX_ARRAY);
    //enable color in array
    edk::GU_GLSL::guDisableClientState(GU_COLOR_ARRAY);
    //enable normal in array
    edk::GU_GLSL::guDisableClientState(GU_NORMAL_ARRAY);

    edk::GU_GLSL::guDontUseBuffer(GU_ARRAY_BUFFER);
    //change the drawFunction
    this->vboDrawWire = &edk::shape::Polygon3DList::drawWire_XYZ_RGB_NxNyNz;
}
void edk::shape::Polygon3DList::drawWireUpdate_XY_RGBA_NxNyNz(edk::uint32 mode){
    this->updateVBOWire();
    edk::GU_GLSL::guUseBuffer(GU_ARRAY_BUFFER,this->vboWire);

    //enable normal in array
    edk::GU_GLSL::guEnableClientState(GU_NORMAL_ARRAY);
    //set the normal position in array
    edk::GU_GLSL::guNormalPointerF32(6u,9u);
    //enable color in array
    edk::GU_GLSL::guEnableClientState(GU_COLOR_ARRAY);
    //set the color position in array
    edk::GU_GLSL::guColorPointer4f32(2u,9u);
    //enable vertex in array
    edk::GU_GLSL::guEnableClientState(GU_VERTEX_ARRAY);
    //set the vertex position in array
    edk::GU_GLSL::guVertexPointer2f32(0u,9u);

    //draw the array
    edk::GU_GLSL::guDrawArrays(mode,0,this->vboWireCount);

    //enable vertex in array
    edk::GU_GLSL::guDisableClientState(GU_VERTEX_ARRAY);
    //enable color in array
    edk::GU_GLSL::guDisableClientState(GU_COLOR_ARRAY);
    //enable normal in array
    edk::GU_GLSL::guDisableClientState(GU_NORMAL_ARRAY);

    edk::GU_GLSL::guDontUseBuffer(GU_ARRAY_BUFFER);
    //change the drawFunction
    this->vboDrawWire = &edk::shape::Polygon3DList::drawWire_XY_RGBA_NxNyNz;
}
void edk::shape::Polygon3DList::drawWireUpdate_XYZ_RGBA_NxNyNz(edk::uint32 mode){
    this->updateVBOWire();
    edk::GU_GLSL::guUseBuffer(GU_ARRAY_BUFFER,this->vboWire);

    //enable normal in array
    edk::GU_GLSL::guEnableClientState(GU_NORMAL_ARRAY);
    //set the normal position in array
    edk::GU_GLSL::guNormalPointerF32(7u,10u);
    //enable color in array
    edk::GU_GLSL::guEnableClientState(GU_COLOR_ARRAY);
    //set the color position in array
    edk::GU_GLSL::guColorPointer4f32(3u,10u);
    //enable vertex in array
    edk::GU_GLSL::guEnableClientState(GU_VERTEX_ARRAY);
    //set the vertex position in array
    edk::GU_GLSL::guVertexPointer3f32(0u,10u);

    //draw the array
    edk::GU_GLSL::guDrawArrays(mode,0,this->vboWireCount);

    //enable vertex in array
    edk::GU_GLSL::guDisableClientState(GU_VERTEX_ARRAY);
    //enable color in array
    edk::GU_GLSL::guDisableClientState(GU_COLOR_ARRAY);
    //enable normal in array
    edk::GU_GLSL::guDisableClientState(GU_NORMAL_ARRAY);

    edk::GU_GLSL::guDontUseBuffer(GU_ARRAY_BUFFER);
    //change the drawFunction
    this->vboDrawWire = &edk::shape::Polygon3DList::drawWire_XYZ_RGBA_NxNyNz;
}
void edk::shape::Polygon3DList::drawWireUpdate_XY_RGB_NxNyNz_UVxUVy(edk::uint32 mode){
    this->updateVBOWire();
    edk::GU_GLSL::guUseBuffer(GU_ARRAY_BUFFER,this->vboWire);

    //enable texture coord in array
    edk::GU_GLSL::guEnableClientState(GU_TEXTURE_COORD_ARRAY);
    //set the texture coor position in array
    edk::GU_GLSL::guTexCoordPointer2f32(8u,10u);
    //enable normal in array
    edk::GU_GLSL::guEnableClientState(GU_NORMAL_ARRAY);
    //set the normal position in array
    edk::GU_GLSL::guNormalPointerF32(5u,10u);
    //enable color in array
    edk::GU_GLSL::guEnableClientState(GU_COLOR_ARRAY);
    //set the color position in array
    edk::GU_GLSL::guColorPointer3f32(2u,10u);
    //enable vertex in array
    edk::GU_GLSL::guEnableClientState(GU_VERTEX_ARRAY);
    //set the vertex position in array
    edk::GU_GLSL::guVertexPointer2f32(0u,10u);

    //draw the array
    edk::GU_GLSL::guDrawArrays(mode,0,this->vboWireCount);

    //enable vertex in array
    edk::GU_GLSL::guDisableClientState(GU_VERTEX_ARRAY);
    //enable color in array
    edk::GU_GLSL::guDisableClientState(GU_COLOR_ARRAY);
    //enable normal in array
    edk::GU_GLSL::guDisableClientState(GU_NORMAL_ARRAY);
    //enable texture coord in array
    edk::GU_GLSL::guDisableClientState(GU_TEXTURE_COORD_ARRAY);

    edk::GU_GLSL::guDontUseBuffer(GU_ARRAY_BUFFER);
    //change the drawFunction
    this->vboDrawWire = &edk::shape::Polygon3DList::drawWire_XY_RGB_NxNyNz_UVxUVy;
}
void edk::shape::Polygon3DList::drawWireUpdate_XYZ_RGB_NxNyNz_UVxUVy(edk::uint32 mode){
    this->updateVBOWire();
    edk::GU_GLSL::guUseBuffer(GU_ARRAY_BUFFER,this->vboWire);

    //enable texture coord in array
    edk::GU_GLSL::guEnableClientState(GU_TEXTURE_COORD_ARRAY);
    //set the texture coor position in array
    edk::GU_GLSL::guTexCoordPointer2f32(9u,11u);
    //enable normal in array
    edk::GU_GLSL::guEnableClientState(GU_NORMAL_ARRAY);
    //set the normal position in array
    edk::GU_GLSL::guNormalPointerF32(6u,11u);
    //enable color in array
    edk::GU_GLSL::guEnableClientState(GU_COLOR_ARRAY);
    //set the color position in array
    edk::GU_GLSL::guColorPointer3f32(3u,11u);
    //enable vertex in array
    edk::GU_GLSL::guEnableClientState(GU_VERTEX_ARRAY);
    //set the vertex position in array
    edk::GU_GLSL::guVertexPointer3f32(0u,11u);

    //draw the array
    edk::GU_GLSL::guDrawArrays(mode,0,this->vboWireCount);

    //enable vertex in array
    edk::GU_GLSL::guDisableClientState(GU_VERTEX_ARRAY);
    //enable color in array
    edk::GU_GLSL::guDisableClientState(GU_COLOR_ARRAY);
    //enable normal in array
    edk::GU_GLSL::guDisableClientState(GU_NORMAL_ARRAY);
    //enable texture coord in array
    edk::GU_GLSL::guDisableClientState(GU_TEXTURE_COORD_ARRAY);

    edk::GU_GLSL::guDontUseBuffer(GU_ARRAY_BUFFER);
    //change the drawFunction
    this->vboDrawWire = &edk::shape::Polygon3DList::drawWire_XYZ_RGB_NxNyNz_UVxUVy;
}
void edk::shape::Polygon3DList::drawWireUpdate_XY_RGBA_NxNyNz_UVxUVy(edk::uint32 mode){
    this->updateVBOWire();
    edk::GU_GLSL::guUseBuffer(GU_ARRAY_BUFFER,this->vboWire);

    //enable texture coord in array
    edk::GU_GLSL::guEnableClientState(GU_TEXTURE_COORD_ARRAY);
    //set the texture coor position in array
    edk::GU_GLSL::guTexCoordPointer2f32(9u,11u);
    //enable normal in array
    edk::GU_GLSL::guEnableClientState(GU_NORMAL_ARRAY);
    //set the normal position in array
    edk::GU_GLSL::guNormalPointerF32(6u,11u);
    //enable color in array
    edk::GU_GLSL::guEnableClientState(GU_COLOR_ARRAY);
    //set the color position in array
    edk::GU_GLSL::guColorPointer4f32(2u,11u);
    //enable vertex in array
    edk::GU_GLSL::guEnableClientState(GU_VERTEX_ARRAY);
    //set the vertex position in array
    edk::GU_GLSL::guVertexPointer2f32(0u,11u);

    //draw the array
    edk::GU_GLSL::guDrawArrays(mode,0,this->vboWireCount);

    //enable vertex in array
    edk::GU_GLSL::guDisableClientState(GU_VERTEX_ARRAY);
    //enable color in array
    edk::GU_GLSL::guDisableClientState(GU_COLOR_ARRAY);
    //enable normal in array
    edk::GU_GLSL::guDisableClientState(GU_NORMAL_ARRAY);
    //enable texture coord in array
    edk::GU_GLSL::guDisableClientState(GU_TEXTURE_COORD_ARRAY);

    edk::GU_GLSL::guDontUseBuffer(GU_ARRAY_BUFFER);
    //change the drawFunction
    this->vboDrawWire = &edk::shape::Polygon3DList::drawWire_XY_RGBA_NxNyNz_UVxUVy;
}
void edk::shape::Polygon3DList::drawWireUpdate_XYZ_RGBA_NxNyNz_UVxUVy(edk::uint32 mode){
    this->updateVBOWire();
    edk::GU_GLSL::guUseBuffer(GU_ARRAY_BUFFER,this->vboWire);

    //enable texture coord in array
    edk::GU_GLSL::guEnableClientState(GU_TEXTURE_COORD_ARRAY);
    //set the texture coor position in array
    edk::GU_GLSL::guTexCoordPointer2f32(10u,12u);
    //enable normal in array
    edk::GU_GLSL::guEnableClientState(GU_NORMAL_ARRAY);
    //set the normal position in array
    edk::GU_GLSL::guNormalPointerF32(7u,12u);
    //enable color in array
    edk::GU_GLSL::guEnableClientState(GU_COLOR_ARRAY);
    //set the color position in array
    edk::GU_GLSL::guColorPointer4f32(3u,12u);
    //enable vertex in array
    edk::GU_GLSL::guEnableClientState(GU_VERTEX_ARRAY);
    //set the vertex position in array
    edk::GU_GLSL::guVertexPointer3f32(0u,12u);

    //draw the array
    edk::GU_GLSL::guDrawArrays(mode,0,this->vboWireCount);

    //enable vertex in array
    edk::GU_GLSL::guDisableClientState(GU_VERTEX_ARRAY);
    //enable color in array
    edk::GU_GLSL::guDisableClientState(GU_COLOR_ARRAY);
    //enable normal in array
    edk::GU_GLSL::guDisableClientState(GU_NORMAL_ARRAY);
    //enable texture coord in array
    edk::GU_GLSL::guDisableClientState(GU_TEXTURE_COORD_ARRAY);

    edk::GU_GLSL::guDontUseBuffer(GU_ARRAY_BUFFER);
    //change the drawFunction
    this->vboDrawWire = &edk::shape::Polygon3DList::drawWire_XYZ_RGBA_NxNyNz_UVxUVy;
}
//Set polygons color
bool edk::shape::Polygon3DList::setPolygonsColor(edk::color4f32 color){
    //test if have polygons
    if(this->polygons.size()){
        edk::shape::Polygon3D* polygon=NULL;
        //set the polygonColors
        for(edk::uint32 i=0u;i<this->polygons.size();i++){
            polygon = this->polygons.get(i);
            if(polygon){
                polygon->setPolygonColor(color);
            }
        }
        return true;
    }
    return false;
}
bool edk::shape::Polygon3DList::setPolygonsColor(edk::color3f32 color){
    return setPolygonsColor(color.r,color.g,color.b);
}
bool edk::shape::Polygon3DList::setPolygonsColor(edk::float32 r,edk::float32 g,edk::float32 b){
    //test if have polygons
    if(this->polygons.size()){
        edk::shape::Polygon3D* polygon=NULL;
        //set the polygonColors
        for(edk::uint32 i=0u;i<this->polygons.size();i++){
            polygon = this->polygons.get(i);
            if(polygon){
                polygon->setPolygonColor(r,g,b);
            }
        }
        return true;
    }
    return false;
}
bool edk::shape::Polygon3DList::setPolygonsColor(edk::float32 r,edk::float32 g,edk::float32 b,edk::float32 a){
    //test if have polygons
    if(this->polygons.size()){
        edk::shape::Polygon3D* polygon=NULL;
        //set the polygonColors
        for(edk::uint32 i=0u;i<this->polygons.size();i++){
            polygon = this->polygons.get(i);
            if(polygon){
                polygon->setPolygonColor(r,g,b,a);
            }
        }
        return true;
    }
    return false;
}
bool edk::shape::Polygon3DList::setPolygonsColorR(edk::float32 r){
    //test if have polygons
    if(this->polygons.size()){
        edk::shape::Polygon3D* polygon=NULL;
        //set the polygonColors
        for(edk::uint32 i=0u;i<this->polygons.size();i++){
            polygon = this->polygons.get(i);
            if(polygon){
                polygon->setPolygonColorR(r);
            }
        }
        return true;
    }
    return false;
}
bool edk::shape::Polygon3DList::setPolygonsColorG(edk::float32 g){
    //test if have polygons
    if(this->polygons.size()){
        edk::shape::Polygon3D* polygon=NULL;
        //set the polygonColors
        for(edk::uint32 i=0u;i<this->polygons.size();i++){
            polygon = this->polygons.get(i);
            if(polygon){
                polygon->setPolygonColorG(g);
            }
        }
        return true;
    }
    return false;
}
bool edk::shape::Polygon3DList::setPolygonsColorB(edk::float32 b){
    //test if have polygons
    if(this->polygons.size()){
        edk::shape::Polygon3D* polygon=NULL;
        //set the polygonColors
        for(edk::uint32 i=0u;i<this->polygons.size();i++){
            polygon = this->polygons.get(i);
            if(polygon){
                polygon->setPolygonColorB(b);
            }
        }
        return true;
    }
    return false;
}
bool edk::shape::Polygon3DList::setPolygonsColorA(edk::float32 a){
    //test if have polygons
    if(this->polygons.size()){
        edk::shape::Polygon3D* polygon=NULL;
        //set the polygonColors
        for(edk::uint32 i=0u;i<this->polygons.size();i++){
            polygon = this->polygons.get(i);
            if(polygon){
                polygon->setPolygonColorA(a);
            }
        }
        return true;
    }
    return false;
}
//set polygons smooth
bool edk::shape::Polygon3DList::setPolygonsSmooth(bool smooth){
    //test if have polygons
    if(this->polygons.size()){
        edk::shape::Polygon3D* polygon=NULL;
        //set the polygonColors
        for(edk::uint32 i=0u;i<this->polygons.size();i++){
            polygon = this->polygons.getPolygon(i);
            if(polygon){
                polygon->smooth=smooth;
            }
        }
        return true;
    }
    return false;
}
bool edk::shape::Polygon3DList::setPolygonsSmoothOn(){
    //test if have polygons
    if(this->polygons.size()){
        edk::shape::Polygon3D* polygon=NULL;
        //set the polygonColors
        for(edk::uint32 i=0u;i<this->polygons.size();i++){
            polygon = this->polygons.getPolygon(i);
            if(polygon){
                polygon->smooth=true;
            }
        }
        return true;
    }
    return false;
}
bool edk::shape::Polygon3DList::setPolygonsSmoothOff(){
    //test if have polygons
    if(this->polygons.size()){
        edk::shape::Polygon3D* polygon=NULL;
        //set the polygonColors
        for(edk::uint32 i=0u;i<this->polygons.size();i++){
            polygon = this->polygons.getPolygon(i);
            if(polygon){
                polygon->smooth=false;
            }
        }
        return true;
    }
    return false;
}
//update polygons normals
bool edk::shape::Polygon3DList::updatePolygonsNormals(){
    //test if have polygons
    if(this->polygons.size()){
        edk::shape::Polygon3D* polygon=NULL;
        //set the polygonColors
        for(edk::uint32 i=0u;i<this->polygons.size();i++){
            polygon = this->polygons.getPolygon(i);
            if(polygon){
                polygon->updateNormal();
            }
        }
        return true;
    }
    return false;
}

//set physics
bool edk::shape::Polygon3DList::setPolygonDensity(edk::uint32 position,edk::float32 density){
    if(this->polygons.havePos(position)){
        this->polygons.get(position)->setDensity(density);
        return true;
    }
    return false;
}
void edk::shape::Polygon3DList::setDensity(edk::float32 density){
    edk::uint32 size = this->polygons.size();
    for(edk::uint32 i=0u;i<size;i++){
        if(this->polygons.havePos(i)){
            this->polygons.get(i)->setDensity(density);
        }
    }
}
bool edk::shape::Polygon3DList::setPolygonFriction(edk::uint32 position,edk::float32 friction){
    if(this->polygons.havePos(position)){
        this->polygons.get(position)->setFriction(friction);
        return true;
    }
    return false;
}
void edk::shape::Polygon3DList::setFriction(edk::float32 friction){
    edk::uint32 size = this->polygons.size();
    for(edk::uint32 i=0u;i<size;i++){
        if(this->polygons.havePos(i)){
            this->polygons.get(i)->setFriction(friction);
        }
    }
}
bool edk::shape::Polygon3DList::setPolygonRestitution(edk::uint32 position,edk::float32 restitution){
    if(this->polygons.havePos(position)){
        this->polygons.get(position)->setRestitution(restitution);
        return true;
    }
    return false;
}
void edk::shape::Polygon3DList::setRestitution(edk::float32 restitution){
    edk::uint32 size = this->polygons.size();
    for(edk::uint32 i=0u;i<size;i++){
        if(this->polygons.havePos(i)){
            this->polygons.get(i)->setRestitution(restitution);
        }
    }
}
//getPhysics
edk::float32 edk::shape::Polygon3DList::getPolygonDensity(edk::uint32 position){
    if(this->polygons.havePos(position)){
        return this->polygons.get(position)->getDensity();
    }
    //return initial value
    return 1.f;
}
edk::float32 edk::shape::Polygon3DList::getPolygonFriction(edk::uint32 position){
    if(this->polygons.havePos(position)){
        return this->polygons.get(position)->getFriction();
    }
    //return initial value
    return 0.f;
}
edk::float32 edk::shape::Polygon3DList::getPolygonRestitution(edk::uint32 position){
    if(this->polygons.havePos(position)){
        return this->polygons.get(position)->getRestitution();
    }
    //return initial value
    return 0.f;
}

//function to calculate boundingBox
bool edk::shape::Polygon3DList::calculateBoundingBox(edk::cubef32* rectangle,edk::vector::Matrixf32<4u,4u>* transformMat){
    if(rectangle && transformMat){
        edk::uint32 size = this->polygons.size();
        if(size){
            //copy the first polygon
            if(this->polygons.havePos(0u)){
                *rectangle = this->polygons.get(0u)->generateBoundingBox(transformMat);
                //draw the polygons
                for(edk::uint32 i=1u;i<size;i++){
                    if(this->polygons.havePos(i)){
                        this->polygons.get(i)->calculateBoundingBox(rectangle,transformMat);
                    }
                }
                return true;
            }
        }
    }
    return false;
}
edk::cubef32 edk::shape::Polygon3DList::generateBoundingBox(edk::vector::Matrixf32<4u,4u>* transformMat){
    edk::cubef32 ret;
    if(transformMat){
        edk::uint32 size = this->polygons.size();
        if(size){
            //copy the first polygon
            if(this->polygons.havePos(0u)){
                ret = this->polygons.get(0u)->generateBoundingBox(transformMat);
                //draw the polygons
                for(edk::uint32 i=1u;i<size;i++){
                    if(this->polygons.havePos(i)){
                        this->polygons.get(i)->calculateBoundingBox(&ret,transformMat);
                    }
                }
            }
        }
    }
    return ret;
}
bool edk::shape::Polygon3DList::calculateBoundingPoint(edk::vec3f32 point,edk::vec3f32* dest,edk::vector::Matrixf32<4u,4u>* transformMat){
    if(dest && transformMat){
        this->tempP.setVertexPosition(0u,point);
        return this->tempP.calculateBoundingPoint(dest,transformMat);
    }
    return false;
}
edk::vec3f32 edk::shape::Polygon3DList::generateBoundingPoint(edk::vec3f32 point,edk::vector::Matrixf32<4u,4u>* transformMat){
    edk::vec3f32 ret;
    if(transformMat){
        this->tempP.setVertexPosition(0u,point);
        ret = this->tempP.generateBoundingPoint(transformMat);
    }
    return ret;
}
//function to calculate boundingBox from polygon positions
bool edk::shape::Polygon3DList::calculateBoundingBoxFromPolygons(edk::cubef32* rectangle,
                                                                 edk::vector::Matrixf32<4u,4u>* transformMat,
                                                                 edk::uint32 lenght,
                                                                 edk::uint32* positions
                                                                 ){
    if(rectangle && transformMat && positions){
        edk::uint32 size = this->polygons.size();
        if(size && lenght){
            edk::uint32 value = positions[0u];
            //copy the first polygon
            if(this->polygons.havePos(value)){
                *rectangle = this->polygons.get(value)->generateBoundingBox(transformMat);
                for(edk::uint32 i=1u;i<lenght;i++){
                    value = positions[i];
                    if(this->polygons.havePos(value)){
                        this->polygons.get(value)->calculateBoundingBox(rectangle,transformMat);
                    }
                }
                return true;
            }
        }
    }
    return false;
}
edk::cubef32 edk::shape::Polygon3DList::generateBoundingBoxFromPolygons(edk::vector::Matrixf32<4u,4u>* transformMat,
                                                                        edk::uint32 lenght,
                                                                        edk::uint32* positions
                                                                        ){
    edk::cubef32 ret;
    if(transformMat && positions){
        edk::uint32 size = this->polygons.size();
        if(size && lenght){
            edk::uint32 value = positions[0u];
            //copy the first polygon
            if(this->polygons.havePos(value)){
                ret = this->polygons.get(value)->generateBoundingBox(transformMat);
                for(edk::uint32 i=1u;i<lenght;i++){
                    value = positions[i];
                    if(this->polygons.havePos(value)){
                        this->polygons.get(value)->calculateBoundingBox(&ret,transformMat);
                    }
                }
            }
        }
    }
    return ret;
}
bool edk::shape::Polygon3DList::getWorldPolygon(edk::shape::Polygon3D* dest,edk::uint32 polygonPosition,edk::vector::Matrixf32<4u,4u>* transformMat){
    bool ret=false;
    if(dest){
        if(transformMat){
            //copy the first rectangle
            if(this->polygons.havePos(polygonPosition)){
                ret = this->polygons.get(polygonPosition)->getWorldPolygonClone(dest,transformMat);
            }
        }
    }
    return ret;
}

//generate world polygons from list into another list
bool edk::shape::Polygon3DList::generateWorldPolygons(edk::shape::Polygon3DList* dest,
                                                      edk::vector::Matrixf32<4u,4u>* transformMat
                                                      ){
    if(dest){
        if(transformMat){
            edk::uint32 size = this->getPolygonSize();
            if(size == dest->getPolygonSize()){
                for(edk::uint32 i=0u;i<size;i++){
                    if(!this->polygons.get(i)->getWorldPolygonCopy(dest->polygons.get(i),transformMat)){
                        return false;
                    }
                }
                return true;
            }
        }
    }
    return false;
}
bool edk::shape::Polygon3DList::generateWorldPolygons(edk::shape::Polygon3DList* dest,
                                                      edk::vector::Matrixf32<4u,4u>* transformMat,
                                                      edk::uint32 lenght,
                                                      edk::uint32* positions

                                                      ){
    if(dest){
        if(transformMat && positions){
            edk::uint32 size = this->getPolygonSize();
            if(size == dest->getPolygonSize()){
                edk::uint32 value=0u;
                for(edk::uint32 i=0u;i<lenght;i++){
                    value = positions[i];
                    if(!this->polygons.get(value)->getWorldPolygonCopy(dest->polygons.get(value),transformMat)){
                        return false;
                    }
                }
                return true;
            }
        }
    }
    return false;
}

//ADD
//add a polygon to the mesh
edk::uint32 edk::shape::Polygon3DList::addPolygon(edk::shape::Polygon3D polygon){
    //return
    edk::uint32 ret=0u;
    //polygon to be added
    edk::shape::Polygon3D* temp=NULL;
    //test if it's a line
    if(polygon.isLine()){
        temp=new edk::shape::Lines3D;
    }
    //test al much vertex have the polygon. Test if are a polygon or Rectangle.
    else if(polygon.getVertexCount()>=2u){
        if(polygon.getVertexCount()>2u){
            if(polygon.isCircle()){
                //it's circle

                //create the circle
                temp=(edk::shape::Polygon3D*)new edk::shape::Circle3D;
            }
            else{
                //it's a polygon

                //create the polygon
                temp=new edk::shape::Polygon3D;
            }
        }
        else{
            //it's a rectangle

            //create a rectangle
            temp=(edk::shape::Polygon3D*) new edk::shape::Cube3D;
        }
    }

    //test if have created the polygon
    if(temp){
        //copy the polygon
        //*temp = polygon;
        temp->cloneFrom(&polygon);

        //load the size of the polygons
        edk::uint32 size = this->polygons.size() - this->polygons.sizeRemoved();
        //add the polygon
        ret = this->polygons.pushBack(temp);
        //now compare the size in the list
        if(size<(this->polygons.size() - this->polygons.sizeRemoved())){
            //polygon added

            //select the ret
            this->selectPolygon(ret);
        }
        else{
            //polygon dont added. Delete the temp
            delete temp;
            //clean the ret
            ret=0u;
        }
    }
    //set temp NULL
    temp=NULL;

    //else return 0u;
    return ret;
}
//GETERS
//return the polygonSize
edk::uint32 edk::shape::Polygon3DList::getPolygonSize(){
    //
    return this->polygons.size();
}
//return true if have a polygon selected
bool edk::shape::Polygon3DList::haveSelected(){
    //
    return (bool) this->selected;
}

//test if have a polygon in a position
bool edk::shape::Polygon3DList::havePolygon(edk::uint32 position){
    return this->polygons.havePos(position);
}
//get the polygon in a position
edk::shape::Polygon3D edk::shape::Polygon3DList::getPolygon(edk::uint32 position){
    edk::shape::Polygon3D ret;
    if(this->havePolygon(position)){
        //get the polygon
        edk::shape::Polygon3D* temp = this->polygons.get(position);
        if(temp){
            //copy the polygon
            ret.cloneFrom(temp);
        }
    }
    return ret;
}
bool edk::shape::Polygon3DList::getPolygon(edk::uint32 position,edk::shape::Polygon3D* dest){
    if(dest && this->havePolygon(position)){
        //get the polygon
        edk::shape::Polygon3D* temp = this->polygons.get(position);
        if(temp){
            //copy the polygon
            return dest->cloneFrom(temp);
        }
    }
    return false;
}

//DELETE
//clean the polygons
void edk::shape::Polygon3DList::cleanPolygons(){
    this->freeSelected();
    edk::uint32 size = this->polygons.size();
    //remove all the polygons
    for(edk::uint32 i=size;i>0u;i--){
        //
        this->removePolygon(i-1u);
    }
    this->polygons.clean();

    this->cleanVertexes();
    this->cleanVertexesWithMatrix();
    this->cleanVertexesWire();
    this->deleteVBO();
    this->deleteVBOWithMatrix();
    this->deleteVBOWire();
}
//delete the polygon
bool edk::shape::Polygon3DList::removePolygon(edk::uint32 position){
    //test if have this polygon
    if(this->polygons.havePos(position)){
        //then get the element in the position
        edk::shape::Polygon3D* temp = this->polygons.remove(position);
        //test if have the temp
        if(temp){
            //delete the polygon
            delete temp;
        }
        temp=NULL;
        //return true
        return true;
    }
    //else return false
    return false;
}
//free de selected
void edk::shape::Polygon3DList::freeSelected(){
    //
    this->selected=NULL;
}

//SELECTED
bool edk::shape::Polygon3DList::selectPolygon(edk::uint32 position){
    //test if have the position
    if(this->polygons.havePos(position)){
        //select the polygon
        this->selected = this->polygons.get(position);
        //test if have selected some polygon
        if(this->selected){
            //then return true
            return true;
        }
    }
    //else return false
    return false;
}
//set the position of a vertex
bool edk::shape::Polygon3DList::selectedSetVertexPosition(edk::uint32 vertex,edk::vec3f32 position){
    //test if have selected
    if(this->selected){
        //

        //return true
        return this->selected->setVertexPosition(vertex,position);
    }
    //else return false
    return false;
}
bool edk::shape::Polygon3DList::selectedSetVertexPosition(edk::uint32 vertex,edk::float32 x,edk::float32 y,edk::float32 z){
    //test if have selected
    if(this->selected){
        //

        //return true
        return this->selected->setVertexPosition(vertex,x,y,z);
    }
    //else return false
    return false;
}
//set the color of a vertex
bool edk::shape::Polygon3DList::selectedSetVertexColor(edk::uint32 vertex,edk::color4f32 color){
    //test if have selected
    if(this->selected){
        //

        //return true
        return this->selected->setVertexColor(vertex,color);
    }
    //else return false
    return false;
}
bool edk::shape::Polygon3DList::selectedSetVertexColor(edk::uint32 vertex,edk::float32 r,edk::float32 g,edk::float32 b){
    //test if have selected
    if(this->selected){
        //

        //return true
        return this->selected->setVertexColor(vertex,r,g,b);
    }
    //else return false
    return false;
}
bool edk::shape::Polygon3DList::selectedSetVertexColor(edk::uint32 vertex,edk::float32 r,edk::float32 g,edk::float32 b,edk::float32 a){
    //test if have selected
    if(this->selected){
        //

        //return true
        return this->selected->setVertexColor(vertex,r,g,b,a);
    }
    //else return false
    return false;
}
//Set polygon color
bool edk::shape::Polygon3DList::selectedSetPolygonColor(edk::color4f32 color){
    //test if have selected
    if(this->selected){
        //

        //return true
        return this->selected->setPolygonColor(color);
    }
    //else return false
    return false;
}
bool edk::shape::Polygon3DList::selectedSetPolygonColor(edk::float32 r,edk::float32 g,edk::float32 b){
    //test if have selected
    if(this->selected){
        //

        //return true
        return this->selected->setPolygonColor(r,g,b);
    }
    //else return false
    return false;
}
bool edk::shape::Polygon3DList::selectedSetPolygonColor(edk::float32 r,edk::float32 g,edk::float32 b,edk::float32 a){
    //test if have selected
    if(this->selected){
        //

        //return true
        return this->selected->setPolygonColor(r,g,b,a);
    }
    //else return false
    return false;
}
//set the UVMap of the vertex
bool edk::shape::Polygon3DList::selectedSetVertexUV(edk::uint32 vertex,edk::vec2f32 uv){
    //test if have selected
    if(this->selected){
        //

        //return true
        return this->selected->setVertexUV(vertex,uv);
    }
    //else return false
    return false;
}
bool edk::shape::Polygon3DList::selectedSetVertexUV(edk::uint32 vertex,edk::float32 x,edk::float32 y){
    //test if have selected
    if(this->selected){
        //

        //return true
        return this->selected->setVertexUV(vertex,x,y);
    }
    //else return false
    return false;
}
//Set the polygonFrames setting in the vertexs
bool edk::shape::Polygon3DList::selectedSetPolygonUVFrames(edk::vec2ui32 frames){
    //test if have selected
    if(this->selected){
        //

        //return true
        return this->selected->setPolygonUVFrames(frames);
    }
    //else return false
    return false;
}
bool edk::shape::Polygon3DList::selectedSetPolygonUVFrames(edk::uint32 x,edk::uint32 y){
    //test if have selected
    if(this->selected){
        //

        //return true
        return this->selected->setPolygonUVFrames(x,y);
    }
    //else return false
    return false;
}
bool edk::shape::Polygon3DList::selectedSetPolygonUVFramesX(edk::uint32 x){
    //test if have selected
    if(this->selected){
        //

        //return true
        return this->selected->setPolygonUVFramesX(x);
    }
    //else return false
    return false;
}
bool edk::shape::Polygon3DList::selectedSetPolygonUVFramesY(edk::uint32 y){
    //test if have selected
    if(this->selected){
        //

        //return true
        return this->selected->setPolygonUVFramesY(y);
    }
    //else return false
    return false;
}
//Set the polygon frame
bool edk::shape::Polygon3DList::selectedSetPolygonUVFrame(edk::vec2ui32 frame){
    return this->selectedUsePolygonUVFrame(frame);
}
bool edk::shape::Polygon3DList::selectedSetPolygonUVFrame(edk::uint32 x,edk::uint32 y){
    return this->selectedUsePolygonUVFrame(x,y);
}
bool edk::shape::Polygon3DList::selectedSetPolygonUVFramePosition(edk::uint32 position){
    return this->selectedUsePolygonUVFramePosition(position);
}
bool edk::shape::Polygon3DList::selectedSetPolygonUVFrameX(edk::uint32 x){
    return this->selectedUsePolygonUVFrameX(x);
}
bool edk::shape::Polygon3DList::selectedSetPolygonUVFrameY(edk::uint32 y){
    return this->selectedUsePolygonUVFrameY(y);
}
bool edk::shape::Polygon3DList::selectedUsePolygonUVFrame(edk::vec2ui32 frame){
    //test if have selected
    if(this->selected){
        //
        this->selected->usePolygonUVFrame(frame);

        //return true
        return true;
    }
    //else return false
    return false;
}
bool edk::shape::Polygon3DList::selectedUsePolygonUVFrame(edk::uint32 x,edk::uint32 y){
    return this->selectedUsePolygonUVFrame(edk::vec2ui32 (x,y));
}
bool edk::shape::Polygon3DList::selectedUsePolygonUVFramePosition(edk::uint32 position){
    //test if have selcted
    if(this->selected){
        //
        this->selected->usePolygonUVFramePosition(position);

        //return true
        return true;
    }
    //else return false
    return false;
}
bool edk::shape::Polygon3DList::selectedUsePolygonUVFrameX(edk::uint32 x){
    //test if have selected
    if(this->selected){
        //
        this->selected->usePolygonUVFrameX(x);

        //return true
        return true;
    }
    //else return false
    return false;
}
bool edk::shape::Polygon3DList::selectedUsePolygonUVFrameY(edk::uint32 y){
    //test if have selected
    if(this->selected){
        //
        this->selected->usePolygonUVFrameY(y);

        //return true
        return true;
    }
    //else return false
    return false;
}
//Set physics
bool edk::shape::Polygon3DList::selectedSetDensity(edk::float32 density){
    //test if have selected
    if(this->selected){
        //
        this->selected->setDensity(density);

        //return true
        return true;
    }
    //else return false
    return false;
}
bool edk::shape::Polygon3DList::selectedSetFriction(edk::float32 friction){
    //test if have selected
    if(this->selected){
        //
        this->selected->setFriction(friction);

        //return true
        return true;
    }
    //else return false
    return false;
}
bool edk::shape::Polygon3DList::selectedSetRestitution(edk::float32 restitution){
    //test if have selected
    if(this->selected){
        //
        this->selected->setRestitution(restitution);

        //return true
        return true;
    }
    //else return false
    return false;
}
//set transform
bool edk::shape::Polygon3DList::selectedSetTranslate(edk::vec3f32 translate){
    //test if have selected
    if(this->selected){
        this->selected->setTranslate(translate);
        //return true
        return true;
    }
    //else return false
    return false;
}
bool edk::shape::Polygon3DList::selectedSetTranslate(edk::float32 translate){
    //test if have selected
    if(this->selected){
        this->selected->setTranslate(translate);
        //return true
        return true;
    }
    //else return false
    return false;
}
bool edk::shape::Polygon3DList::selectedSetTranslate(edk::float32 x,edk::float32 y,edk::float32 z){
    return this->selectedSetTranslate(edk::vec3f32(x,y,z));
}
bool edk::shape::Polygon3DList::selectedSetScale(edk::size3f32 scale){
    //test if have selected
    if(this->selected){
        this->selected->setScale(scale);
        //return true
        return true;
    }
    //else return false
    return false;
}
bool edk::shape::Polygon3DList::selectedSetScale(edk::float32 scale){
    //test if have selected
    if(this->selected){
        this->selected->setScale(scale);
        //return true
        return true;
    }
    //else return false
    return false;
}
bool edk::shape::Polygon3DList::selectedSetScale(edk::float32 width,edk::float32 height,edk::float32 length){
    return this->selectedSetScale(edk::size3f32(width,height,length));
}
bool edk::shape::Polygon3DList::selectedSetAngle(edk::float32 angle){
    //test if have selected
    if(this->selected){
        this->selected->setAngle(angle);
        //return true
        return true;
    }
    //else return false
    return false;
}

//CLEANS
//remove the UV of one vertex
bool edk::shape::Polygon3DList::selectedRemoveVertexUV(edk::uint32 vertex){
    //test if have selected
    if(this->selected){
        //
        return this->selected->removeVertexUV(vertex);
    }
    //else return false
    return false;
}
//remove the UV from the polygon
bool edk::shape::Polygon3DList::selectedRemovePolygonUV(){
    //test if have selected
    if(this->selected){
        //
        this->selected->removePolygonUV();

        //return true
        return true;
    }
    //else return false
    return false;
}
//clean the UV animation in polygons
bool edk::shape::Polygon3DList::selectedCleanPolygonUVAnimation(){
    //test if have selected
    if(this->selected){
        //
        this->selected->cleanPolygonUVAnimation();

        //return true
        return true;
    }
    //else return false
    return false;
}
//return the vertexCount
edk::uint32 edk::shape::Polygon3DList::selectedGetVertexCount(){
    //test if have selected
    if(this->selected){
        //
        return this->selected->getVertexCount();
    }
    //else return zero
    return 0u;
}
//return if the vertex have UV
edk::uint8 edk::shape::Polygon3DList::selectedGetVertexType(edk::uint32 pos){
    //test if have selected
    if(this->selected){
        //
        return this->selected->getVertexType(pos);
    }
    //else return zero
    return 0u;
}
//return the vertex
edk::vec3f32 edk::shape::Polygon3DList::selectedGetVertexPosition(edk::uint32 pos){
    //test if have selected
    if(this->selected){
        //
        return this->selected->getVertexPosition(pos);
    }
    //else return zero
    return edk::vec3f32(0.f,0.f,0.f);
}
//return the vertex color
edk::color4f32 edk::shape::Polygon3DList::selectedGetVertexColor(edk::uint32 pos){
    //test if have selected
    if(this->selected){
        //
        return this->selected->getVertexColor(pos);
    }
    //else return zero
    return edk::color4f32(0,0,0,0);
}
//return the vertex UV
edk::vec2f32 edk::shape::Polygon3DList::selectedGetVertexUV(edk::uint32 pos){
    //test if have selected
    if(this->selected){
        //
        return this->selected->getVertexUV(pos);
    }
    //else return zero
    return edk::vec2f32();
}
//return the frames
edk::vec2ui32 edk::shape::Polygon3DList::selectedGetFrames(){
    //test if have selected
    if(this->selected){
        return this->selected->getFrames();
    }
    //else return zero
    return edk::vec2ui32(0u,0u);
}
edk::uint32 edk::shape::Polygon3DList::selectedGetFramesPosition(){
    //test if have selected
    if(this->selected){
        return this->selected->getFramesPosition();
    }
    //else return zero
    return 0u;
}
//return the frameUsed
edk::vec2ui32 edk::shape::Polygon3DList::selectedGetFrameUsed(){
    //test if have selected
    if(this->selected){
        //
        return this->selected->getFrameUsed();
    }
    //else return zero
    return edk::vec2ui32(0u,0u);
}
edk::uint32 edk::shape::Polygon3DList::selectedGetFramePositionUsed(){
    //test if have selected
    if(this->selected){
        //
        return this->selected->getFramePositionUsed();
    }
    //else return zero
    return 0u;
}

//get Transate
edk::vec3f32 edk::shape::Polygon3DList::selectedGetTranslate(){
    //test if have selected
    if(this->selected){
        //
        return this->selected->getTranslate();
    }
    //else return zero
    return edk::vec3f32(0.f,0.f,0.f);
}
//get scale
edk::size3f32 edk::shape::Polygon3DList::selectedGetScale(){
    //test if have selected
    if(this->selected){
        //
        return this->selected->getScale();
    }
    //else return zero
    return edk::size3f32(0.f,0.f,0.f);
}
//get angle
edk::float32 edk::shape::Polygon3DList::selectedGetAngle(){
    //test if have selected
    if(this->selected){
        //
        return this->selected->getAngle();
    }
    //else return zero
    return 0u;
}
//return if is a circle
bool edk::shape::Polygon3DList::selectedIsCircle(){
    //test if have selected
    if(this->selected){
        //
        return this->selected->isCircle();
    }
    return false;
}
//return if is a line
bool edk::shape::Polygon3DList::selectedIsLine(){
    //test if have selected
    if(this->selected){
        //
        return this->selected->isLine();
    }
    return false;
}
//return the collisionID
edk::uint8 edk::shape::Polygon3DList::selectedGetCollisionID(){
    //test if have selected
    if(this->selected){
        //
        return this->selected->getCollisionID();
    }
    return 0u;
}
//return the circle radius
edk::float32 edk::shape::Polygon3DList::selectedGetCircleRadius(){
    //test if have selected
    if(this->selected){
        //
        return this->selected->getCircleRadius();
    }
    return 0.f;
}
//get Physics
edk::float32 edk::shape::Polygon3DList::selectedGetDensity(){
    //test if have selected
    if(this->selected){
        //
        return this->selected->getDensity();
    }
    return 0.f;
}
edk::float32 edk::shape::Polygon3DList::selectedGetFriction(){
    //test if have selected
    if(this->selected){
        //
        return this->selected->getFriction();
    }
    return 0.f;
}
edk::float32 edk::shape::Polygon3DList::selectedGetRestitution(){
    //test if have selected
    if(this->selected){
        //
        return this->selected->getRestitution();
    }
    return 0.f;
}
//draw the selectedPolygon
bool edk::shape::Polygon3DList::selectedDrawPolygon(){
    //test if have selected
    if(this->selected){
        //
        this->selected->draw();
        return true;
    }
    return false;
}
bool edk::shape::Polygon3DList::selectedDrawWirePolygon(){
    //test if have selected
    if(this->selected){
        //
        this->selected->drawWire();
        return true;
    }
    return false;
}
bool edk::shape::Polygon3DList::selectedDrawVertexs(edk::color3f32 color){
    //test if have selected
    if(this->selected){
        //
        this->selected->drawPolygonVertexs(edk::color4f32(color.r,color.g,color.b,1.f));
        return true;
    }
    return false;
}

//VBO
void edk::shape::Polygon3DList::setUseVBO(bool use){
    this->canUseVBO=use;
}
void edk::shape::Polygon3DList::useVBO(){
    this->setUseVBO(true);
}
void edk::shape::Polygon3DList::dontUseVBO(){
    this->setUseVBO(false);
}
//convert the mesh to the VBO
bool edk::shape::Polygon3DList::generateVBO(){
    //draw the polygons
    edk::uint32 size = this->polygons.size();
    edk::shape::Polygon3D* temp;
    this->cleanVertexes();
    edk::shape::Vertex3DAnimatedUV *vert0,*vert1,*vert2;
    edk::shape::Vertex3DAnimatedUV *vertT0,*vertT1,*vertT2;
    if(size){
        if(this->vertexs.createArray(size*3u)){
            bool ret = true;
            for(edk::uint32 i=0u;i<size;i++){
                vert0 = new edk::shape::Vertex3DAnimatedUV;
                vert1 = new edk::shape::Vertex3DAnimatedUV;
                vert2 = new edk::shape::Vertex3DAnimatedUV;
                if(vert0
                        && vert1
                        && vert2
                        ){
                    this->vertexs.set((i*3u)+0u,(edk::shape::Vertex3D*)vert0);
                    this->vertexs.set((i*3u)+1u,(edk::shape::Vertex3D*)vert1);
                    this->vertexs.set((i*3u)+2u,(edk::shape::Vertex3D*)vert2);
                    //create the new vertex
                    if(this->polygons.havePos(i)){
                        temp = this->polygons.get(i);
                        if(temp){
                            if(temp->getVertexCount()>=3u){
                                //add the vertexes
                                vertT0 = (edk::shape::Vertex3DAnimatedUV*)temp->getVertexPointerInPosition(0u);
                                vertT1 = (edk::shape::Vertex3DAnimatedUV*)temp->getVertexPointerInPosition(1u);
                                vertT2 = (edk::shape::Vertex3DAnimatedUV*)temp->getVertexPointerInPosition(2u);
                                if(vertT0
                                        && vertT1
                                        && vertT2){
                                    //vert0
                                    vert0->position = vertT0->position;
                                    vert0->normal = vertT0->normal;
                                    vert0->color = vertT0->color;
                                    //set the values
                                    if(vertT0->getType()==EDK_SHAPE_UV){
                                        vert0->setUV(vertT0->getUV());
                                    }
                                    else if(vertT0->getType()==EDK_SHAPE_ANIMATED_UV){
                                        vert0->setUV(vertT0->getUV());
                                        vert0->setUVFrames(vertT0->getUVFrames());
                                    }
                                    //vert1
                                    vert1->position = vertT1->position;
                                    vert1->normal = vertT1->normal;
                                    vert1->color = vertT1->color;
                                    //set the values
                                    if(vertT1->getType()==EDK_SHAPE_UV){
                                        vert1->setUV(vertT1->getUV());
                                    }
                                    else if(vertT1->getType()==EDK_SHAPE_ANIMATED_UV){
                                        vert1->setUV(vertT1->getUV());
                                        vert1->setUVFrames(vertT1->getUVFrames());
                                    }
                                    //vert2
                                    vert2->position = vertT2->position;
                                    vert2->normal = vertT2->normal;
                                    vert2->color = vertT2->color;
                                    //set the values
                                    if(vertT2->getType()==EDK_SHAPE_UV){
                                        vert2->setUV(vertT2->getUV());
                                    }
                                    else if(vertT2->getType()==EDK_SHAPE_ANIMATED_UV){
                                        vert2->setUV(vertT2->getUV());
                                        vert2->setUVFrames(vertT2->getUVFrames());
                                    }
                                }
                            }
                        }
                    }
                }
                else{
                    if(vert0){delete vert0;}
                    if(vert1){delete vert1;}
                    if(vert2){delete vert2;}
                    ret = false;
                    break;
                }
            }
            if(!ret){
                this->cleanVertexes();
                return false;
            }

            //create and update the VBO
            this->createVBO(this->vertexs.size(),edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy);
            this->updateVBOValues();

            return true;
        }
    }
    return false;
}
bool edk::shape::Polygon3DList::generateVBOWire(){
    //draw the polygons
    edk::uint32 size = this->polygons.size();
    edk::shape::Polygon3D* temp;
    this->cleanVertexesWire();
    edk::shape::Vertex3DAnimatedUV *vert0,*vert1,*vert2,*vert3,*vert4,*vert5;
    edk::shape::Vertex3DAnimatedUV *vertT0,*vertT1,*vertT2;
    if(size){
        if(this->vertexsWire.createArray(size*6u)){
            bool ret = true;
            for(edk::uint32 i=0u;i<size;i++){
                vert0 = new edk::shape::Vertex3DAnimatedUV;
                vert1 = new edk::shape::Vertex3DAnimatedUV;
                vert2 = new edk::shape::Vertex3DAnimatedUV;
                vert3 = new edk::shape::Vertex3DAnimatedUV;
                vert4 = new edk::shape::Vertex3DAnimatedUV;
                vert5 = new edk::shape::Vertex3DAnimatedUV;
                if(vert0
                        && vert1
                        && vert2
                        && vert3
                        && vert4
                        && vert5
                        ){
                    this->vertexsWire.set((i*6u)+0u,(edk::shape::Vertex3D*)vert0);
                    this->vertexsWire.set((i*6u)+1u,(edk::shape::Vertex3D*)vert1);
                    this->vertexsWire.set((i*6u)+2u,(edk::shape::Vertex3D*)vert2);
                    this->vertexsWire.set((i*6u)+3u,(edk::shape::Vertex3D*)vert3);
                    this->vertexsWire.set((i*6u)+4u,(edk::shape::Vertex3D*)vert4);
                    this->vertexsWire.set((i*6u)+5u,(edk::shape::Vertex3D*)vert5);
                    //create the new vertex
                    if(this->polygons.havePos(i)){
                        temp = this->polygons.get(i);
                        if(temp){
                            if(temp->getVertexCount()>=3u){
                                //add the vertexes
                                vertT0 = (edk::shape::Vertex3DAnimatedUV*)temp->getVertexPointerInPosition(0u);
                                vertT1 = (edk::shape::Vertex3DAnimatedUV*)temp->getVertexPointerInPosition(1u);
                                vertT2 = (edk::shape::Vertex3DAnimatedUV*)temp->getVertexPointerInPosition(2u);
                                if(vertT0
                                        && vertT1
                                        && vertT2){
                                    //vertT0 -> vert0
                                    vert0->position = vertT0->position;
                                    vert0->normal = vertT0->normal;
                                    vert0->color = vertT0->color;
                                    //set the values
                                    if(vertT0->getType()==EDK_SHAPE_UV){
                                        vert0->setUV(vertT0->getUV());
                                    }
                                    else if(vertT0->getType()==EDK_SHAPE_ANIMATED_UV){
                                        vert0->setUV(vertT0->getUV());
                                        vert0->setUVFrames(vertT0->getUVFrames());
                                    }
                                    //vertT1 -> vert1
                                    vert1->position = vertT1->position;
                                    vert1->normal = vertT1->normal;
                                    vert1->color = vertT1->color;
                                    //set the values
                                    if(vertT1->getType()==EDK_SHAPE_UV){
                                        vert1->setUV(vertT1->getUV());
                                    }
                                    else if(vertT1->getType()==EDK_SHAPE_ANIMATED_UV){
                                        vert1->setUV(vertT1->getUV());
                                        vert1->setUVFrames(vertT1->getUVFrames());
                                    }
                                    //vertT1 -> vert2
                                    vert2->position = vertT1->position;
                                    vert2->normal = vertT1->normal;
                                    vert2->color = vertT1->color;
                                    //set the values
                                    if(vertT1->getType()==EDK_SHAPE_UV){
                                        vert2->setUV(vertT1->getUV());
                                    }
                                    else if(vertT1->getType()==EDK_SHAPE_ANIMATED_UV){
                                        vert2->setUV(vertT1->getUV());
                                        vert2->setUVFrames(vertT1->getUVFrames());
                                    }
                                    //vertT2 -> vert3
                                    vert3->position = vertT2->position;
                                    vert3->normal = vertT2->normal;
                                    vert3->color = vertT2->color;
                                    //set the values
                                    if(vertT2->getType()==EDK_SHAPE_UV){
                                        vert3->setUV(vertT2->getUV());
                                    }
                                    else if(vertT2->getType()==EDK_SHAPE_ANIMATED_UV){
                                        vert3->setUV(vertT2->getUV());
                                        vert3->setUVFrames(vertT2->getUVFrames());
                                    }
                                    //vertT2 -> vert4
                                    vert4->position = vertT2->position;
                                    vert4->normal = vertT2->normal;
                                    vert4->color = vertT2->color;
                                    //set the values
                                    if(vertT2->getType()==EDK_SHAPE_UV){
                                        vert4->setUV(vertT2->getUV());
                                    }
                                    else if(vertT2->getType()==EDK_SHAPE_ANIMATED_UV){
                                        vert4->setUV(vertT2->getUV());
                                        vert4->setUVFrames(vertT2->getUVFrames());
                                    }
                                    //vertT0 -> vert5
                                    vert5->position = vertT0->position;
                                    vert5->normal = vertT0->normal;
                                    vert5->color = vertT0->color;
                                    //set the values
                                    if(vertT0->getType()==EDK_SHAPE_UV){
                                        vert5->setUV(vertT0->getUV());
                                    }
                                    else if(vertT0->getType()==EDK_SHAPE_ANIMATED_UV){
                                        vert5->setUV(vertT0->getUV());
                                        vert5->setUVFrames(vertT0->getUVFrames());
                                    }
                                }
                            }
                        }
                    }
                }
                else{
                    if(vert0){delete vert0;}
                    if(vert1){delete vert1;}
                    if(vert2){delete vert2;}
                    if(vert3){delete vert3;}
                    if(vert4){delete vert4;}
                    if(vert5){delete vert5;}
                    ret = false;
                    break;
                }
            }
            if(!ret){
                this->cleanVertexesWire();
                return false;
            }

            //create and update the VBO
            this->createVBOWire(this->vertexsWire.size(),edk::GU::vbo_XYZ_RGBA_NxNyNz_UVxUVy);
            this->updateVBOWireValues();

            return true;
        }
    }
    return false;
}

//XML
bool edk::shape::Polygon3DList::writeToXML(edk::XML* xml,edk::uint32 id){
    if(xml){
        bool ret=false;
        //create the nameID
        edk::char8* nameID = edk::String::int64ToStr(id);
        if(nameID){
            //concat
            edk::char8* name = edk::String::strCat((edk::char8*)"mesh_",nameID);
            if(name){
                //create the name
                if(xml->addSelectedNextChild(name)){
                    if(xml->selectChild(name)){
                        edk::uint32 size = this->polygons.size();
                        edk::char8* temp = edk::String::int64ToStr((edk::int64)size);
                        if(temp){
                            xml->addSelectedNextAttribute((edk::char8*)"pCount",temp);
                            free(temp);
                        }
                        edk::shape::Polygon3D* poly;
                        //write the polygons
                        for(edk::uint32 i=0u;i<size;i++){
                            if(this->polygons.havePos(i)){
                                poly=this->polygons.get(i);
                                if(poly){
                                    poly->writeToXML(xml,i);
                                }
                            }
                        }
                        ret=true;
                        xml->selectFather();
                    }
                }
                free(name);
            }
            free(nameID);
        }
        return ret;
    }
    return false;
}
bool edk::shape::Polygon3DList::readFromXML(edk::XML* xml,edk::uint32 id){
    if(xml){
        bool ret=false;
        //create the nameID
        edk::char8* nameID = edk::String::int64ToStr(id);
        if(nameID){
            //concat
            edk::char8* name = edk::String::strCat((edk::char8*)"mesh_",nameID);
            if(name){
                //select the name
                if(xml->selectChild(name)){
                    this->cleanPolygons();
                    edk::uint32 size = edk::String::strToInt64(xml->getSelectedAttributeValueByName("pCount"));
                    edk::shape::Polygon3D poly;
                    //READ the polygons
                    for(edk::uint32 i=0u;i<size;i++){
                        poly.deletePolygon();
                        poly.readFromXML(xml,i);
                        //add the poly
                        this->addPolygon(poly);
                    }
                    ret=true;
                    xml->selectFather();
                }
                free(name);
            }
            free(nameID);
        }
        return ret;
    }
    return false;
}
bool edk::shape::Polygon3DList::cloneFrom(edk::shape::Polygon3DList* list){
    //delete the polygons
    this->cleanPolygons();
    if(list){
        //read the polygons
#if defined(edkCPPversion17)
        edk::uint32 size = list->polygons.size();
#else
        register edk::uint32 size = list->polygons.size();
#endif
        edk::uint32 select=0u;
        edk::shape::Polygon3D* temp = NULL;
        for(edk::uint32 i=0u;i<size;i++){
            temp=list->polygons.get(i);
            if(temp){
                if(temp==list->selected){
                    select=i;
                }
                this->addPolygon(*temp);
            }
        }
        this->selectPolygon(select);
        return true;
    }
    return false;
}

//DRAW
//print the mesh
void edk::shape::Polygon3DList::printPolygons(){
    //print the polygons
    for(edk::uint32 i=0u;i<this->polygons.size();i++){
        if(this->polygons.havePos(i)){
            printf("\nPolygon %u"
                   ,i
                   );fflush(stdout);
            this->polygons.get(i)->print();
        }
    }
}
bool edk::shape::Polygon3DList::printPolygon(edk::uint32 polygon){
    //print the polygons
    if(polygon<this->polygons.size()){
        if(this->polygons.havePos(polygon)){
            printf("\nPolygon %u"
                   ,polygon
                   );
            this->polygons.get(polygon)->print();
            return true;
        }
    }
    return false;
}

//draw the mesh
void edk::shape::Polygon3DList::drawPolygons(){
    //draw the polygons
    for(edk::uint32 i=0u;i<this->polygons.size();i++){
        if(this->polygons.havePos(i)){
            this->polygons.get(i)->draw();
        }
    }
}
bool edk::shape::Polygon3DList::drawPolygon(edk::uint32 polygon){
    //draw the polygon
    if(polygon<this->polygons.size()){
        if(this->polygons.havePos(polygon)){
            this->polygons.get(polygon)->draw();
            return true;
        }
    }
    return false;
}
//draw the polygons in wireframe
void edk::shape::Polygon3DList::drawWirePolygons(){
    //draw the polygons
    for(edk::uint32 i=0u;i<this->polygons.size();i++){
        if(this->polygons.havePos(i)){
            this->polygons.get(i)->drawWire();
        }
    }
}
bool edk::shape::Polygon3DList::drawWirePolygon(edk::uint32 polygon){
    //draw the polygons
    if(polygon<this->polygons.size()){
        if(this->polygons.havePos(polygon)){
            this->polygons.get(polygon)->drawWire();
            return true;
        }
    }
    return false;
}
void edk::shape::Polygon3DList::drawVertexs(edk::color3f32 color){
    edk::GU::guColor3f32(color);
    //draw the polygons
    for(edk::uint32 i=0u;i<this->polygons.size();i++){
        if(this->polygons.havePos(i)){
            this->polygons.get(i)->drawPolygonVertexs(edk::color4f32(color.r,color.g,color.b,1.f));
        }
    }
}
bool edk::shape::Polygon3DList::drawPolygonVertexs(edk::uint32 polygon,edk::color3f32 color){
    //draw the polygons
    if(polygon<this->polygons.size()){
        if(this->polygons.havePos(polygon)){
            edk::GU::guColor3f32(color);
            this->polygons.get(polygon)->drawPolygonVertexs(edk::color4f32(color.r,color.g,color.b,1.f));
            return true;
        }
    }
    return false;
}
//draw the polygons normals
void edk::shape::Polygon3DList::drawNormals(){
    //draw the polygons
    for(edk::uint32 i=0u;i<this->polygons.size();i++){
        if(this->polygons.havePos(i)){
            this->polygons.get(i)->drawNormals();
        }
    }
}
void edk::shape::Polygon3DList::drawNormalsWithColor(edk::color3f32 color){
    //draw the polygons
    for(edk::uint32 i=0u;i<this->polygons.size();i++){
        if(this->polygons.havePos(i)){
            this->polygons.get(i)->drawNormalsWithColor(edk::color4f32(color.r,color.g,color.b,1.f));
        }
    }
}
//draw the polygons in wireframe in world points
void edk::shape::Polygon3DList::drawWirePolygonsWorld(){
    //draw the polygons
    for(edk::uint32 i=0u;i<this->polygons.size();i++){
        if(this->polygons.havePos(i)){
            this->polygons.get(i)->drawWireWorld();
        }
    }
}
bool edk::shape::Polygon3DList::drawWirePolygonWorld(edk::uint32 polygon){
    //draw the polygons
    if(polygon<this->polygons.size()){
        if(this->polygons.havePos(polygon)){
            this->polygons.get(polygon)->drawWireWorld();
            return true;
        }
    }
    return false;
}
void edk::shape::Polygon3DList::drawVertexsWorld(edk::color3f32 color){
    edk::GU::guColor3f32(color);
    //draw the polygons
    for(edk::uint32 i=0u;i<this->polygons.size();i++){
        if(this->polygons.havePos(i)){
            this->polygons.get(i)->drawPolygonVertexsWorld(edk::color4f32(color.r,color.g,color.b,1.f));
        }
    }
}
bool edk::shape::Polygon3DList::drawPolygonVertexsWorld(edk::uint32 polygon,edk::color3f32 color){
    //draw the polygons
    if(polygon<this->polygons.size()){
        if(this->polygons.havePos(polygon)){
            edk::GU::guColor3f32(color);
            this->polygons.get(polygon)->drawPolygonVertexsWorld(edk::color4f32(color.r,color.g,color.b,1.f));
            return true;
        }
    }
    return false;
}

//draw the mesh with matrix
void edk::shape::Polygon3DList::drawPolygonsWithMatrix(edk::vector::Matrixf32<4u,4u>* matrix,
                                                       edk::vector::Matrixf32<4u,4u>* matrixTemp
                                                       ){
    //draw the polygons
    for(edk::uint32 i=0u;i<this->polygons.size();i++){
        if(this->polygons.havePos(i)){
            this->polygons.get(i)->drawWithMatrix(matrix,matrixTemp);
        }
    }
}
bool edk::shape::Polygon3DList::drawPolygonWithMatrix(edk::vector::Matrixf32<4u,4u>* matrix,
                                                      edk::vector::Matrixf32<4u,4u>* matrixTemp,
                                                      edk::uint32 polygon){
    //draw the polygon
    if(polygon<this->polygons.size()){
        if(this->polygons.havePos(polygon)){
            this->polygons.get(polygon)->drawWithMatrix(matrix,matrixTemp);
            return true;
        }
    }
    return false;
}
//draw the polygons in wireframe with matrix
void edk::shape::Polygon3DList::drawWirePolygonsWithMatrix(edk::vector::Matrixf32<4u,4u>* matrix,
                                                           edk::vector::Matrixf32<4u,4u>* matrixTemp
                                                           ){
    //draw the polygons
    for(edk::uint32 i=0u;i<this->polygons.size();i++){
        if(this->polygons.havePos(i)){
            this->polygons.get(i)->drawWireWithMatrix(matrix,matrixTemp);
        }
    }
}
bool edk::shape::Polygon3DList::drawWirePolygonWithMatrix(edk::vector::Matrixf32<4u,4u>* matrix,
                                                          edk::vector::Matrixf32<4u,4u>* matrixTemp,
                                                          edk::uint32 polygon
                                                          ){
    //draw the polygons
    if(polygon<this->polygons.size()){
        if(this->polygons.havePos(polygon)){
            this->polygons.get(polygon)->drawWireWithMatrix(matrix,matrixTemp);
            return true;
        }
    }
    return false;
}
void edk::shape::Polygon3DList::drawVertexsWithMatrix(edk::vector::Matrixf32<4u,4u>* matrix,
                                                      edk::vector::Matrixf32<4u,4u>* matrixTemp,
                                                      edk::color3f32 color
                                                      ){
    edk::GU::guColor3f32(color);
    //draw the polygons
    for(edk::uint32 i=0u;i<this->polygons.size();i++){
        if(this->polygons.havePos(i)){
            this->polygons.get(i)->drawPolygonVertexsWithMatrix(matrix,
                                                                matrixTemp,
                                                                edk::color4f32(color.r,color.g,color.b,1.f)
                                                                );
        }
    }
}
bool edk::shape::Polygon3DList::drawPolygonVertexsWithMatrix(edk::vector::Matrixf32<4u,4u>* matrix,
                                                             edk::vector::Matrixf32<4u,4u>* matrixTemp,
                                                             edk::uint32 polygon,edk::color3f32 color
                                                             ){
    //draw the polygons
    if(polygon<this->polygons.size()){
        if(this->polygons.havePos(polygon)){
            edk::GU::guColor3f32(color);
            this->polygons.get(polygon)->drawPolygonVertexsWithMatrix(matrix,
                                                                      matrixTemp,
                                                                      edk::color4f32(color.r,color.g,color.b,1.f)
                                                                      );
            return true;
        }
    }
    return false;
}
//draw the polygons in wireframe in world points with matrix
void edk::shape::Polygon3DList::drawWirePolygonsWorldWithMatrix(edk::vector::Matrixf32<4u,4u>* matrix,
                                                                edk::vector::Matrixf32<4u,4u>* matrixTemp
                                                                ){
    //draw the polygons
    for(edk::uint32 i=0u;i<this->polygons.size();i++){
        if(this->polygons.havePos(i)){
            this->polygons.get(i)->drawWireWorldWithMatrix(matrix,matrixTemp);
        }
    }
}
bool edk::shape::Polygon3DList::drawWirePolygonWorldWithMatrix(edk::vector::Matrixf32<4u,4u>* matrix,
                                                               edk::vector::Matrixf32<4u,4u>* matrixTemp,
                                                               edk::uint32 polygon
                                                               ){
    //draw the polygons
    if(polygon<this->polygons.size()){
        if(this->polygons.havePos(polygon)){
            this->polygons.get(polygon)->drawWireWorldWithMatrix(matrix,matrixTemp);
            return true;
        }
    }
    return false;
}
void edk::shape::Polygon3DList::drawVertexsWorldWithMatrix(edk::vector::Matrixf32<4u,4u>* matrix,
                                                           edk::vector::Matrixf32<4u,4u>* matrixTemp,
                                                           edk::color3f32 color
                                                           ){
    edk::GU::guColor3f32(color);
    //draw the polygons
    for(edk::uint32 i=0u;i<this->polygons.size();i++){
        if(this->polygons.havePos(i)){
            this->polygons.get(i)->drawPolygonVertexsWorldWithMatrix(matrix,
                                                                     matrixTemp,
                                                                     edk::color4f32(color.r,color.g,color.b,1.f)
                                                                     );
        }
    }
}
bool edk::shape::Polygon3DList::drawPolygonVertexsWorldWithMatrix(edk::vector::Matrixf32<4u,4u>* matrix,
                                                                  edk::vector::Matrixf32<4u,4u>* matrixTemp
                                                                  ,edk::uint32 polygon,edk::color3f32 color
                                                                  ){
    //draw the polygons
    if(polygon<this->polygons.size()){
        if(this->polygons.havePos(polygon)){
            edk::GU::guColor3f32(color);
            this->polygons.get(polygon)->drawPolygonVertexsWorldWithMatrix(matrix,
                                                                           matrixTemp,
                                                                           edk::color4f32(color.r,color.g,color.b,1.f)
                                                                           );
            return true;
        }
    }
    return false;
}

//VBO
void edk::shape::Polygon3DList::drawVBOPolygons(){
    (this->*vboDraw)(GU_TRIANGLES);
}
void edk::shape::Polygon3DList::drawVBOWirePolygons(){
    this->whiteMaterial.drawStartWithOneTexture();
    (this->*vboDrawWire)(GU_LINES);
    this->whiteMaterial.drawEnd();
}
